// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
typedef enum __swift_bridge__$SortDirectionTag { __swift_bridge__$SortDirection$Unspecified, __swift_bridge__$SortDirection$Ascending, __swift_bridge__$SortDirection$Descending, } __swift_bridge__$SortDirectionTag;
typedef struct __swift_bridge__$SortDirection { __swift_bridge__$SortDirectionTag tag; } __swift_bridge__$SortDirection;
typedef struct __swift_bridge__$Option$SortDirection { bool is_some; __swift_bridge__$SortDirection val; } __swift_bridge__$Option$SortDirection;
void* __swift_bridge__$Vec_SortDirection$new(void);
void __swift_bridge__$Vec_SortDirection$drop(void* vec_ptr);
void __swift_bridge__$Vec_SortDirection$push(void* vec_ptr, __swift_bridge__$SortDirection item);
__swift_bridge__$Option$SortDirection __swift_bridge__$Vec_SortDirection$pop(void* vec_ptr);
__swift_bridge__$Option$SortDirection __swift_bridge__$Vec_SortDirection$get(void* vec_ptr, uintptr_t index);
__swift_bridge__$Option$SortDirection __swift_bridge__$Vec_SortDirection$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SortDirection$len(void* vec_ptr);
void* __swift_bridge__$Vec_SortDirection$as_ptr(void* vec_ptr);

typedef struct __swift_bridge__$IndexCursor { void* digest; uint64_t sender_time_ns; } __swift_bridge__$IndexCursor;
typedef struct __swift_bridge__$Option$IndexCursor { bool is_some; __swift_bridge__$IndexCursor val; } __swift_bridge__$Option$IndexCursor;
typedef struct __swift_bridge__$PagingInfo { uint32_t limit; struct __swift_bridge__$Option$IndexCursor cursor; struct __swift_bridge__$SortDirection direction; } __swift_bridge__$PagingInfo;
typedef struct __swift_bridge__$Option$PagingInfo { bool is_some; __swift_bridge__$PagingInfo val; } __swift_bridge__$Option$PagingInfo;
typedef struct __swift_bridge__$Envelope { void* content_topic; uint64_t timestamp_ns; void* message; } __swift_bridge__$Envelope;
typedef struct __swift_bridge__$Option$Envelope { bool is_some; __swift_bridge__$Envelope val; } __swift_bridge__$Option$Envelope;
typedef struct RustSubscription RustSubscription;
void __swift_bridge__$RustSubscription$_free(void* self);

void* __swift_bridge__$Vec_RustSubscription$new(void);
void __swift_bridge__$Vec_RustSubscription$drop(void* vec_ptr);
void __swift_bridge__$Vec_RustSubscription$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RustSubscription$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RustSubscription$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RustSubscription$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RustSubscription$len(void* vec_ptr);
void* __swift_bridge__$Vec_RustSubscription$as_ptr(void* vec_ptr);

typedef struct QueryResponse QueryResponse;
void __swift_bridge__$QueryResponse$_free(void* self);

void* __swift_bridge__$Vec_QueryResponse$new(void);
void __swift_bridge__$Vec_QueryResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_QueryResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_QueryResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_QueryResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_QueryResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_QueryResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_QueryResponse$as_ptr(void* vec_ptr);

typedef struct RustClient RustClient;
void __swift_bridge__$RustClient$_free(void* self);

void* __swift_bridge__$Vec_RustClient$new(void);
void __swift_bridge__$Vec_RustClient$drop(void* vec_ptr);
void __swift_bridge__$Vec_RustClient$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RustClient$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RustClient$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RustClient$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RustClient$len(void* vec_ptr);
void* __swift_bridge__$Vec_RustClient$as_ptr(void* vec_ptr);

struct __private__ResultPtrAndPtr __swift_bridge__$RustSubscription$get_messages(void* self);
void __swift_bridge__$RustSubscription$close(void* self);
void* __swift_bridge__$QueryResponse$envelopes(void* self);
struct __swift_bridge__$Option$PagingInfo __swift_bridge__$QueryResponse$paging_info(void* self);
void __swift_bridge__$create_client(void* callback_wrapper, void __swift_bridge__$create_client$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* host);
void __swift_bridge__$RustClient$query(void* callback_wrapper, void __swift_bridge__$RustClient$query$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* topic, struct __private__OptionU64 start_time_ns, struct __private__OptionU64 end_time_ns, struct __swift_bridge__$Option$PagingInfo paging_info);
void __swift_bridge__$RustClient$publish(void* callback_wrapper, void __swift_bridge__$RustClient$publish$async(void* callback_wrapper, struct __private__ResultVoidAndPtr ret), void* self, void* token, void* envelopes);
void __swift_bridge__$RustClient$subscribe(void* callback_wrapper, void __swift_bridge__$RustClient$subscribe$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* topics);


