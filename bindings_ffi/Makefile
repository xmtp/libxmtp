PROJECT_NAME = xmtpv3
WORKSPACE_MANIFEST=$(shell cargo locate-project --workspace --message-format=plain)
WORKSPACE_PATH=$(shell dirname $(WORKSPACE_MANIFEST))
TARGET_DIR=$(WORKSPACE_PATH)/target

# Simulator config
ARCHS_IOS = x86_64-apple-ios aarch64-apple-ios-sim
ARCHS_MAC = x86_64-apple-darwin aarch64-apple-darwin
LIB=libxmtpv3.a
DYLIB=libxmtpv3.dylib
JAR_DIR=$(shell pwd)/tests/jar
SQLCIPHER_DIR=$(shell pwd)/sqlcipher
SQLCIPHER_LIB=$(SQLCIPHER_DIR)/.libs/libsqlcipher.a
GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
GIT_COMMIT_HASH=$(shell git log -1 --pretty=format:"%h")
GIT_COMMIT_DATE=$(shell TZ=UTC git log -1 --date=iso-local --pretty=format:"%ad")

install-jar:
	mkdir -p $(JAR_DIR) && \
	curl https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.14.0/jna-5.14.0.jar -o $(JAR_DIR)/jna.jar && \
	curl https://repo1.maven.org/maven2/org/jetbrains/kotlinx/kotlinx-coroutines-core-jvm/1.7.3/kotlinx-coroutines-core-jvm-1.7.3.jar -o $(JAR_DIR)/kotlinx-coroutines-core-jvm.jar && \
	curl https://repo1.maven.org/maven2/org/web3j/crypto/5.0.0/crypto-5.0.0.jar -o $(JAR_DIR)/web3j-crypto.jar && \
	curl https://repo1.maven.org/maven2/org/web3j/utils/5.0.0/utils-5.0.0.jar -o $(JAR_DIR)/web3j-utils.jar && \
	curl https://repo1.maven.org/maven2/org/bouncycastle/bcprov-jdk15on/1.70/bcprov-jdk15on-1.70.jar -o $(JAR_DIR)/bouncycastle.jar && \
	$(MAKE) echo-jar

echo-jar:
	echo "\nAdd the following line to your .zshrc:\nexport CLASSPATH=\"$(shell echo $(JAR_DIR)/*.jar | sed -e 's/ /:/g')\""

download-toolchains:
	rustup target add $(ARCHS_IOS)
	rustup target add $(ARCHS_MAC)
	rustup target add aarch64-apple-ios

all: framework

libxmtp-version:
	echo "Version: $(GIT_COMMIT_HASH)\nBranch: $(GIT_BRANCH)\nDate: $(GIT_COMMIT_DATE)" > libxmtp-version.txt

$(ARCHS_IOS): %:
	IPHONEOS_DEPLOYMENT_TARGET=10 cargo build --target $@ --target-dir $(TARGET_DIR) --release --no-default-features
	mkdir -p build/$@
	mv $(TARGET_DIR)/$@/release/$(LIB) build/$@/$(LIB)
	mv $(TARGET_DIR)/$@/release/$(DYLIB) build/$@/$(DYLIB)

$(ARCHS_MAC): %:
	cargo build --target $@ --target-dir $(TARGET_DIR) --release --no-default-features
	mkdir -p build/$@
	mv $(TARGET_DIR)/$@/release/$(LIB) build/$@/$(LIB)
	mv $(TARGET_DIR)/$@/release/$(DYLIB) build/$@/$(DYLIB)

aarch64-apple-ios:
	IPHONEOS_DEPLOYMENT_TARGET=10 cargo build --target $@ --target-dir $(TARGET_DIR) --release
	mkdir -p build/$@
	mv $(TARGET_DIR)/$@/release/$(LIB) build/$@/$(LIB)
	mv $(TARGET_DIR)/$@/release/$(DYLIB) build/$@/$(DYLIB)

$(LIB): $(ARCHS_IOS) $(ARCHS_MAC) aarch64-apple-ios
$(DYLIB): $(ARCHS_IOS) $(ARCHS_MAC) aarch64-apple-ios

# lipo combines libs for different architectures (aarch64, x86_64, ...) into one fat lib
lipo:
	mkdir -p build/lipo_macos build/lipo_ios_sim
	lipo -create -output build/lipo_ios_sim/$(LIB) $(foreach arch,$(ARCHS_IOS),$(wildcard build/$(arch)/$(LIB)))
	lipo -create -output build/lipo_macos/$(LIB) $(foreach arch,$(ARCHS_MAC),$(wildcard build/$(arch)/$(LIB)))

# lipo combines libs for different architectures (aarch64, x86_64, ...) into one fat lib
lipodyn:
	mkdir -p build/lipo_macos build/lipo_ios_sim
	lipo -create -output build/lipo_ios_sim/$(DYLIB) $(foreach arch,$(ARCHS_IOS),$(wildcard build/$(arch)/$(DYLIB)))
	lipo -create -output build/lipo_macos/$(DYLIB) $(foreach arch,$(ARCHS_MAC),$(wildcard build/$(arch)/$(DYLIB)))

# xcframework combines libs for different platforms (iOS, iOS-simulator, macOS, ...) into one framework that can be used in Xcode
framework: lipo
	rm -rf LibXMTPSwiftFFI.xcframework
	xcodebuild -create-xcframework \
		-library build/aarch64-apple-ios/$(LIB) \
		-headers build/swift/static/include/libxmtp/ \
		-library build/lipo_ios_sim/$(LIB) \
		-headers build/swift/static/include/libxmtp/ \
		-library build/lipo_macos/$(LIB) \
		-headers build/swift/static/include/libxmtp/ \
		-output LibXMTPSwiftFFI.xcframework

frameworkdyn: lipodyn
	rm -rf LibXMTPSwiftFFIDynamic.xcframework
	xcodebuild -create-xcframework \
		-library build/aarch64-apple-ios/$(DYLIB) \
		-headers build/swift/dynamic/include/libxmtp/ \
		-library build/lipo_ios_sim/$(DYLIB) \
		-headers build/swift/dynamic/include/libxmtp/ \
		-library build/lipo_macos/$(DYLIB) \
		-headers build/swift/dynamic/include/libxmtp/ \
		-output LibXMTPSwiftFFIDynamic.xcframework

bindgenstatic:
	cargo build --release -p xmtpv3
	rm -rf build/swift/static
	cargo run --bin ffi-uniffi-bindgen --release --features uniffi/cli generate \
		--library $(TARGET_DIR)/release/$(LIB) \
		--out-dir build/swift/static \
		--language swift

bindgendynamic:
	cargo build --release -p xmtpv3
	rm -rf build/swift/dynamic
	cargo run --bin ffi-uniffi-bindgen --release --features uniffi/cli generate \
		--library $(TARGET_DIR)/release/$(DYLIB) \
		--out-dir build/swift/dynamic \
		--language swift

# build uniffi bindings for swift
swiftdyn: libxmtp-version
	# https://mozilla.github.io/uniffi-rs/swift/module.html#compiling-a-swift-module
	mkdir -p build/swift/dynamic/include/libxmtp
	mv build/swift/dynamic/$(PROJECT_NAME)FFI.h build/swift/dynamic/include/libxmtp/  # Move header
	mv build/swift/dynamic/$(PROJECT_NAME)FFI.modulemap build/swift/dynamic/include/libxmtp/module.modulemap  # Move modulemap
	cp libxmtp-version.txt build/swift/dynamic

swift: libxmtp-version
	# https://mozilla.github.io/uniffi-rs/swift/module.html#compiling-a-swift-module
	mkdir -p build/swift/static/include/libxmtp
	mv build/swift/static/$(PROJECT_NAME)FFI.h build/swift/static/include/libxmtp/  # Move header
	mv build/swift/static/$(PROJECT_NAME)FFI.modulemap build/swift/static/include/libxmtp/module.modulemap  # Move modulemap
	cp libxmtp-version.txt build/swift/static

swiftlocal: libxmtpv3.a bindgenstatic swift framework

swiftdynamic: libxmtpv3.dylib bindgendynamic swiftdyn frameworkdyn

.PHONY: $(ARCHS_IOS) $(ARCHS_MAC) framework all aarch64-apple-ios install-jar echo-jar download-toolchains swift bindgendynamic bindgenstatic frameworkdyn lipo lipodyn download-sqlcipher build-sqlcipher
