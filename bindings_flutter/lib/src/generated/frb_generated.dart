// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'libxmtp_api.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.22';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'xmtp_bindings_flutter',
    ioDirectory: 'target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Uint8List> clientInstallationPublicKey(
      {required Client that, dynamic hint});

  Future<Client> signatureRequiredClientSign(
      {required SignatureRequiredClient that,
      required List<int> signature,
      dynamic hint});

  Future<CreatedClient> createClient(
      {required String host,
      required bool isSecure,
      required String dbPath,
      required U8Array32 encryptionKey,
      required String accountAddress,
      dynamic hint});

  Future<String> generatePrivatePreferencesTopicIdentifier(
      {required List<int> privateKeyBytes, dynamic hint});

  Future<Uint8List> userPreferencesDecrypt(
      {required List<int> publicKey,
      required List<int> privateKey,
      required List<int> encryptedMessage,
      dynamic hint});

  Future<Uint8List> userPreferencesEncrypt(
      {required List<int> publicKey,
      required List<int> privateKey,
      required List<int> message,
      dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ApiError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ApiError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ApiErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcInnerClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcInnerClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcInnerClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilderError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilderError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientBuilderErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StorageError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StorageError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StorageErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AnyhowError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AnyhowError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AnyhowErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XmtpMlsClientClientError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XmtpMlsClientClientError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_XmtpMlsClientClientErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Uint8List> clientInstallationPublicKey(
      {required Client that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_client(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kClientInstallationPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kClientInstallationPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Client_installation_public_key",
        argNames: ["that"],
      );

  @override
  Future<Client> signatureRequiredClientSign(
      {required SignatureRequiredClient that,
      required List<int> signature,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_signature_required_client(that, serializer);
        sse_encode_list_prim_u_8_loose(signature, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_client,
        decodeErrorData: sse_decode_xmtp_error,
      ),
      constMeta: kSignatureRequiredClientSignConstMeta,
      argValues: [that, signature],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignatureRequiredClientSignConstMeta =>
      const TaskConstMeta(
        debugName: "SignatureRequiredClient_sign",
        argNames: ["that", "signature"],
      );

  @override
  Future<CreatedClient> createClient(
      {required String host,
      required bool isSecure,
      required String dbPath,
      required U8Array32 encryptionKey,
      required String accountAddress,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(host, serializer);
        sse_encode_bool(isSecure, serializer);
        sse_encode_String(dbPath, serializer);
        sse_encode_u_8_array_32(encryptionKey, serializer);
        sse_encode_String(accountAddress, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_created_client,
        decodeErrorData: sse_decode_xmtp_error,
      ),
      constMeta: kCreateClientConstMeta,
      argValues: [host, isSecure, dbPath, encryptionKey, accountAddress],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateClientConstMeta => const TaskConstMeta(
        debugName: "create_client",
        argNames: [
          "host",
          "isSecure",
          "dbPath",
          "encryptionKey",
          "accountAddress"
        ],
      );

  @override
  Future<String> generatePrivatePreferencesTopicIdentifier(
      {required List<int> privateKeyBytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(privateKeyBytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_xmtp_error,
      ),
      constMeta: kGeneratePrivatePreferencesTopicIdentifierConstMeta,
      argValues: [privateKeyBytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGeneratePrivatePreferencesTopicIdentifierConstMeta =>
      const TaskConstMeta(
        debugName: "generate_private_preferences_topic_identifier",
        argNames: ["privateKeyBytes"],
      );

  @override
  Future<Uint8List> userPreferencesDecrypt(
      {required List<int> publicKey,
      required List<int> privateKey,
      required List<int> encryptedMessage,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        sse_encode_list_prim_u_8_loose(privateKey, serializer);
        sse_encode_list_prim_u_8_loose(encryptedMessage, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_xmtp_error,
      ),
      constMeta: kUserPreferencesDecryptConstMeta,
      argValues: [publicKey, privateKey, encryptedMessage],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUserPreferencesDecryptConstMeta => const TaskConstMeta(
        debugName: "user_preferences_decrypt",
        argNames: ["publicKey", "privateKey", "encryptedMessage"],
      );

  @override
  Future<Uint8List> userPreferencesEncrypt(
      {required List<int> publicKey,
      required List<int> privateKey,
      required List<int> message,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        sse_encode_list_prim_u_8_loose(privateKey, serializer);
        sse_encode_list_prim_u_8_loose(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_xmtp_error,
      ),
      constMeta: kUserPreferencesEncryptConstMeta,
      argValues: [publicKey, privateKey, message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUserPreferencesEncryptConstMeta => const TaskConstMeta(
        debugName: "user_preferences_encrypt",
        argNames: ["publicKey", "privateKey", "message"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ApiError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ApiError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcInnerClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcInnerClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilderError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilderError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StorageError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StorageError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AnyhowError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AnyhowError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XmtpMlsClientClientError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XmtpMlsClientClientError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError;

  @protected
  ApiError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcInnerClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcInnerClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilderError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StorageError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StorageError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AnyhowError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  XmtpMlsClientClientError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XmtpMlsClientClientError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcInnerClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcInnerClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilderError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StorageError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StorageError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AnyhowError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  XmtpMlsClientClientError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XmtpMlsClientClientError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Client dco_decode_box_autoadd_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_client(raw);
  }

  @protected
  SignatureRequiredClient dco_decode_box_autoadd_signature_required_client(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_signature_required_client(raw);
  }

  @protected
  Client dco_decode_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Client(
      inner:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
              arr[0]),
    );
  }

  @protected
  CreatedClient dco_decode_created_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CreatedClient_Ready(
          dco_decode_box_autoadd_client(raw[1]),
        );
      case 1:
        return CreatedClient_RequiresSignature(
          dco_decode_box_autoadd_signature_required_client(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  SignatureRequiredClient dco_decode_signature_required_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignatureRequiredClient(
      textToSign: dco_decode_String(arr[0]),
      inner:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
              arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  XmtpError dco_decode_xmtp_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return XmtpError_ApiError(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
              raw[1]),
        );
      case 1:
        return XmtpError_ClientBuilderError(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
              raw[1]),
        );
      case 2:
        return XmtpError_ClientError(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
              raw[1]),
        );
      case 3:
        return XmtpError_StorageError(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
              raw[1]),
        );
      case 4:
        return XmtpError_Generic(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApiError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcInnerClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcInnerClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilderError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StorageError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StorageError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AnyhowError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AnyhowError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XmtpMlsClientClientError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XmtpMlsClientClientError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ApiError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcInnerClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcInnerClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilderError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StorageError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StorageError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AnyhowError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AnyhowError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XmtpMlsClientClientError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XmtpMlsClientClientError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Client sse_decode_box_autoadd_client(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_client(deserializer));
  }

  @protected
  SignatureRequiredClient sse_decode_box_autoadd_signature_required_client(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_signature_required_client(deserializer));
  }

  @protected
  Client sse_decode_client(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
            deserializer);
    return Client(inner: var_inner);
  }

  @protected
  CreatedClient sse_decode_created_client(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_client(deserializer);
        return CreatedClient_Ready(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_signature_required_client(deserializer);
        return CreatedClient_RequiresSignature(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  SignatureRequiredClient sse_decode_signature_required_client(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_textToSign = sse_decode_String(deserializer);
    var var_inner =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
            deserializer);
    return SignatureRequiredClient(
        textToSign: var_textToSign, inner: var_inner);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  XmtpError sse_decode_xmtp_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
                deserializer);
        return XmtpError_ApiError(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
                deserializer);
        return XmtpError_ClientBuilderError(var_field0);
      case 2:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
                deserializer);
        return XmtpError_ClientError(var_field0);
      case 3:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
                deserializer);
        return XmtpError_StorageError(var_field0);
      case 4:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
                deserializer);
        return XmtpError_Generic(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
          ApiError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
          ArcInnerClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
          ClientBuilderError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
          StorageError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
          AnyhowError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
          XmtpMlsClientClientError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
          ApiError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
          ArcInnerClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
          ClientBuilderError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
          StorageError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
          AnyhowError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
          XmtpMlsClientClientError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_client(Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_client(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_signature_required_client(
      SignatureRequiredClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_signature_required_client(self, serializer);
  }

  @protected
  void sse_encode_client(Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
        self.inner, serializer);
  }

  @protected
  void sse_encode_created_client(CreatedClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CreatedClient_Ready(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_client(field0, serializer);
      case CreatedClient_RequiresSignature(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_signature_required_client(field0, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_signature_required_client(
      SignatureRequiredClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.textToSign, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcInnerClient(
        self.inner, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_xmtp_error(XmtpError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case XmtpError_ApiError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockApiError(
            field0, serializer);
      case XmtpError_ClientBuilderError(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockClientBuilderError(
            field0, serializer);
      case XmtpError_ClientError(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockxmtp_mlsclientClientError(
            field0, serializer);
      case XmtpError_StorageError(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStorageError(
            field0, serializer);
      case XmtpError_Generic(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockanyhowError(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
