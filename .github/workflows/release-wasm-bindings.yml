name: Release WASM Bindings
on:
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
jobs:
  release:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update rust toolchains, add target
        run: |
          rustup update
      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            bindings_wasm
      - name: Check versions are in sync
        run: |
          chmod +x dev/sync-versions.sh
          ./dev/sync-versions.sh
          
          # Check if there are any changes after syncing versions
          if [[ -n $(git status --porcelain) ]]; then
            echo "::error::Version mismatch detected! Please run 'dev/sync-versions.sh' locally, commit the changes before releasing bindings_wasm"
            echo "Changes detected:"
            git status --porcelain
            exit 1
          fi
      - name: Install wasm-bindgen
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-bindgen
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache-dependency-path: "bindings_wasm/yarn.lock"
          cache: "yarn"
        env:
          SKIP_YARN_COREPACK_CHECK: "1"
      - name: Enable corepack
        run: corepack enable
      - name: Install dependencies
        working-directory: bindings_wasm
        run: |
          yarn
      - name: Install emscripten toolchains
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
      - name: Build
        working-directory: bindings_wasm
        run: |
          source ./../emsdk/emsdk_env.sh
          yarn build

      - name: Generate version
        working-directory: bindings_wasm
        run: yarn generate:version

      - name: Update version for dev releases
        working-directory: bindings_wasm
        run: |
          # Read the current version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          # Check if this is a dev version
          if [[ "$PACKAGE_VERSION" == *"dev"* ]]; then
            # Read the git commit hash from version.json
            if [ -f "dist/version.json" ]; then
              GIT_HASH=$(node -p "require('./dist/version.json').version")
              
              # Create a new version string with the git hash
              NEW_VERSION="${PACKAGE_VERSION}.${GIT_HASH}"
              
              # Update package.json with the new version
              npm version "$NEW_VERSION" --no-git-tag-version
              
              echo "Updated version to $NEW_VERSION for publishing"
            else
              echo "Warning: dist/version.json not found, using original version"
            fi
          else
            echo "Not a dev version, keeping original version: $PACKAGE_VERSION"
          fi

      - name: Determine NPM tag
        id: npm-tag
        working-directory: bindings_wasm
        run: |
          # Read the current version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          # Set the tag based on whether it's a dev version
          if [[ "$PACKAGE_VERSION" == *"dev"* ]]; then
            echo "tag=prerelease" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag for Dev Releases
        if: contains(steps.npm-tag.outputs.tag, 'prerelease')
        run: |
          # Read the current version from package.json
          PACKAGE_VERSION=$(node -p "require('./bindings_wasm/package.json').version")
          
          # Create and push the tag
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "wasm-bindings-${PACKAGE_VERSION}" -m "WASM bindings version ${PACKAGE_VERSION}"
          git push origin "wasm-bindings-${PACKAGE_VERSION}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: bindings_wasm
          tag: ${{ steps.npm-tag.outputs.tag }}
          dry-run: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
