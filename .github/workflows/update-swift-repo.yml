name: Update Swift Repository
on:
  push:
    tags:
      - "swift-bindings-*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to use (e.g. swift-bindings-0.1.0.abc1234)"
        required: true

jobs:
  update-swift-repo:
    runs-on: warp-macos-13-arm64-6x
    steps:
      - name: Checkout libxmtp
        uses: actions/checkout@v5
        with:
          path: libxmtp
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}

      - name: Checkout libxmtp-swift
        uses: actions/checkout@v5
        with:
          repository: xmtp/libxmtp-swift
          path: libxmtp-swift
          token: ${{ secrets.LIBXMTP_SWIFT_PAT }}

      - name: Get version and SHA
        id: version_info
        run: |
          cd libxmtp
          # Get the original version from cargo metadata
          ORIG_VERSION=$(cargo metadata --manifest-path bindings_ffi/Cargo.toml --format-version 1 | jq -r '.packages[] | select(.name == "xmtpv3") | .version')

          # Extract the major version and add 3 to it
          MAJOR_VERSION=$(echo $ORIG_VERSION | cut -d. -f1)
          NEW_MAJOR=$((MAJOR_VERSION + 3))

          # Replace the major version in the original version string
          VERSION=$(echo $ORIG_VERSION | sed "s/^$MAJOR_VERSION/$NEW_MAJOR/")

          # Get the tag - either from the push event or from workflow_dispatch input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            # Find the swift-bindings-* tag on the current commit
            COMMIT_SHA=$(git rev-parse HEAD)
            SWIFT_TAG=$(git tag --points-at $COMMIT_SHA | grep "^swift-bindings-" | head -n 1)
            
            # If no swift-bindings-* tag found, fall back to github.ref_name
            if [[ -z "$SWIFT_TAG" ]]; then
              TAG="${{ github.ref_name }}"
            else
              TAG="$SWIFT_TAG"
            fi
          fi

          # Extract version and SHA from tag
          VERSION_INPUT=$(echo $TAG | sed 's/swift-bindings-//' | cut -d. -f1-3)
          SHA7=$(echo $TAG | cut -d. -f4)
          RELEASE_TAG="${TAG}"

          # If version contains "dev", append the git commit SHA
          if [[ "$VERSION" == *"dev"* ]]; then
            VERSION="${VERSION}.${SHA7}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "sha7=${SHA7}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT

      - name: Create branch in libxmtp-swift
        run: |
          cd libxmtp-swift
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git checkout -b update-to-${{ steps.version_info.outputs.release_tag }}

      - name: Run Swift local script
        run: |
          cd libxmtp/bindings_ffi && ./run_swift_local.sh

      - name: Update LibXMTP.podspec
        run: |
          cd libxmtp-swift
          RELEASE_URL="https://github.com/xmtp/libxmtp/releases/download/${{ steps.version_info.outputs.release_tag }}/LibXMTPSwiftFFI.zip"
          VERSION="${{ steps.version_info.outputs.version }}"

          # Update version in podspec
          sed -i '' "s/s.version *= *'[^']*'/s.version          = '${VERSION}'/" LibXMTP.podspec

          # Update source URL in podspec
          sed -i '' "s|s.source *=.*{.*}|s.source           = { :http => \"${RELEASE_URL}\", :type => :zip }|" LibXMTP.podspec

          # Verify podspec
          pod spec lint LibXMTP.podspec || echo "Podspec validation failed but continuing"

      - name: Get checksums from releases
        id: get_checksums
        env:
          GH_TOKEN: ${{ secrets.LIBXMTP_SWIFT_PAT }}
        run: |
          # Static library release tag
          STATIC_RELEASE_TAG="${{ steps.version_info.outputs.release_tag }}"

          # Dynamic library release tag (has -dynamic suffix)
          DYNAMIC_RELEASE_TAG="${STATIC_RELEASE_TAG%-dynamic}"
          if [[ "$DYNAMIC_RELEASE_TAG" == "$STATIC_RELEASE_TAG" ]]; then
            # Original tag didn't have -dynamic, so we need to add it
            DYNAMIC_RELEASE_TAG="${STATIC_RELEASE_TAG}-dynamic"
          fi

          # Fetch static library checksum from static release
          STATIC_BODY=$(gh api repos/xmtp/libxmtp/releases/tags/$STATIC_RELEASE_TAG --jq '.body')
          CHECKSUM=$(echo "$STATIC_BODY" | grep -o 'Checksum of LibXMTPSwiftFFI.zip: [a-f0-9]*' | cut -d' ' -f4)

          # Fetch dynamic library checksum from dynamic release
          DYNAMIC_BODY=$(gh api repos/xmtp/libxmtp/releases/tags/$DYNAMIC_RELEASE_TAG --jq '.body')
          DYNAMIC_CHECKSUM=$(echo "$DYNAMIC_BODY" | grep -o 'Checksum of LibXMTPSwiftFFIDynamic.zip: [a-f0-9]*' | cut -d' ' -f4)

          # Verify we got valid checksums
          if [[ ! $CHECKSUM =~ ^[a-f0-9]+$ ]]; then
            echo "Failed to extract valid checksum for static library from release $STATIC_RELEASE_TAG"
            exit 1
          fi

          if [[ ! $DYNAMIC_CHECKSUM =~ ^[a-f0-9]+$ ]]; then
            echo "Failed to extract valid checksum for dynamic library from release $DYNAMIC_RELEASE_TAG"
            exit 1
          fi

          echo "checksum=${CHECKSUM}" >> $GITHUB_OUTPUT
          echo "dynamic_checksum=${DYNAMIC_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "dynamic_release_tag=${DYNAMIC_RELEASE_TAG}" >> $GITHUB_OUTPUT

      - name: Update Package.swift
        run: |
          cd libxmtp-swift
          STATIC_RELEASE_URL="https://github.com/xmtp/libxmtp/releases/download/${{ steps.version_info.outputs.release_tag }}/LibXMTPSwiftFFI.zip"
          DYNAMIC_RELEASE_URL="https://github.com/xmtp/libxmtp/releases/download/${{ steps.get_checksums.outputs.dynamic_release_tag }}/LibXMTPSwiftFFIDynamic.zip"
          CHECKSUM="${{ steps.get_checksums.outputs.checksum }}"
          DYNAMIC_CHECKSUM="${{ steps.get_checksums.outputs.dynamic_checksum }}"

          # Create a temporary file for processing
          TMP_FILE=$(mktemp)

          # Read Package.swift and update both binary targets
          awk -v static_url="$STATIC_RELEASE_URL" -v static_checksum="$CHECKSUM" \
              -v dynamic_url="$DYNAMIC_RELEASE_URL" -v dynamic_checksum="$DYNAMIC_CHECKSUM" '
          BEGIN { in_static_target = 0; in_dynamic_target = 0 }

          # Detect when we enter LibXMTPSwiftFFI binary target
          /name: "LibXMTPSwiftFFI"/ {
            in_static_target = 1
            in_dynamic_target = 0
          }

          # Detect when we enter LibXMTPSwiftFFIDynamic binary target
          /name: "LibXMTPSwiftFFIDynamic"/ {
            in_dynamic_target = 1
            in_static_target = 0
          }

          # Update URL based on which target we are in
          /url:/ {
            if (in_static_target) {
              sub(/url: "https:\/\/github\.com\/xmtp\/libxmtp\/releases\/download\/[^"]*"/, "url: \"" static_url "\"")
            } else if (in_dynamic_target) {
              sub(/url: "https:\/\/github\.com\/xmtp\/libxmtp\/releases\/download\/[^"]*"/, "url: \"" dynamic_url "\"")
            }
          }

          # Update checksum based on which target we are in
          /checksum:/ {
            if (in_static_target) {
              sub(/checksum: "[a-f0-9]*"/, "checksum: \"" static_checksum "\"")
              in_static_target = 0
            } else if (in_dynamic_target) {
              sub(/checksum: "[a-f0-9]*"/, "checksum: \"" dynamic_checksum "\"")
              in_dynamic_target = 0
            }
          }

          { print }
          ' Package.swift > "$TMP_FILE"

          # Replace original file
          mv "$TMP_FILE" Package.swift

          # Verify both URLs were updated
          if ! grep -q "$STATIC_RELEASE_URL" Package.swift; then
            echo "Error: Static library URL not found in Package.swift"
            cat Package.swift
            exit 1
          fi

          if ! grep -q "$DYNAMIC_RELEASE_URL" Package.swift; then
            echo "Error: Dynamic library URL not found in Package.swift"
            cat Package.swift
            exit 1
          fi

          echo "Successfully updated Package.swift with both library URLs and checksums"
          echo "Static: $STATIC_RELEASE_URL (checksum: $CHECKSUM)"
          echo "Dynamic: $DYNAMIC_RELEASE_URL (checksum: $DYNAMIC_CHECKSUM)"

      - name: Commit and push changes
        run: |
          cd libxmtp-swift
          git add -A
          git commit -m "Update to libxmtp ${{ steps.version_info.outputs.version }}"
          git push origin update-to-${{ steps.version_info.outputs.release_tag }}

      - name: Create PR
        env:
          GH_TOKEN: ${{ secrets.LIBXMTP_SWIFT_PAT }}
        run: |
          gh pr create --repo xmtp/libxmtp-swift \
            --base main \
            --head update-to-${{ steps.version_info.outputs.release_tag }} \
            --title "Update to libxmtp ${{ steps.version_info.outputs.version }}" \
            --body "This PR updates the Swift bindings to libxmtp version ${{ steps.version_info.outputs.version }}.

          Changes:
          - Updated Sources directory with latest Swift bindings
          - Updated LibXMTP.podspec version to ${{ steps.version_info.outputs.version }}
          - Updated static library binary target (LibXMTPSwiftFFI) URL and checksum from release ${{ steps.version_info.outputs.release_tag }}
          - Updated dynamic library binary target (LibXMTPSwiftFFIDynamic) URL and checksum from release ${{ steps.get_checksums.outputs.dynamic_release_tag }}"
