name: Release Node Bindings

on:
  workflow_dispatch:

jobs:
  check-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check versions are in sync
        run: |
          chmod +x dev/sync-versions.sh
          ./dev/sync-versions.sh
          
          # Check if there are any changes after syncing versions
          if [[ -n $(git status --porcelain) ]]; then
            echo "::error::Version mismatch detected! Please run 'dev/sync-versions.sh' locally, commit the changes before releasing bindings_node"
            echo "Changes detected:"
            git status --porcelain
            exit 1
          fi

  build-linux:
    needs: check-versions
    runs-on: warp-ubuntu-2204-x64-16x
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
        include:
          - target: x86_64-unknown-linux-gnu
            output_target: linux-x64-gnu
          - target: x86_64-unknown-linux-musl
            output_target: linux-x64-musl
          - target: aarch64-unknown-linux-gnu
            output_target: linux-arm64-gnu
          - target: aarch64-unknown-linux-musl
            output_target: linux-arm64-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update rust toolchains, add target
        run: |
          rustup update
          rustup target add ${{ matrix.target }}

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            bindings_node

      - name: Configure aarch64 toolchain
        if: startsWith(matrix.target, 'aarch64')
        run: |
          sudo apt-get update
          sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Configure x86_64-unknown-linux-musl toolchain
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache-dependency-path: "bindings_node/yarn.lock"
          cache: "yarn"
        env:
          SKIP_YARN_COREPACK_CHECK: "1"

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: bindings_node
        run: |
          yarn

      - name: Build target
        if: ${{ ! startsWith(matrix.target, 'aarch64') }}
        working-directory: bindings_node
        run: |
          yarn build:release --target ${{ matrix.target }}

      - name: Build target (aaarch64)
        if: startsWith(matrix.target, 'aarch64')
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
          CC: aarch64-linux-gnu-gcc
        working-directory: bindings_node
        run: |
          yarn build:release --target ${{ matrix.target }}

      - name: Upload JS
        # only upload the JS files once, target doesn't matter
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        uses: actions/upload-artifact@v4
        with:
          name: bindings_node_js
          path: |
            bindings_node/index.js
            bindings_node/index.d.ts
          retention-days: 1

      - name: Upload binding
        uses: actions/upload-artifact@v4
        with:
          name: bindings_node_${{ matrix.output_target }}
          path: bindings_node/bindings_node.${{ matrix.output_target }}.node
          retention-days: 1

  build-macos:
    needs: check-versions
    runs-on: warp-macos-latest-arm64-6x
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        include:
          - target: x86_64-apple-darwin
            output_target: darwin-x64
          - target: aarch64-apple-darwin
            output_target: darwin-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update rust toolchains, add target
        run: |
          rustup update
          rustup target add ${{ matrix.target }}

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            bindings_node

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache-dependency-path: "bindings_node/yarn.lock"
          cache: "yarn"
        env:
          SKIP_YARN_COREPACK_CHECK: "1"

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: bindings_node
        run: |
          yarn

      - name: Build target
        working-directory: bindings_node
        run: |
          yarn build:release --target ${{ matrix.target }}

      - name: Upload binding
        uses: actions/upload-artifact@v4
        with:
          name: bindings_node_${{ matrix.output_target }}
          path: bindings_node/bindings_node.${{ matrix.output_target }}.node
          retention-days: 1

  build-windows:
    needs: check-versions
    runs-on: warp-windows-latest-x64-16x
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          # TODO: fix the build on this target
          # - aarch64-pc-windows-msvc
        include:
          - target: x86_64-pc-windows-msvc
            output_target: win32-x64-msvc
          # - target: aarch64-pc-windows-msvc
          #   output_target: win32-arm64-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update rust toolchains
        run: |
          rustup update
          rustup target add ${{ matrix.target }}

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            bindings_node

      - name: Disable usePackageExitCodes feature
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: feature disable --name="'usePackageExitCodes'"

      - name: Upgrade Visual Studio 2022 enterprise
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: upgrade visualstudio2022enterprise

      - name: Install Visual Studio 2022 build tools
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install visualstudio2022buildtools

      - name: Setup aarch64 toolchain
        if: ${{ matrix.target == 'aarch64-pc-windows-msvc' }}
        run: |
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin" >> $GITHUB_PATH
        shell: bash

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache-dependency-path: "bindings_node/yarn.lock"
          cache: "yarn"
        env:
          SKIP_YARN_COREPACK_CHECK: "1"

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: bindings_node
        run: |
          yarn

      - name: Build target
        working-directory: bindings_node
        run: |
          yarn build:release --target ${{ matrix.target }}

      - name: Upload binding
        uses: actions/upload-artifact@v4
        with:
          name: bindings_node_${{ matrix.output_target }}
          path: bindings_node/bindings_node.${{ matrix.output_target }}.node
          retention-days: 1

  publish:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bindings_node_*
          merge-multiple: true
          path: bindings_node/dist

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache-dependency-path: "bindings_node/yarn.lock"
          cache: "yarn"
        env:
          SKIP_YARN_COREPACK_CHECK: "1"

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: bindings_node
        run: yarn

      - name: Generate version
        working-directory: bindings_node
        run: yarn generate:version

      - name: Update version for dev releases
        working-directory: bindings_node
        run: |
          # Read the current version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          # Check if this is a dev version
          if [[ "$PACKAGE_VERSION" == *"dev"* ]]; then
            # Read the git commit hash from version.json
            if [ -f "dist/version.json" ]; then
              GIT_HASH=$(node -p "require('./dist/version.json').version")
              
              # Create a new version string with the git hash
              NEW_VERSION="${PACKAGE_VERSION}.${GIT_HASH}"
              
              # Update package.json with the new version
              npm version "$NEW_VERSION" --no-git-tag-version
              
              echo "Updated version to $NEW_VERSION for publishing"
            else
              echo "Warning: dist/version.json not found, using original version"
            fi
          else
            echo "Not a dev version, keeping original version: $PACKAGE_VERSION"
          fi

      - name: Determine NPM tag
        id: npm-tag
        working-directory: bindings_node
        run: |
          # Read the current version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          # Set the tag based on whether it's a dev version
          if [[ "$PACKAGE_VERSION" == *"dev"* ]]; then
            echo "tag=prerelease" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag for Dev Releases
        if: contains(steps.npm-tag.outputs.tag, 'prerelease')
        run: |
          # Read the current version from package.json
          PACKAGE_VERSION=$(node -p "require('./bindings_node/package.json').version")
          
          # Create and push the tag
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "node-bindings-${PACKAGE_VERSION}" -m "Node bindings version ${PACKAGE_VERSION}"
          git push origin "node-bindings-${PACKAGE_VERSION}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: bindings_node
          tag: ${{ steps.npm-tag.outputs.tag }}
          dry-run: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
