name: Update XMTP iOS Repository
on:
  push:
    tags:
      - "swift-bindings-*"
      - "swift-bindings-dynamic-*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to use (e.g. swift-bindings-0.1.0.abc1234 or swift-bindings-dynamic-0.1.0.abc1234)"
        required: true
      xmtp_ios_branch:
        description: "xmtp-ios branch to base PR off of (default: main)"
        required: false
        default: "main"

jobs:
  update-xmtp-ios:
    runs-on: warp-macos-13-arm64-6x
    steps:
      - name: Checkout libxmtp
        uses: actions/checkout@v5
        with:
          path: libxmtp
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}

      - name: Checkout xmtp-ios
        uses: actions/checkout@v5
        with:
          repository: xmtp/xmtp-ios
          path: xmtp-ios
          token: ${{ secrets.LIBXMTP_SWIFT_PAT }}
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.xmtp_ios_branch || 'main' }}

      - name: Get version and SHA
        id: version_info
        run: |
          cd libxmtp
          # Get the original version from cargo metadata
          ORIG_VERSION=$(cargo metadata --manifest-path bindings_ffi/Cargo.toml --format-version 1 | jq -r '.packages[] | select(.name == "xmtpv3") | .version')

          # Extract the major version and add 3 to it
          MAJOR_VERSION=$(echo $ORIG_VERSION | cut -d. -f1)
          NEW_MAJOR=$((MAJOR_VERSION + 3))

          # Replace the major version in the original version string
          VERSION=$(echo $ORIG_VERSION | sed "s/^$MAJOR_VERSION/$NEW_MAJOR/")

          # Get the tag - either from the push event or from workflow_dispatch input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            # Find swift-bindings tags on the current commit
            COMMIT_SHA=$(git rev-parse HEAD)
            STATIC_TAG=$(git tag --points-at $COMMIT_SHA | grep "^swift-bindings-" | grep -v "dynamic" | head -n 1)
            DYNAMIC_TAG=$(git tag --points-at $COMMIT_SHA | grep "^swift-bindings-dynamic-" | head -n 1)

            # Determine which tag triggered the workflow
            if [[ "${{ github.ref_name }}" == swift-bindings-dynamic-* ]]; then
              TAG="$DYNAMIC_TAG"
            else
              TAG="$STATIC_TAG"
            fi

            # Fall back to github.ref_name if needed
            if [[ -z "$TAG" ]]; then
              TAG="${{ github.ref_name }}"
            fi
          fi

          # Determine both static and dynamic tags
          if [[ "$TAG" == *"-dynamic-"* ]]; then
            # This is a dynamic tag, derive the static tag
            DYNAMIC_RELEASE_TAG="$TAG"
            STATIC_RELEASE_TAG=$(echo $TAG | sed 's/-dynamic//')
          else
            # This is a static tag, derive the dynamic tag
            STATIC_RELEASE_TAG="$TAG"
            DYNAMIC_RELEASE_TAG=$(echo $TAG | sed 's/swift-bindings-/swift-bindings-dynamic-/')
          fi

          # Extract version and SHA from tag
          SHA7=$(echo $TAG | rev | cut -d. -f1 | rev)

          # If version contains "dev", append the git commit SHA
          if [[ "$VERSION" == *"dev"* ]]; then
            VERSION="${VERSION}.${SHA7}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "sha7=${SHA7}" >> $GITHUB_OUTPUT
          echo "static_release_tag=${STATIC_RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "dynamic_release_tag=${DYNAMIC_RELEASE_TAG}" >> $GITHUB_OUTPUT

      - name: Create branch in xmtp-ios
        run: |
          cd xmtp-ios
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git checkout -b update-to-${{ steps.version_info.outputs.release_tag }}

      - name: Update XMTP.podspec
        run: |
          cd xmtp-ios
          VERSION="${{ steps.version_info.outputs.version }}"

          # Update version in podspec
          sed -i '' "s/spec.version *= *\"[^\"]*\"/spec.version      = \"${VERSION}\"/" XMTP.podspec

          # Verify podspec
          pod spec lint XMTP.podspec || echo "Podspec validation failed but continuing"

      - name: Get checksums from releases
        id: get_checksums
        env:
          GH_TOKEN: ${{ secrets.LIBXMTP_SWIFT_PAT }}
        run: |
          # Fetch the static checksum from the release description
          STATIC_TAG="${{ steps.version_info.outputs.static_release_tag }}"
          STATIC_CHECKSUM=$(gh api repos/xmtp/libxmtp/releases/tags/$STATIC_TAG --jq '.body' | grep -o 'Checksum of LibXMTPSwiftFFI.zip: [a-f0-9]*' | cut -d' ' -f4)

          # Verify we got a valid static checksum
          if [[ ! $STATIC_CHECKSUM =~ ^[a-f0-9]+$ ]]; then
            echo "Failed to extract valid static checksum from release description"
            exit 1
          fi

          # Fetch the dynamic checksum from the release description
          DYNAMIC_TAG="${{ steps.version_info.outputs.dynamic_release_tag }}"
          DYNAMIC_CHECKSUM=$(gh api repos/xmtp/libxmtp/releases/tags/$DYNAMIC_TAG --jq '.body' | grep -o 'Checksum of LibXMTPSwiftFFIDynamic.zip: [a-f0-9]*' | cut -d' ' -f4)

          # Verify we got a valid dynamic checksum
          if [[ ! $DYNAMIC_CHECKSUM =~ ^[a-f0-9]+$ ]]; then
            echo "Failed to extract valid dynamic checksum from release description"
            exit 1
          fi

          echo "static_checksum=${STATIC_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "dynamic_checksum=${DYNAMIC_CHECKSUM}" >> $GITHUB_OUTPUT

      - name: Update Package.swift
        run: |
          cd xmtp-ios
          STATIC_RELEASE_URL="https://github.com/xmtp/libxmtp/releases/download/${{ steps.version_info.outputs.static_release_tag }}/LibXMTPSwiftFFI.zip"
          STATIC_CHECKSUM="${{ steps.get_checksums.outputs.static_checksum }}"
          DYNAMIC_RELEASE_URL="https://github.com/xmtp/libxmtp/releases/download/${{ steps.version_info.outputs.dynamic_release_tag }}/LibXMTPSwiftFFIDynamic.zip"
          DYNAMIC_CHECKSUM="${{ steps.get_checksums.outputs.dynamic_checksum }}"

          # Update static binary target (LibXMTPSwiftFFI)
          # Find and replace the URL for LibXMTPSwiftFFI
          sed -i '' "/name: \"LibXMTPSwiftFFI\"/,/checksum:/ {
            s|url: *\"https://github.com/xmtp/libxmtp/releases/download/[^\"]*\"|url:\n            \"${STATIC_RELEASE_URL}\"|
            s|checksum: *\"[a-f0-9]*\"|checksum: \"${STATIC_CHECKSUM}\"|
          }" Package.swift

          # Update dynamic binary target (LibXMTPSwiftFFIDynamic)
          # Find and replace the URL for LibXMTPSwiftFFIDynamic
          sed -i '' "/name: \"LibXMTPSwiftFFIDynamic\"/,/checksum:/ {
            s|url: *\"https://github.com/xmtp/libxmtp/releases/download/[^\"]*\"|url:\n            \"${DYNAMIC_RELEASE_URL}\"|
            s|checksum: *\"[a-f0-9]*\"|checksum: \"${DYNAMIC_CHECKSUM}\"|
          }" Package.swift

      - name: Download and extract Swift sources
        run: |
          # Download the static LibXMTPSwiftFFI.zip file
          STATIC_RELEASE_URL="https://github.com/xmtp/libxmtp/releases/download/${{ steps.version_info.outputs.static_release_tag }}/LibXMTPSwiftFFI.zip"
          curl -L -o LibXMTPSwiftFFI.zip "$STATIC_RELEASE_URL"

          # Extract the static zip file
          unzip -q LibXMTPSwiftFFI.zip

          # Verify the expected structure exists
          if [[ ! -f "Sources/LibXMTP/xmtpv3.swift" ]]; then
            echo "Error: Expected static Swift source file not found in extracted archive"
            echo "Archive contents:"
            find . -name "*.swift" -type f
            exit 1
          fi

          # Copy the static Swift source file to xmtp-ios
          mkdir -p xmtp-ios/Sources/XMTPiOS/Libxmtp
          cp Sources/LibXMTP/xmtpv3.swift xmtp-ios/Sources/XMTPiOS/Libxmtp/

          # Clean up the static extracted files
          rm -rf LibXMTPSwiftFFI.zip Sources LibXMTPSwiftFFI.xcframework LICENSE

          # Download the dynamic LibXMTPSwiftFFIDynamic.zip file
          DYNAMIC_RELEASE_URL="https://github.com/xmtp/libxmtp/releases/download/${{ steps.version_info.outputs.dynamic_release_tag }}/LibXMTPSwiftFFIDynamic.zip"
          curl -L -o LibXMTPSwiftFFIDynamic.zip "$DYNAMIC_RELEASE_URL"

          # Extract the dynamic zip file
          unzip -q LibXMTPSwiftFFIDynamic.zip

          # Verify the expected structure exists for dynamic
          if [[ ! -f "Sources/LibXMTP/Dynamic/xmtpv3.swift" ]]; then
            echo "Error: Expected dynamic Swift source file not found in extracted archive"
            echo "Archive contents:"
            find . -name "*.swift" -type f
            exit 1
          fi

          # Copy the dynamic Swift source file to xmtp-ios
          mkdir -p xmtp-ios/Sources/XMTPiOSDynamic/Libxmtp
          cp Sources/LibXMTP/Dynamic/xmtpv3.swift xmtp-ios/Sources/XMTPiOSDynamic/Libxmtp/

          # Clean up the dynamic extracted files
          rm -rf LibXMTPSwiftFFIDynamic.zip Sources LibXMTPSwiftFFIDynamic.xcframework LICENSE

      - name: Commit and push changes
        run: |
          cd xmtp-ios
          git add -A
          git commit -m "Update to libxmtp ${{ steps.version_info.outputs.version }}"
          git push origin update-to-${{ steps.version_info.outputs.static_release_tag }}

      - name: Create PR
        env:
          GH_TOKEN: ${{ secrets.LIBXMTP_SWIFT_PAT }}
        run: |
          BASE_BRANCH="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.xmtp_ios_branch || 'main' }}"
          gh pr create --repo xmtp/xmtp-ios \
            --base "${BASE_BRANCH}" \
            --head update-to-${{ steps.version_info.outputs.static_release_tag }} \
            --title "Update to libxmtp ${{ steps.version_info.outputs.version }}" \
            --body "This PR updates the iOS bindings to libxmtp version ${{ steps.version_info.outputs.version }}.

          Changes:
          - Updated XMTP.podspec version to ${{ steps.version_info.outputs.version }}
          - Updated static binary (LibXMTPSwiftFFI) URL and checksum in Package.swift
          - Updated dynamic binary (LibXMTPSwiftFFIDynamic) URL and checksum in Package.swift
          - Updated Swift source files (xmtpv3.swift) for both static and dynamic bindings

          Release Tags:
          - Static: ${{ steps.version_info.outputs.static_release_tag }}
          - Dynamic: ${{ steps.version_info.outputs.dynamic_release_tag }}

          Base branch: ${BASE_BRANCH}"
