name: Release Kotlin Bindings

on:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: warp-ubuntu-latest-x64-8x
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-linux-android
          - i686-linux-android
          - armv7-linux-androideabi
          - aarch64-linux-android
        include:
          - target: x86_64-linux-android
            output_target: x86_64
          - target: i686-linux-android
            output_target: x86
          - target: armv7-linux-androideabi
            output_target: armeabi-v7a
          - target: aarch64-linux-android
            output_target: arm64-v8a
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./target/${{ matrix.target }}
          key: ${{ matrix.target }}-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      # Install latest cross to mitigate unwind linking issue on android builds.
      # See https://github.com/cross-rs/cross/issues/1222
      - name: Install rust cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build target
        uses: actions-rs/cargo@v1
        env: 
          CROSS_NO_WARNINGS: "0"
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }} --manifest-path bindings_ffi/Cargo.toml --target-dir bindings_ffi/target
     
      - name: Prepare JNI libs
        run: |
          mkdir -p bindings_ffi/jniLibs/${{ matrix.output_target }}/ && \
          cp bindings_ffi/target/${{ matrix.target }}/release/libxmtpv3.so bindings_ffi/jniLibs/${{ matrix.output_target }}/libuniffi_xmtpv3.so
     
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output_target }}
          path: bindings_ffi/jniLibs/${{ matrix.output_target }}/libuniffi_xmtpv3.so
          retention-days: 1

  package-kotlin:
      needs: [build-linux]
      runs-on: warp-ubuntu-latest-x64-8x
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Download artifacts
          uses: actions/download-artifact@v3
          with:
            path: bindings_ffi/jniLibs

        - name: Build archive
          working-directory: bindings_ffi
          run: |
            zip -r LibXMTPKotlinFFI.zip jniLibs

        - name: Get short SHA
          id: slug
          run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"

        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: kotlin-bindings-${{ steps.slug.outputs.sha7 }}
            release_name: Kotlin-Bindings-${{ steps.slug.outputs.sha7 }}
            draft: false
            prerelease: true

        - name: Upload Release Asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./bindings_ffi/LibXMTPKotlinFFI.zip
            asset_name: LibXMTPKotlinFFI.zip
            asset_content_type: application/zip
