// Message content encoding structures
syntax = "proto3";

package xmtp.keystore_api.v1;

import "message_contents/ciphertext.proto";
import "message_contents/invitation.proto";
import "message_contents/public_key.proto";

option go_package = "github.com/xmtp/proto/v3/go/keystore_api/v1";
option java_package = "org.xmtp.proto.keystore.api.v1";

// Application-specific error codes for the Keystore API.
enum ErrorCode {
    ERROR_CODE_UNSPECIFIED = 0;
    ERROR_CODE_INVALID_INPUT = 1;
    ERROR_CODE_NO_MATCHING_PREKEY = 2;
}

// Wrapper class for errors from the Keystore API
message KeystoreError {
    string message = 1;
    ErrorCode code = 2;
}

// A light pointer for a conversation that contains no decryption keys
message ConversationReference {
    string topic = 1;
    string peer_address = 2;
    uint64 created_ns = 3;
    xmtp.message_contents.InvitationV1.Context context = 4;
}

// Decrypt a batch of messages using X3DH key agreement
message DecryptV1Request {
    // A single decryption request
    message Request {
        xmtp.message_contents.Ciphertext payload = 1;
        xmtp.message_contents.PublicKeyBundle peer_keys = 2;
        bytes header_bytes = 3;
        bool is_sender = 4;
    }

    repeated Request requests = 1;
}

// Response type for both V1 and V2 decryption requests
message DecryptResponse {
    // A single decryption response
    message Response {
        // Wrapper object for success response
        message Success {
            bytes decrypted = 1;
        }

        oneof response {
            Success result = 1;
            KeystoreError error = 2;
        }
    }

    repeated Response responses = 1;
}

// Decrypt a batch of messages using the appropriate topic keys
message DecryptV2Request {
    // A single decryption request
    message Request {
        xmtp.message_contents.Ciphertext payload = 1;
        bytes header_bytes = 2;
        string content_topic = 3;
    }

    repeated Request requests = 1;
}

// Encrypt a batch of messages using X3DH key agreement
message EncryptV1Request {
    // A single encryption request
    message Request {
        xmtp.message_contents.PublicKeyBundle recipient = 1;
        bytes payload = 2;
        bytes header_bytes = 3;
    }

    repeated Request requests = 1;
}

// Response type for both V1 and V2 encryption requests
message EncryptResponse {
    // A single encryption response
    message Response {
        // Wrapper object for success response
        message Success {
            xmtp.message_contents.Ciphertext encrypted = 1;
        }

        oneof response {
            Success result = 1;
            KeystoreError error = 2;
        }
    }

    repeated Response responses = 1;
}

// Encrypt a batch of messages using the appropriate topic keys
message EncryptV2Request {
    // A single encryption request
    message Request {
        bytes payload = 1;
        bytes header_bytes = 2;
        string content_topic = 3;
    }

    repeated Request requests = 1;
}

// Request to create an invite payload, and store the topic keys in the Keystore
message CreateInviteRequest {
    xmtp.message_contents.InvitationV1.Context context = 1;
    xmtp.message_contents.SignedPublicKeyBundle recipient = 2;
    uint64 created_ns = 3;
}

// Response to a CreateInviteRequest
message CreateInviteResponse {
    ConversationReference conversation = 1;
    bytes payload = 2;
}

// Request to save a batch of invite messages to the Keystore
message SaveInvitesRequest {
    // Mirrors xmtp.envelope schema
    message Request {
        string content_topic = 1;
        uint64 timestamp_ns = 2;
        bytes payload = 3;
    }

    repeated Request requests = 1;
}

// Response to a SaveInvitesRequest
message SaveInvitesResponse {
    // A single response
    message Response {
        // Wrapper object for success response
        message Success {
            ConversationReference conversation = 1;
        }

        oneof response {
            Success result = 1;
            KeystoreError error = 2;
        }
    }

    repeated Response responses = 1;
}

// CreateAuthTokenRequest is used to create an auth token for the XMTP API
message CreateAuthTokenRequest {
    optional uint64 timestamp_ns = 1;
}

// SignDigestRequest is used to sign a digest with either the identity key
// or a prekey
message SignDigestRequest {
    bytes digest = 1;
    oneof signer {
        bool identity_key = 2;
        uint32 prekey_index = 3;
    }
}

// A mapping of topics to their decrypted invitations
message TopicMap {
    // TopicData wraps the invitation and the timestamp it was created
    message TopicData {
        uint64 created_ns = 1;
        string peer_address = 2;
        xmtp.message_contents.InvitationV1 invitation = 3;
    }
    map<string, TopicData> topics = 1;
}