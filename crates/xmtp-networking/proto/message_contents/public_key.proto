// Structure for representing public keys of different types,
// including signatures used to authenticate the keys.
syntax = "proto3";

package xmtp.message_contents;

import "message_contents/signature.proto";

option go_package = "github.com/xmtp/proto/v3/go/message_contents";
option java_package = "org.xmtp.proto.message.contents";

// UnsignedPublicKey represents a generalized public key,
// defined as a union to support cryptographic algorithm agility.
message UnsignedPublicKey {
    uint64 created_ns = 1;
    oneof union {
        Secp256k1Uncompressed secp256k1_uncompressed = 3;
    }

    // Supported key types

    // EC: SECP256k1
    message Secp256k1Uncompressed {
        // uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes
        bytes bytes = 1; 
    }
}

// SignedPublicKey 
message SignedPublicKey {
    bytes key_bytes = 1;  // embeds an UnsignedPublicKey
    Signature signature = 2; // signs key_bytes
}

// PublicKeyBundle packages the cryptographic keys associated with a wallet.
message SignedPublicKeyBundle {
    // Identity key MUST be signed by the wallet.
    SignedPublicKey identity_key = 1;
    // Pre-key MUST be signed by the identity key.
    SignedPublicKey pre_key = 2;
}

// LEGACY

// PublicKey represents a generalized public key,
// defined as a union to support cryptographic algorithm agility.
message PublicKey {
    // The key bytes
    message Secp256k1Uncompressed {
        // uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes
        bytes bytes = 1; 
    }
    uint64 timestamp = 1;
    optional Signature signature = 2;
    oneof union {
        Secp256k1Uncompressed secp256k1_uncompressed = 3;
    }
}

// PublicKeyBundle packages the cryptographic keys associated with a wallet,
// both senders and recipients are identified by their key bundles.
message PublicKeyBundle {
    // Identity key MUST be signed by the wallet.
    PublicKey identity_key = 1;
    // Pre-key MUST be signed by the identity key.
    PublicKey pre_key = 2;
}
