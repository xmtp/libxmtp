// Private Key Storage
//
// Following definitions are not used in the protocol, instead
// they provide a way for encoding private keys for storage.
syntax = "proto3";

package xmtp.message_contents;

import "message_contents/ciphertext.proto";
import "message_contents/public_key.proto";

option go_package = "github.com/xmtp/proto/v3/go/message_contents";
option java_package = "org.xmtp.proto.message.contents";

// PrivateKey generalized to support different key types
message SignedPrivateKey {
    // time the key was created
    uint64 created_ns = 1;
    // private key
    oneof union {
        Secp256k1 secp256k1 = 2;
    }
    // public key for this private key
    SignedPublicKey public_key = 3;

    // Supported key types

    // EC: SECP256k1
    message Secp256k1 {
        bytes bytes = 1; // D big-endian, 32 bytes
    }
}

// PrivateKeyBundle wraps the identityKey and the preKeys,
// enforces usage of signed keys.
message PrivateKeyBundleV2 {
    SignedPrivateKey identity_key = 1;
    // all the known pre-keys, newer keys first,
    repeated SignedPrivateKey pre_keys = 2;
}

// LEGACY: PrivateKey generalized to support different key types
message PrivateKey {
    // time the key was created
    uint64 timestamp = 1;
    // private key
    oneof union {
        Secp256k1 secp256k1 = 2;
    }
    // public key for this private key
    PublicKey public_key = 3;

    // Supported key types

    // EC: SECP256k1
    message Secp256k1 {
        bytes bytes = 1; // D big-endian, 32 bytes
    }
}

// LEGACY: PrivateKeyBundleV1 wraps the identityKey and the preKeys
message PrivateKeyBundleV1 {
    PrivateKey identity_key = 1;
    // all the known pre-keys, newer keys first,
    repeated PrivateKey pre_keys = 2;
}



// Versioned PrivateKeyBundle
message PrivateKeyBundle {
    oneof version {
        PrivateKeyBundleV1 v1 = 1;
        PrivateKeyBundleV2 v2 = 2;
    }
}

// PrivateKeyBundle encrypted with key material generated by
// signing a randomly generated "pre-key" with the user's wallet,
// i.e. EIP-191 signature of a "storage signature" message with
// the pre-key embedded in it.
// (see xmtp-js::PrivateKeyBundle.toEncryptedBytes for details)
message EncryptedPrivateKeyBundleV1 {
    // randomly generated pre-key 
    bytes wallet_pre_key = 1; // 32 bytes
    // MUST contain encrypted PrivateKeyBundle
    Ciphertext ciphertext = 2;
}

// Versioned encrypted PrivateKeyBundle
message EncryptedPrivateKeyBundle {
    oneof version {
        EncryptedPrivateKeyBundleV1 v1 = 1;
    }
}
