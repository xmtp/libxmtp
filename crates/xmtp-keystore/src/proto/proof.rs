// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/proof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  An association proof proves a child key (and/or other data) has been
///  associated with a parent key.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.AssociationProof)
pub struct AssociationProof {
    // message oneof groups
    pub union: ::std::option::Option<association_proof::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.AssociationProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AssociationProof {
    fn default() -> &'a AssociationProof {
        <AssociationProof as ::protobuf::Message>::default_instance()
    }
}

impl AssociationProof {
    pub fn new() -> AssociationProof {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.AssociationProof.StaticCreateIdentityProof static_create_identity_proof = 1;

    pub fn static_create_identity_proof(&self) -> &association_proof::StaticCreateIdentityProof {
        match self.union {
            ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(ref v)) => v,
            _ => <association_proof::StaticCreateIdentityProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_static_create_identity_proof(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_static_create_identity_proof(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_static_create_identity_proof(&mut self, v: association_proof::StaticCreateIdentityProof) {
        self.union = ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(v))
    }

    // Mutable pointer to the field.
    pub fn mut_static_create_identity_proof(&mut self) -> &mut association_proof::StaticCreateIdentityProof {
        if let ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(association_proof::StaticCreateIdentityProof::new()));
        }
        match self.union {
            ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_static_create_identity_proof(&mut self) -> association_proof::StaticCreateIdentityProof {
        if self.has_static_create_identity_proof() {
            match self.union.take() {
                ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(v)) => v,
                _ => panic!(),
            }
        } else {
            association_proof::StaticCreateIdentityProof::new()
        }
    }

    // .xmtp.message_contents.AssociationProof.SIWEProof siwe_proof = 2;

    pub fn siwe_proof(&self) -> &association_proof::SIWEProof {
        match self.union {
            ::std::option::Option::Some(association_proof::Union::SiweProof(ref v)) => v,
            _ => <association_proof::SIWEProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_siwe_proof(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_siwe_proof(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(association_proof::Union::SiweProof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_siwe_proof(&mut self, v: association_proof::SIWEProof) {
        self.union = ::std::option::Option::Some(association_proof::Union::SiweProof(v))
    }

    // Mutable pointer to the field.
    pub fn mut_siwe_proof(&mut self) -> &mut association_proof::SIWEProof {
        if let ::std::option::Option::Some(association_proof::Union::SiweProof(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(association_proof::Union::SiweProof(association_proof::SIWEProof::new()));
        }
        match self.union {
            ::std::option::Option::Some(association_proof::Union::SiweProof(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_siwe_proof(&mut self) -> association_proof::SIWEProof {
        if self.has_siwe_proof() {
            match self.union.take() {
                ::std::option::Option::Some(association_proof::Union::SiweProof(v)) => v,
                _ => panic!(),
            }
        } else {
            association_proof::SIWEProof::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, association_proof::StaticCreateIdentityProof>(
            "static_create_identity_proof",
            AssociationProof::has_static_create_identity_proof,
            AssociationProof::static_create_identity_proof,
            AssociationProof::mut_static_create_identity_proof,
            AssociationProof::set_static_create_identity_proof,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, association_proof::SIWEProof>(
            "siwe_proof",
            AssociationProof::has_siwe_proof,
            AssociationProof::siwe_proof,
            AssociationProof::mut_siwe_proof,
            AssociationProof::set_siwe_proof,
        ));
        oneofs.push(association_proof::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AssociationProof>(
            "AssociationProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AssociationProof {
    const NAME: &'static str = "AssociationProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.union = ::std::option::Option::Some(association_proof::Union::StaticCreateIdentityProof(is.read_message()?));
                },
                18 => {
                    self.union = ::std::option::Option::Some(association_proof::Union::SiweProof(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &association_proof::Union::StaticCreateIdentityProof(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &association_proof::Union::SiweProof(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &association_proof::Union::StaticCreateIdentityProof(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &association_proof::Union::SiweProof(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AssociationProof {
        AssociationProof::new()
    }

    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AssociationProof {
        static instance: AssociationProof = AssociationProof {
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AssociationProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AssociationProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AssociationProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AssociationProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AssociationProof`
pub mod association_proof {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.AssociationProof.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.AssociationProof.static_create_identity_proof)
        StaticCreateIdentityProof(StaticCreateIdentityProof),
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.AssociationProof.siwe_proof)
        SiweProof(SIWEProof),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AssociationProof as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
    ///  Legacy: "XMTP : Create Identity ..." format
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.AssociationProof.StaticCreateIdentityProof)
    pub struct StaticCreateIdentityProof {
        // message fields
        ///  Text is the identitySignaturePayload e.g. Create Identity ...
        // @@protoc_insertion_point(field:xmtp.message_contents.AssociationProof.StaticCreateIdentityProof.text)
        pub text: ::std::vec::Vec<u8>,
        ///  Signature is the same as SignedPublicKey.Signature historically
        // @@protoc_insertion_point(field:xmtp.message_contents.AssociationProof.StaticCreateIdentityProof.signature)
        pub signature: ::protobuf::MessageField<super::super::signature::Signature>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.AssociationProof.StaticCreateIdentityProof.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StaticCreateIdentityProof {
        fn default() -> &'a StaticCreateIdentityProof {
            <StaticCreateIdentityProof as ::protobuf::Message>::default_instance()
        }
    }

    impl StaticCreateIdentityProof {
        pub fn new() -> StaticCreateIdentityProof {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "text",
                |m: &StaticCreateIdentityProof| { &m.text },
                |m: &mut StaticCreateIdentityProof| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::signature::Signature>(
                "signature",
                |m: &StaticCreateIdentityProof| { &m.signature },
                |m: &mut StaticCreateIdentityProof| { &mut m.signature },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StaticCreateIdentityProof>(
                "AssociationProof.StaticCreateIdentityProof",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StaticCreateIdentityProof {
        const NAME: &'static str = "StaticCreateIdentityProof";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.text = is.read_bytes()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.text.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.text);
            }
            if let Some(v) = self.signature.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.text.is_empty() {
                os.write_bytes(1, &self.text)?;
            }
            if let Some(v) = self.signature.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StaticCreateIdentityProof {
            StaticCreateIdentityProof::new()
        }

        fn clear(&mut self) {
            self.text.clear();
            self.signature.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StaticCreateIdentityProof {
            static instance: StaticCreateIdentityProof = StaticCreateIdentityProof {
                text: ::std::vec::Vec::new(),
                signature: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StaticCreateIdentityProof {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AssociationProof.StaticCreateIdentityProof").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StaticCreateIdentityProof {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StaticCreateIdentityProof {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  Sign-in with Ethereum format (EIP-4361)
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.AssociationProof.SIWEProof)
    pub struct SIWEProof {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.AssociationProof.SIWEProof.text)
        pub text: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.message_contents.AssociationProof.SIWEProof.signature)
        pub signature: ::protobuf::MessageField<super::super::signature::Signature>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.AssociationProof.SIWEProof.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SIWEProof {
        fn default() -> &'a SIWEProof {
            <SIWEProof as ::protobuf::Message>::default_instance()
        }
    }

    impl SIWEProof {
        pub fn new() -> SIWEProof {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "text",
                |m: &SIWEProof| { &m.text },
                |m: &mut SIWEProof| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::signature::Signature>(
                "signature",
                |m: &SIWEProof| { &m.signature },
                |m: &mut SIWEProof| { &mut m.signature },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SIWEProof>(
                "AssociationProof.SIWEProof",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SIWEProof {
        const NAME: &'static str = "SIWEProof";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.text = is.read_bytes()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.text.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.text);
            }
            if let Some(v) = self.signature.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.text.is_empty() {
                os.write_bytes(1, &self.text)?;
            }
            if let Some(v) = self.signature.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SIWEProof {
            SIWEProof::new()
        }

        fn clear(&mut self) {
            self.text.clear();
            self.signature.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SIWEProof {
            static instance: SIWEProof = SIWEProof {
                text: ::std::vec::Vec::new(),
                signature: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SIWEProof {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AssociationProof.SIWEProof").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SIWEProof {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SIWEProof {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  A revocation proof proves that a child key (and/or other data) has been
///  revoked by a parent key
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.RevocationProof)
pub struct RevocationProof {
    // message oneof groups
    pub union: ::std::option::Option<revocation_proof::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.RevocationProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RevocationProof {
    fn default() -> &'a RevocationProof {
        <RevocationProof as ::protobuf::Message>::default_instance()
    }
}

impl RevocationProof {
    pub fn new() -> RevocationProof {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.RevocationProof.SignedRevocationRequestV1 signed_revocation_request_v1 = 1;

    pub fn signed_revocation_request_v1(&self) -> &revocation_proof::SignedRevocationRequestV1 {
        match self.union {
            ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(ref v)) => v,
            _ => <revocation_proof::SignedRevocationRequestV1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_revocation_request_v1(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_signed_revocation_request_v1(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_revocation_request_v1(&mut self, v: revocation_proof::SignedRevocationRequestV1) {
        self.union = ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_revocation_request_v1(&mut self) -> &mut revocation_proof::SignedRevocationRequestV1 {
        if let ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(revocation_proof::SignedRevocationRequestV1::new()));
        }
        match self.union {
            ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_revocation_request_v1(&mut self) -> revocation_proof::SignedRevocationRequestV1 {
        if self.has_signed_revocation_request_v1() {
            match self.union.take() {
                ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(v)) => v,
                _ => panic!(),
            }
        } else {
            revocation_proof::SignedRevocationRequestV1::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, revocation_proof::SignedRevocationRequestV1>(
            "signed_revocation_request_v1",
            RevocationProof::has_signed_revocation_request_v1,
            RevocationProof::signed_revocation_request_v1,
            RevocationProof::mut_signed_revocation_request_v1,
            RevocationProof::set_signed_revocation_request_v1,
        ));
        oneofs.push(revocation_proof::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RevocationProof>(
            "RevocationProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RevocationProof {
    const NAME: &'static str = "RevocationProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.union = ::std::option::Option::Some(revocation_proof::Union::SignedRevocationRequestV1(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &revocation_proof::Union::SignedRevocationRequestV1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &revocation_proof::Union::SignedRevocationRequestV1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RevocationProof {
        RevocationProof::new()
    }

    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RevocationProof {
        static instance: RevocationProof = RevocationProof {
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RevocationProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RevocationProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RevocationProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevocationProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RevocationProof`
pub mod revocation_proof {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.RevocationProof.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.RevocationProof.signed_revocation_request_v1)
        SignedRevocationRequestV1(SignedRevocationRequestV1),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RevocationProof as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
    ///  A custom payload format defined in a future RFC
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.RevocationProof.SignedRevocationRequestV1)
    pub struct SignedRevocationRequestV1 {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.RevocationProof.SignedRevocationRequestV1.text)
        pub text: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.message_contents.RevocationProof.SignedRevocationRequestV1.signature)
        pub signature: ::protobuf::MessageField<super::super::signature::Signature>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.RevocationProof.SignedRevocationRequestV1.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SignedRevocationRequestV1 {
        fn default() -> &'a SignedRevocationRequestV1 {
            <SignedRevocationRequestV1 as ::protobuf::Message>::default_instance()
        }
    }

    impl SignedRevocationRequestV1 {
        pub fn new() -> SignedRevocationRequestV1 {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "text",
                |m: &SignedRevocationRequestV1| { &m.text },
                |m: &mut SignedRevocationRequestV1| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::signature::Signature>(
                "signature",
                |m: &SignedRevocationRequestV1| { &m.signature },
                |m: &mut SignedRevocationRequestV1| { &mut m.signature },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedRevocationRequestV1>(
                "RevocationProof.SignedRevocationRequestV1",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SignedRevocationRequestV1 {
        const NAME: &'static str = "SignedRevocationRequestV1";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.text = is.read_bytes()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.text.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.text);
            }
            if let Some(v) = self.signature.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.text.is_empty() {
                os.write_bytes(1, &self.text)?;
            }
            if let Some(v) = self.signature.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SignedRevocationRequestV1 {
            SignedRevocationRequestV1::new()
        }

        fn clear(&mut self) {
            self.text.clear();
            self.signature.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SignedRevocationRequestV1 {
            static instance: SignedRevocationRequestV1 = SignedRevocationRequestV1 {
                text: ::std::vec::Vec::new(),
                signature: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SignedRevocationRequestV1 {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("RevocationProof.SignedRevocationRequestV1").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SignedRevocationRequestV1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SignedRevocationRequestV1 {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cmessage_contents/proof.proto\x12\x15xmtp.message_contents\x1a\x20m\
    essage_contents/signature.proto\"\xc8\x03\n\x10AssociationProof\x12\x84\
    \x01\n\x1cstatic_create_identity_proof\x18\x01\x20\x01(\x0b2A.xmtp.messa\
    ge_contents.AssociationProof.StaticCreateIdentityProofH\0R\x19staticCrea\
    teIdentityProof\x12R\n\nsiwe_proof\x18\x02\x20\x01(\x0b21.xmtp.message_c\
    ontents.AssociationProof.SIWEProofH\0R\tsiweProof\x1ao\n\x19StaticCreate\
    IdentityProof\x12\x12\n\x04text\x18\x01\x20\x01(\x0cR\x04text\x12>\n\tsi\
    gnature\x18\x02\x20\x01(\x0b2\x20.xmtp.message_contents.SignatureR\tsign\
    ature\x1a_\n\tSIWEProof\x12\x12\n\x04text\x18\x01\x20\x01(\x0cR\x04text\
    \x12>\n\tsignature\x18\x02\x20\x01(\x0b2\x20.xmtp.message_contents.Signa\
    tureR\tsignatureB\x07\n\x05union\"\x91\x02\n\x0fRevocationProof\x12\x83\
    \x01\n\x1csigned_revocation_request_v1\x18\x01\x20\x01(\x0b2@.xmtp.messa\
    ge_contents.RevocationProof.SignedRevocationRequestV1H\0R\x19signedRevoc\
    ationRequestV1\x1ao\n\x19SignedRevocationRequestV1\x12\x12\n\x04text\x18\
    \x01\x20\x01(\x0cR\x04text\x12>\n\tsignature\x18\x02\x20\x01(\x0b2\x20.x\
    mtp.message_contents.SignatureR\tsignatureB\x07\n\x05unionBO\n\x1forg.xm\
    tp.proto.message.contentsZ,github.com/xmtp/proto/v3/go/message_contentsJ\
    \xcc\n\n\x06\x12\x04\x01\0-\x01\nL\n\x01\x0c\x12\x03\x01\0\x12\x1aB\x20P\
    roof\x20contains\x20signature-based\x20bindings\x20for\x20different\x20u\
    se\x20cases.\n\n\x08\n\x01\x02\x12\x03\x03\0\x1e\n\t\n\x02\x03\0\x12\x03\
    \x05\0*\n\x08\n\x01\x08\x12\x03\x07\0C\n\t\n\x02\x08\x0b\x12\x03\x07\0C\
    \n\x08\n\x01\x08\x12\x03\x08\08\n\t\n\x02\x08\x01\x12\x03\x08\08\nq\n\
    \x02\x04\0\x12\x04\x0c\0\x1f\x01\x1ae\x20An\x20association\x20proof\x20p\
    roves\x20a\x20child\x20key\x20(and/or\x20other\x20data)\x20has\x20been\n\
    \x20associated\x20with\x20a\x20parent\x20key.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0c\x08\x18\n;\n\x04\x04\0\x03\0\x12\x04\x0e\x04\x13\x05\x1a-\x20Le\
    gacy:\x20\"XMTP\x20:\x20Create\x20Identity\x20...\"\x20format\n\n\x0c\n\
    \x05\x04\0\x03\0\x01\x12\x03\x0e\x0c%\nN\n\x06\x04\0\x03\0\x02\0\x12\x03\
    \x10\x08\x17\x1a?\x20Text\x20is\x20the\x20identitySignaturePayload\x20e.\
    g.\x20Create\x20Identity\x20...\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\
    \x03\x10\x08\r\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x10\x0e\x12\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x10\x15\x16\nP\n\x06\x04\0\x03\
    \0\x02\x01\x12\x03\x12\x08\x20\x1aA\x20Signature\x20is\x20the\x20same\
    \x20as\x20SignedPublicKey.Signature\x20historically\n\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x06\x12\x03\x12\x08\x11\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x01\x12\x03\x12\x12\x1b\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\x12\
    \x1e\x1f\n7\n\x04\x04\0\x03\x01\x12\x04\x16\x04\x19\x05\x1a)\x20Sign-in\
    \x20with\x20Ethereum\x20format\x20(EIP-4361)\n\n\x0c\n\x05\x04\0\x03\x01\
    \x01\x12\x03\x16\x0c\x15\n\r\n\x06\x04\0\x03\x01\x02\0\x12\x03\x17\x08\
    \x17\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03\x17\x08\r\n\x0e\n\x07\
    \x04\0\x03\x01\x02\0\x01\x12\x03\x17\x0e\x12\n\x0e\n\x07\x04\0\x03\x01\
    \x02\0\x03\x12\x03\x17\x15\x16\n\r\n\x06\x04\0\x03\x01\x02\x01\x12\x03\
    \x18\x08\x20\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x06\x12\x03\x18\x08\x11\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03\x18\x12\x1b\n\x0e\n\x07\x04\
    \0\x03\x01\x02\x01\x03\x12\x03\x18\x1e\x1f\n\x0c\n\x04\x04\0\x08\0\x12\
    \x04\x1b\x04\x1e\x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x1b\n\x0f\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x1c\x08C\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x1c\x08!\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1c\">\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x1cAB\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x1d\x08!\n\
    \x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x1d\x08\x11\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x1d\x12\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1d\
    \x1f\x20\nn\n\x02\x04\x01\x12\x04#\0-\x01\x1ab\x20A\x20revocation\x20pro\
    of\x20proves\x20that\x20a\x20child\x20key\x20(and/or\x20other\x20data)\
    \x20has\x20been\n\x20revoked\x20by\x20a\x20parent\x20key\n\n\n\n\x03\x04\
    \x01\x01\x12\x03#\x08\x17\n?\n\x04\x04\x01\x03\0\x12\x04%\x04(\x05\x1a1\
    \x20A\x20custom\x20payload\x20format\x20defined\x20in\x20a\x20future\x20\
    RFC\n\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03%\x0c%\n\r\n\x06\x04\x01\x03\
    \0\x02\0\x12\x03&\x08\x17\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03&\
    \x08\r\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\x12\x03&\x0e\x12\n\x0e\n\x07\
    \x04\x01\x03\0\x02\0\x03\x12\x03&\x15\x16\n\r\n\x06\x04\x01\x03\0\x02\
    \x01\x12\x03'\x08\x20\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x06\x12\x03'\x08\
    \x11\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\x03'\x12\x1b\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x01\x03\x12\x03'\x1e\x1f\n\x0c\n\x04\x04\x01\x08\0\
    \x12\x04*\x04,\x05\n\x0c\n\x05\x04\x01\x08\0\x01\x12\x03*\n\x0f\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03+\x08C\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03+\
    \x08!\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03+\">\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03+ABb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::signature::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(AssociationProof::generated_message_descriptor_data());
            messages.push(RevocationProof::generated_message_descriptor_data());
            messages.push(association_proof::StaticCreateIdentityProof::generated_message_descriptor_data());
            messages.push(association_proof::SIWEProof::generated_message_descriptor_data());
            messages.push(revocation_proof::SignedRevocationRequestV1::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
