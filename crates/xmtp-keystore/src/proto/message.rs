// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Message header is encoded separately as the bytes are also used
///  as associated data for authenticated encryption
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.MessageHeaderV1)
pub struct MessageHeaderV1 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageHeaderV1.sender)
    pub sender: ::protobuf::MessageField<super::public_key::PublicKeyBundle>,
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageHeaderV1.recipient)
    pub recipient: ::protobuf::MessageField<super::public_key::PublicKeyBundle>,
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageHeaderV1.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.MessageHeaderV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageHeaderV1 {
    fn default() -> &'a MessageHeaderV1 {
        <MessageHeaderV1 as ::protobuf::Message>::default_instance()
    }
}

impl MessageHeaderV1 {
    pub fn new() -> MessageHeaderV1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::PublicKeyBundle>(
            "sender",
            |m: &MessageHeaderV1| { &m.sender },
            |m: &mut MessageHeaderV1| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::PublicKeyBundle>(
            "recipient",
            |m: &MessageHeaderV1| { &m.recipient },
            |m: &mut MessageHeaderV1| { &mut m.recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &MessageHeaderV1| { &m.timestamp },
            |m: &mut MessageHeaderV1| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageHeaderV1>(
            "MessageHeaderV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageHeaderV1 {
    const NAME: &'static str = "MessageHeaderV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sender)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.recipient)?;
                },
                24 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.recipient.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sender.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.recipient.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageHeaderV1 {
        MessageHeaderV1::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.recipient.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageHeaderV1 {
        static instance: MessageHeaderV1 = MessageHeaderV1 {
            sender: ::protobuf::MessageField::none(),
            recipient: ::protobuf::MessageField::none(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageHeaderV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageHeaderV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageHeaderV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageHeaderV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Message is the top level protocol element
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.MessageV1)
pub struct MessageV1 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageV1.header_bytes)
    pub header_bytes: ::std::vec::Vec<u8>,
    ///  Ciphertext.payload MUST contain encrypted EncodedContent
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageV1.ciphertext)
    pub ciphertext: ::protobuf::MessageField<super::ciphertext::Ciphertext>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.MessageV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageV1 {
    fn default() -> &'a MessageV1 {
        <MessageV1 as ::protobuf::Message>::default_instance()
    }
}

impl MessageV1 {
    pub fn new() -> MessageV1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "header_bytes",
            |m: &MessageV1| { &m.header_bytes },
            |m: &mut MessageV1| { &mut m.header_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ciphertext::Ciphertext>(
            "ciphertext",
            |m: &MessageV1| { &m.ciphertext },
            |m: &mut MessageV1| { &mut m.ciphertext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageV1>(
            "MessageV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageV1 {
    const NAME: &'static str = "MessageV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.header_bytes = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ciphertext)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.header_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.header_bytes);
        }
        if let Some(v) = self.ciphertext.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.header_bytes.is_empty() {
            os.write_bytes(1, &self.header_bytes)?;
        }
        if let Some(v) = self.ciphertext.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageV1 {
        MessageV1::new()
    }

    fn clear(&mut self) {
        self.header_bytes.clear();
        self.ciphertext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageV1 {
        static instance: MessageV1 = MessageV1 {
            header_bytes: ::std::vec::Vec::new(),
            ciphertext: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Message header carries information that is not encrypted, and is therefore
///  observable by the network. It is however authenticated as associated data
///  of the AEAD encryption used to protect the message,
///  thus providing tamper evidence.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.MessageHeaderV2)
pub struct MessageHeaderV2 {
    // message fields
    ///  sender specified message creation time
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageHeaderV2.created_ns)
    pub created_ns: u64,
    ///  the topic the message belongs to
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageHeaderV2.topic)
    pub topic: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.MessageHeaderV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageHeaderV2 {
    fn default() -> &'a MessageHeaderV2 {
        <MessageHeaderV2 as ::protobuf::Message>::default_instance()
    }
}

impl MessageHeaderV2 {
    pub fn new() -> MessageHeaderV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_ns",
            |m: &MessageHeaderV2| { &m.created_ns },
            |m: &mut MessageHeaderV2| { &mut m.created_ns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &MessageHeaderV2| { &m.topic },
            |m: &mut MessageHeaderV2| { &mut m.topic },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageHeaderV2>(
            "MessageHeaderV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageHeaderV2 {
    const NAME: &'static str = "MessageHeaderV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.created_ns = is.read_uint64()?;
                },
                18 => {
                    self.topic = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.created_ns != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.created_ns);
        }
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.topic);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.created_ns != 0 {
            os.write_uint64(1, self.created_ns)?;
        }
        if !self.topic.is_empty() {
            os.write_string(2, &self.topic)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageHeaderV2 {
        MessageHeaderV2::new()
    }

    fn clear(&mut self) {
        self.created_ns = 0;
        self.topic.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageHeaderV2 {
        static instance: MessageHeaderV2 = MessageHeaderV2 {
            created_ns: 0,
            topic: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageHeaderV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageHeaderV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageHeaderV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageHeaderV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Message combines the encoded header with the encrypted payload.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.MessageV2)
pub struct MessageV2 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageV2.header_bytes)
    pub header_bytes: ::std::vec::Vec<u8>,
    ///  Ciphertext.payload MUST contain encrypted SignedContent
    // @@protoc_insertion_point(field:xmtp.message_contents.MessageV2.ciphertext)
    pub ciphertext: ::protobuf::MessageField<super::ciphertext::Ciphertext>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.MessageV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageV2 {
    fn default() -> &'a MessageV2 {
        <MessageV2 as ::protobuf::Message>::default_instance()
    }
}

impl MessageV2 {
    pub fn new() -> MessageV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "header_bytes",
            |m: &MessageV2| { &m.header_bytes },
            |m: &mut MessageV2| { &mut m.header_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ciphertext::Ciphertext>(
            "ciphertext",
            |m: &MessageV2| { &m.ciphertext },
            |m: &mut MessageV2| { &mut m.ciphertext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageV2>(
            "MessageV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageV2 {
    const NAME: &'static str = "MessageV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.header_bytes = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ciphertext)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.header_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.header_bytes);
        }
        if let Some(v) = self.ciphertext.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.header_bytes.is_empty() {
            os.write_bytes(1, &self.header_bytes)?;
        }
        if let Some(v) = self.ciphertext.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageV2 {
        MessageV2::new()
    }

    fn clear(&mut self) {
        self.header_bytes.clear();
        self.ciphertext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageV2 {
        static instance: MessageV2 = MessageV2 {
            header_bytes: ::std::vec::Vec::new(),
            ciphertext: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Versioned Message
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.Message)
pub struct Message {
    // message oneof groups
    pub version: ::std::option::Option<message::Version>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.MessageV1 v1 = 1;

    pub fn v1(&self) -> &MessageV1 {
        match self.version {
            ::std::option::Option::Some(message::Version::V1(ref v)) => v,
            _ => <MessageV1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v1(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v1(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(message::Version::V1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v1(&mut self, v: MessageV1) {
        self.version = ::std::option::Option::Some(message::Version::V1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v1(&mut self) -> &mut MessageV1 {
        if let ::std::option::Option::Some(message::Version::V1(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(message::Version::V1(MessageV1::new()));
        }
        match self.version {
            ::std::option::Option::Some(message::Version::V1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v1(&mut self) -> MessageV1 {
        if self.has_v1() {
            match self.version.take() {
                ::std::option::Option::Some(message::Version::V1(v)) => v,
                _ => panic!(),
            }
        } else {
            MessageV1::new()
        }
    }

    // .xmtp.message_contents.MessageV2 v2 = 2;

    pub fn v2(&self) -> &MessageV2 {
        match self.version {
            ::std::option::Option::Some(message::Version::V2(ref v)) => v,
            _ => <MessageV2 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v2(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v2(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(message::Version::V2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v2(&mut self, v: MessageV2) {
        self.version = ::std::option::Option::Some(message::Version::V2(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v2(&mut self) -> &mut MessageV2 {
        if let ::std::option::Option::Some(message::Version::V2(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(message::Version::V2(MessageV2::new()));
        }
        match self.version {
            ::std::option::Option::Some(message::Version::V2(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v2(&mut self) -> MessageV2 {
        if self.has_v2() {
            match self.version.take() {
                ::std::option::Option::Some(message::Version::V2(v)) => v,
                _ => panic!(),
            }
        } else {
            MessageV2::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MessageV1>(
            "v1",
            Message::has_v1,
            Message::v1,
            Message::mut_v1,
            Message::set_v1,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MessageV2>(
            "v2",
            Message::has_v2,
            Message::v2,
            Message::mut_v2,
            Message::set_v2,
        ));
        oneofs.push(message::Version::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(message::Version::V1(is.read_message()?));
                },
                18 => {
                    self.version = ::std::option::Option::Some(message::Version::V2(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &message::Version::V1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Version::V2(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &message::Version::V1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &message::Version::V2(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message`
pub mod message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.Message.version)
    pub enum Version {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.Message.v1)
        V1(super::MessageV1),
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.Message.v2)
        V2(super::MessageV2),
    }

    impl ::protobuf::Oneof for Version {
    }

    impl ::protobuf::OneofFull for Version {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Message as ::protobuf::MessageFull>::descriptor().oneof_by_name("version").unwrap()).clone()
        }
    }

    impl Version {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Version>("version")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1emessage_contents/message.proto\x12\x15xmtp.message_contents\x1a!me\
    ssage_contents/ciphertext.proto\x1a!message_contents/public_key.proto\"\
    \xb5\x01\n\x0fMessageHeaderV1\x12>\n\x06sender\x18\x01\x20\x01(\x0b2&.xm\
    tp.message_contents.PublicKeyBundleR\x06sender\x12D\n\trecipient\x18\x02\
    \x20\x01(\x0b2&.xmtp.message_contents.PublicKeyBundleR\trecipient\x12\
    \x1c\n\ttimestamp\x18\x03\x20\x01(\x04R\ttimestamp\"q\n\tMessageV1\x12!\
    \n\x0cheader_bytes\x18\x01\x20\x01(\x0cR\x0bheaderBytes\x12A\n\ncipherte\
    xt\x18\x02\x20\x01(\x0b2!.xmtp.message_contents.CiphertextR\nciphertext\
    \"F\n\x0fMessageHeaderV2\x12\x1d\n\ncreated_ns\x18\x01\x20\x01(\x04R\tcr\
    eatedNs\x12\x14\n\x05topic\x18\x02\x20\x01(\tR\x05topic\"q\n\tMessageV2\
    \x12!\n\x0cheader_bytes\x18\x01\x20\x01(\x0cR\x0bheaderBytes\x12A\n\ncip\
    hertext\x18\x02\x20\x01(\x0b2!.xmtp.message_contents.CiphertextR\ncipher\
    text\"|\n\x07Message\x122\n\x02v1\x18\x01\x20\x01(\x0b2\x20.xmtp.message\
    _contents.MessageV1H\0R\x02v1\x122\n\x02v2\x18\x02\x20\x01(\x0b2\x20.xmt\
    p.message_contents.MessageV2H\0R\x02v2B\t\n\x07versionBO\n\x1forg.xmtp.p\
    roto.message.contentsZ,github.com/xmtp/proto/v3/go/message_contentsJ\xab\
    \r\n\x06\x12\x04\x01\07\x01\nJ\n\x01\x0c\x12\x03\x01\0\x12\x1a@\x20Messa\
    ges\x20used\x20for\x20transport\x20and\x20storage\x20of\x20user\x20conve\
    rsations.\n\n\x08\n\x01\x02\x12\x03\x03\0\x1e\n\t\n\x02\x03\0\x12\x03\
    \x05\0+\n\t\n\x02\x03\x01\x12\x03\x06\0+\n\x08\n\x01\x08\x12\x03\x08\0C\
    \n\t\n\x02\x08\x0b\x12\x03\x08\0C\n\x08\n\x01\x08\x12\x03\t\08\n\t\n\x02\
    \x08\x01\x12\x03\t\08\n\x8c\x01\n\x02\x04\0\x12\x04\x0f\0\x13\x01\x1ar\
    \x20Message\x20header\x20is\x20encoded\x20separately\x20as\x20the\x20byt\
    es\x20are\x20also\x20used\n\x20as\x20associated\x20data\x20for\x20authen\
    ticated\x20encryption\n2\x0c\x20Message\x20V1\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0f\x08\x17\n\x0b\n\x04\x04\0\x02\0\x12\x03\x10\x04\x1f\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03\x10\x04\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x10\x14\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x1d\x1e\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x11\x04\"\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\
    \x11\x04\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\x14\x1d\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x11\x20!\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x12\x04\x19\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x12\x04\n\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x12\x0b\x14\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x12\x17\x18\n7\n\x02\x04\x01\x12\x04\x16\0\x1a\x01\x1a+\x20Mess\
    age\x20is\x20the\x20top\x20level\x20protocol\x20element\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x16\x08\x11\n3\n\x04\x04\x01\x02\0\x12\x03\x17\x04\x1b\
    \"&\x20encapsulates\x20encoded\x20MessageHeaderV1\n\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03\x17\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x17\n\
    \x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17\x19\x1a\nG\n\x04\x04\x01\
    \x02\x01\x12\x03\x19\x04\x1e\x1a:\x20Ciphertext.payload\x20MUST\x20conta\
    in\x20encrypted\x20EncodedContent\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\
    \x03\x19\x04\x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\x0f\x19\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x19\x1c\x1d\n\x88\x02\n\x02\x04\
    \x02\x12\x04\"\0'\x01\x1a\xed\x01\x20Message\x20header\x20carries\x20inf\
    ormation\x20that\x20is\x20not\x20encrypted,\x20and\x20is\x20therefore\n\
    \x20observable\x20by\x20the\x20network.\x20It\x20is\x20however\x20authen\
    ticated\x20as\x20associated\x20data\n\x20of\x20the\x20AEAD\x20encryption\
    \x20used\x20to\x20protect\x20the\x20message,\n\x20thus\x20providing\x20t\
    amper\x20evidence.\n2\x0c\x20Message\x20V2\n\n\n\n\x03\x04\x02\x01\x12\
    \x03\"\x08\x17\n5\n\x04\x04\x02\x02\0\x12\x03$\x04\x1a\x1a(\x20sender\
    \x20specified\x20message\x20creation\x20time\n\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03$\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03$\x0b\x15\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03$\x18\x19\n/\n\x04\x04\x02\x02\x01\x12\
    \x03&\x04\x15\x1a\"\x20the\x20topic\x20the\x20message\x20belongs\x20to\n\
    \n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03&\x0b\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03&\x13\
    \x14\nM\n\x02\x04\x03\x12\x04*\0.\x01\x1aA\x20Message\x20combines\x20the\
    \x20encoded\x20header\x20with\x20the\x20encrypted\x20payload.\n\n\n\n\
    \x03\x04\x03\x01\x12\x03*\x08\x11\n3\n\x04\x04\x03\x02\0\x12\x03+\x04\
    \x1b\"&\x20encapsulates\x20encoded\x20MessageHeaderV2\n\n\x0c\n\x05\x04\
    \x03\x02\0\x05\x12\x03+\x04\t\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03+\n\
    \x16\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03+\x19\x1a\nF\n\x04\x04\x03\x02\
    \x01\x12\x03-\x04\x1e\x1a9\x20Ciphertext.payload\x20MUST\x20contain\x20e\
    ncrypted\x20SignedContent\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03-\x04\
    \x0e\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03-\x0f\x19\n\x0c\n\x05\x04\
    \x03\x02\x01\x03\x12\x03-\x1c\x1d\n\x1f\n\x02\x04\x04\x12\x042\07\x01\
    \x1a\x13\x20Versioned\x20Message\n\n\n\n\x03\x04\x04\x01\x12\x032\x08\
    \x0f\n\x0c\n\x04\x04\x04\x08\0\x12\x043\x046\x05\n\x0c\n\x05\x04\x04\x08\
    \0\x01\x12\x033\n\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x034\x08\x19\n\x0c\n\
    \x05\x04\x04\x02\0\x06\x12\x034\x08\x11\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x034\x12\x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x034\x17\x18\n\x0b\n\
    \x04\x04\x04\x02\x01\x12\x035\x08\x19\n\x0c\n\x05\x04\x04\x02\x01\x06\
    \x12\x035\x08\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x035\x12\x14\n\x0c\
    \n\x05\x04\x04\x02\x01\x03\x12\x035\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ciphertext::file_descriptor().clone());
            deps.push(super::public_key::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(MessageHeaderV1::generated_message_descriptor_data());
            messages.push(MessageV1::generated_message_descriptor_data());
            messages.push(MessageHeaderV2::generated_message_descriptor_data());
            messages.push(MessageV2::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
