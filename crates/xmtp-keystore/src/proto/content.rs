// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/content.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  ContentTypeId is used to identify the type of content stored in a Message.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.ContentTypeId)
pub struct ContentTypeId {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.ContentTypeId.authority_id)
    pub authority_id: ::std::string::String,
    // @@protoc_insertion_point(field:xmtp.message_contents.ContentTypeId.type_id)
    pub type_id: ::std::string::String,
    // @@protoc_insertion_point(field:xmtp.message_contents.ContentTypeId.version_major)
    pub version_major: u32,
    // @@protoc_insertion_point(field:xmtp.message_contents.ContentTypeId.version_minor)
    pub version_minor: u32,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.ContentTypeId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContentTypeId {
    fn default() -> &'a ContentTypeId {
        <ContentTypeId as ::protobuf::Message>::default_instance()
    }
}

impl ContentTypeId {
    pub fn new() -> ContentTypeId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "authority_id",
            |m: &ContentTypeId| { &m.authority_id },
            |m: &mut ContentTypeId| { &mut m.authority_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type_id",
            |m: &ContentTypeId| { &m.type_id },
            |m: &mut ContentTypeId| { &mut m.type_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version_major",
            |m: &ContentTypeId| { &m.version_major },
            |m: &mut ContentTypeId| { &mut m.version_major },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version_minor",
            |m: &ContentTypeId| { &m.version_minor },
            |m: &mut ContentTypeId| { &mut m.version_minor },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContentTypeId>(
            "ContentTypeId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContentTypeId {
    const NAME: &'static str = "ContentTypeId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.authority_id = is.read_string()?;
                },
                18 => {
                    self.type_id = is.read_string()?;
                },
                24 => {
                    self.version_major = is.read_uint32()?;
                },
                32 => {
                    self.version_minor = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.authority_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.authority_id);
        }
        if !self.type_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_id);
        }
        if self.version_major != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.version_major);
        }
        if self.version_minor != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.version_minor);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.authority_id.is_empty() {
            os.write_string(1, &self.authority_id)?;
        }
        if !self.type_id.is_empty() {
            os.write_string(2, &self.type_id)?;
        }
        if self.version_major != 0 {
            os.write_uint32(3, self.version_major)?;
        }
        if self.version_minor != 0 {
            os.write_uint32(4, self.version_minor)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContentTypeId {
        ContentTypeId::new()
    }

    fn clear(&mut self) {
        self.authority_id.clear();
        self.type_id.clear();
        self.version_major = 0;
        self.version_minor = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContentTypeId {
        static instance: ContentTypeId = ContentTypeId {
            authority_id: ::std::string::String::new(),
            type_id: ::std::string::String::new(),
            version_major: 0,
            version_minor: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContentTypeId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContentTypeId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContentTypeId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentTypeId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  EncodedContent bundles the content with metadata identifying its type
///  and parameters required for correct decoding and presentation of the content.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.EncodedContent)
pub struct EncodedContent {
    // message fields
    ///  content type identifier used to match the payload with
    ///  the correct decoding machinery
    // @@protoc_insertion_point(field:xmtp.message_contents.EncodedContent.type)
    pub type_: ::protobuf::MessageField<ContentTypeId>,
    ///  optional encoding parameters required to correctly decode the content
    // @@protoc_insertion_point(field:xmtp.message_contents.EncodedContent.parameters)
    pub parameters: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  optional fallback description of the content that can be used in case
    ///  the client cannot decode or render the content
    // @@protoc_insertion_point(field:xmtp.message_contents.EncodedContent.fallback)
    pub fallback: ::std::option::Option<::std::string::String>,
    ///  optional compression; the value indicates algorithm used to
    ///  compress the encoded content bytes
    // @@protoc_insertion_point(field:xmtp.message_contents.EncodedContent.compression)
    pub compression: ::std::option::Option<::protobuf::EnumOrUnknown<Compression>>,
    ///  encoded content itself
    // @@protoc_insertion_point(field:xmtp.message_contents.EncodedContent.content)
    pub content: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.EncodedContent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncodedContent {
    fn default() -> &'a EncodedContent {
        <EncodedContent as ::protobuf::Message>::default_instance()
    }
}

impl EncodedContent {
    pub fn new() -> EncodedContent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ContentTypeId>(
            "type",
            |m: &EncodedContent| { &m.type_ },
            |m: &mut EncodedContent| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "parameters",
            |m: &EncodedContent| { &m.parameters },
            |m: &mut EncodedContent| { &mut m.parameters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fallback",
            |m: &EncodedContent| { &m.fallback },
            |m: &mut EncodedContent| { &mut m.fallback },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "compression",
            |m: &EncodedContent| { &m.compression },
            |m: &mut EncodedContent| { &mut m.compression },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content",
            |m: &EncodedContent| { &m.content },
            |m: &mut EncodedContent| { &mut m.content },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncodedContent>(
            "EncodedContent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncodedContent {
    const NAME: &'static str = "EncodedContent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.type_)?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.parameters.insert(key, value);
                },
                26 => {
                    self.fallback = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.compression = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.content = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.parameters {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.fallback.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.compression {
            my_size += ::protobuf::rt::int32_size(5, v.value());
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for (k, v) in &self.parameters {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.fallback.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.compression {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if !self.content.is_empty() {
            os.write_bytes(4, &self.content)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncodedContent {
        EncodedContent::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.parameters.clear();
        self.fallback = ::std::option::Option::None;
        self.compression = ::std::option::Option::None;
        self.content.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncodedContent {
        static instance: ::protobuf::rt::Lazy<EncodedContent> = ::protobuf::rt::Lazy::new();
        instance.get(EncodedContent::new)
    }
}

impl ::protobuf::MessageFull for EncodedContent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncodedContent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncodedContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncodedContent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SignedContent attaches a signature to EncodedContent.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.SignedContent)
pub struct SignedContent {
    // message fields
    ///  MUST contain EncodedContent
    // @@protoc_insertion_point(field:xmtp.message_contents.SignedContent.payload)
    pub payload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:xmtp.message_contents.SignedContent.sender)
    pub sender: ::protobuf::MessageField<super::public_key::SignedPublicKeyBundle>,
    ///  MUST be a signature of a concatenation of
    ///  the message header bytes and the payload bytes,
    ///  signed by the sender's pre-key.
    // @@protoc_insertion_point(field:xmtp.message_contents.SignedContent.signature)
    pub signature: ::protobuf::MessageField<super::signature::Signature>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.SignedContent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedContent {
    fn default() -> &'a SignedContent {
        <SignedContent as ::protobuf::Message>::default_instance()
    }
}

impl SignedContent {
    pub fn new() -> SignedContent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &SignedContent| { &m.payload },
            |m: &mut SignedContent| { &mut m.payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::SignedPublicKeyBundle>(
            "sender",
            |m: &SignedContent| { &m.sender },
            |m: &mut SignedContent| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::signature::Signature>(
            "signature",
            |m: &SignedContent| { &m.signature },
            |m: &mut SignedContent| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedContent>(
            "SignedContent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedContent {
    const NAME: &'static str = "SignedContent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sender)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        if let Some(v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        if let Some(v) = self.sender.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.signature.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedContent {
        SignedContent::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.sender.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedContent {
        static instance: SignedContent = SignedContent {
            payload: ::std::vec::Vec::new(),
            sender: ::protobuf::MessageField::none(),
            signature: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedContent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedContent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedContent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Recognized compression algorithms
///  protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:xmtp.message_contents.Compression)
pub enum Compression {
    // @@protoc_insertion_point(enum_value:xmtp.message_contents.Compression.COMPRESSION_DEFLATE)
    COMPRESSION_DEFLATE = 0,
    // @@protoc_insertion_point(enum_value:xmtp.message_contents.Compression.COMPRESSION_GZIP)
    COMPRESSION_GZIP = 1,
}

impl ::protobuf::Enum for Compression {
    const NAME: &'static str = "Compression";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Compression> {
        match value {
            0 => ::std::option::Option::Some(Compression::COMPRESSION_DEFLATE),
            1 => ::std::option::Option::Some(Compression::COMPRESSION_GZIP),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Compression] = &[
        Compression::COMPRESSION_DEFLATE,
        Compression::COMPRESSION_GZIP,
    ];
}

impl ::protobuf::EnumFull for Compression {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Compression").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Compression {
    fn default() -> Self {
        Compression::COMPRESSION_DEFLATE
    }
}

impl Compression {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Compression>("Compression")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1emessage_contents/content.proto\x12\x15xmtp.message_contents\x1a!me\
    ssage_contents/public_key.proto\x1a\x20message_contents/signature.proto\
    \"\x95\x01\n\rContentTypeId\x12!\n\x0cauthority_id\x18\x01\x20\x01(\tR\
    \x0bauthorityId\x12\x17\n\x07type_id\x18\x02\x20\x01(\tR\x06typeId\x12#\
    \n\rversion_major\x18\x03\x20\x01(\rR\x0cversionMajor\x12#\n\rversion_mi\
    nor\x18\x04\x20\x01(\rR\x0cversionMinor\"\x83\x03\n\x0eEncodedContent\
    \x128\n\x04type\x18\x01\x20\x01(\x0b2$.xmtp.message_contents.ContentType\
    IdR\x04type\x12U\n\nparameters\x18\x02\x20\x03(\x0b25.xmtp.message_conte\
    nts.EncodedContent.ParametersEntryR\nparameters\x12\x1f\n\x08fallback\
    \x18\x03\x20\x01(\tH\0R\x08fallback\x88\x01\x01\x12I\n\x0bcompression\
    \x18\x05\x20\x01(\x0e2\".xmtp.message_contents.CompressionH\x01R\x0bcomp\
    ression\x88\x01\x01\x12\x18\n\x07content\x18\x04\x20\x01(\x0cR\x07conten\
    t\x1a=\n\x0fParametersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B\x0b\n\t_fall\
    backB\x0e\n\x0c_compression\"\xaf\x01\n\rSignedContent\x12\x18\n\x07payl\
    oad\x18\x01\x20\x01(\x0cR\x07payload\x12D\n\x06sender\x18\x02\x20\x01(\
    \x0b2,.xmtp.message_contents.SignedPublicKeyBundleR\x06sender\x12>\n\tsi\
    gnature\x18\x03\x20\x01(\x0b2\x20.xmtp.message_contents.SignatureR\tsign\
    ature*<\n\x0bCompression\x12\x17\n\x13COMPRESSION_DEFLATE\x10\0\x12\x14\
    \n\x10COMPRESSION_GZIP\x10\x01BO\n\x1forg.xmtp.proto.message.contentsZ,g\
    ithub.com/xmtp/proto/v3/go/message_contentsJ\x92\x10\n\x06\x12\x04\x01\0\
    6\x01\n/\n\x01\x0c\x12\x03\x01\0\x12\x1a%\x20Message\x20content\x20encod\
    ing\x20structures\n\n\x08\n\x01\x02\x12\x03\x03\0\x1e\n\t\n\x02\x03\0\
    \x12\x03\x05\0+\n\t\n\x02\x03\x01\x12\x03\x06\0*\n\x08\n\x01\x08\x12\x03\
    \x08\0C\n\t\n\x02\x08\x0b\x12\x03\x08\0C\n\x08\n\x01\x08\x12\x03\t\08\n\
    \t\n\x02\x08\x01\x12\x03\t\08\nX\n\x02\x04\0\x12\x04\x0c\0\x11\x01\x1aL\
    \x20ContentTypeId\x20is\x20used\x20to\x20identify\x20the\x20type\x20of\
    \x20content\x20stored\x20in\x20a\x20Message.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0c\x08\x15\n4\n\x04\x04\0\x02\0\x12\x03\r\x04\x1c\"'\x20authority\
    \x20governing\x20this\x20content\x20type\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\r\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x0b\x17\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\r\x1a\x1b\n\x1e\n\x04\x04\0\x02\x01\x12\x03\
    \x0e\x04\x17\"\x11\x20type\x20identifier\n\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x0e\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\x0b\x12\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\x15\x16\n(\n\x04\x04\0\x02\x02\
    \x12\x03\x0f\x04\x1d\"\x1b\x20major\x20version\x20of\x20the\x20type\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x0f\x0b\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0f\x1b\
    \x1c\n(\n\x04\x04\0\x02\x03\x12\x03\x10\x04\x1d\"\x1b\x20minor\x20versio\
    n\x20of\x20the\x20type\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x10\x04\n\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x10\x0b\x18\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x10\x1b\x1c\ng\n\x02\x05\0\x12\x04\x15\0\x18\x01\x1a[\
    \x20Recognized\x20compression\x20algorithms\n\x20protolint:disable\x20EN\
    UM_FIELD_NAMES_ZERO_VALUE_END_WITH\n\n\n\n\x03\x05\0\x01\x12\x03\x15\x05\
    \x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x16\x04\x1c\n\x0c\n\x05\x05\0\x02\0\
    \x01\x12\x03\x16\x04\x17\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x16\x1a\x1b\
    \n\x0b\n\x04\x05\0\x02\x01\x12\x03\x17\x04\x19\n\x0c\n\x05\x05\0\x02\x01\
    \x01\x12\x03\x17\x04\x14\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x17\x17\
    \x18\n\xa3\x01\n\x02\x04\x01\x12\x04\x1d\0+\x01\x1a\x96\x01\x20EncodedCo\
    ntent\x20bundles\x20the\x20content\x20with\x20metadata\x20identifying\
    \x20its\x20type\n\x20and\x20parameters\x20required\x20for\x20correct\x20\
    decoding\x20and\x20presentation\x20of\x20the\x20content.\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x1d\x08\x16\ne\n\x04\x04\x01\x02\0\x12\x03\x20\x04\x1b\
    \x1aX\x20content\x20type\x20identifier\x20used\x20to\x20match\x20the\x20\
    payload\x20with\n\x20the\x20correct\x20decoding\x20machinery\n\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x20\x04\x11\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x20\x12\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x20\x19\x1a\n\
    T\n\x04\x04\x01\x02\x01\x12\x03\"\x04'\x1aG\x20optional\x20encoding\x20p\
    arameters\x20required\x20to\x20correctly\x20decode\x20the\x20content\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\"\x04\x17\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\"\x18\"\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\"%&\n\
    \x84\x01\n\x04\x04\x01\x02\x02\x12\x03%\x04!\x1aw\x20optional\x20fallbac\
    k\x20description\x20of\x20the\x20content\x20that\x20can\x20be\x20used\
    \x20in\x20case\n\x20the\x20client\x20cannot\x20decode\x20or\x20render\
    \x20the\x20content\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03%\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03%\r\x13\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03%\x14\x1c\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03%\x1f\
    \x20\nn\n\x04\x04\x01\x02\x03\x12\x03(\x04)\x1aa\x20optional\x20compress\
    ion;\x20the\x20value\x20indicates\x20algorithm\x20used\x20to\n\x20compre\
    ss\x20the\x20encoded\x20content\x20bytes\n\n\x0c\n\x05\x04\x01\x02\x03\
    \x04\x12\x03(\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03(\r\x18\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03(\x19$\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03('(\n%\n\x04\x04\x01\x02\x04\x12\x03*\x04\x16\x1a\x18\x20enc\
    oded\x20content\x20itself\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03*\x04\
    \t\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03*\n\x11\n\x0c\n\x05\x04\x01\
    \x02\x04\x03\x12\x03*\x14\x15\nC\n\x02\x04\x02\x12\x04.\06\x01\x1a7\x20S\
    ignedContent\x20attaches\x20a\x20signature\x20to\x20EncodedContent.\n\n\
    \n\n\x03\x04\x02\x01\x12\x03.\x08\x15\n*\n\x04\x04\x02\x02\0\x12\x030\
    \x04\x16\x1a\x1d\x20MUST\x20contain\x20EncodedContent\n\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x030\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x030\n\
    \x11\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x030\x14\x15\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x031\x04%\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x031\x04\x19\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x031\x1a\x20\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x031#$\n\x8a\x01\n\x04\x04\x02\x02\x02\x12\x035\x04\x1c\
    \x1a}\x20MUST\x20be\x20a\x20signature\x20of\x20a\x20concatenation\x20of\
    \n\x20the\x20message\x20header\x20bytes\x20and\x20the\x20payload\x20byte\
    s,\n\x20signed\x20by\x20the\x20sender's\x20pre-key.\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x035\x04\r\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x035\
    \x0e\x17\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x035\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::public_key::file_descriptor().clone());
            deps.push(super::signature::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(ContentTypeId::generated_message_descriptor_data());
            messages.push(EncodedContent::generated_message_descriptor_data());
            messages.push(SignedContent::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Compression::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
