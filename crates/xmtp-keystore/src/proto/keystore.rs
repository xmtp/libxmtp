// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `keystore_api/v1/keystore.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Wrapper class for errors from the Keystore API
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.KeystoreError)
pub struct KeystoreError {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.KeystoreError.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.KeystoreError.code)
    pub code: ::protobuf::EnumOrUnknown<ErrorCode>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.KeystoreError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeystoreError {
    fn default() -> &'a KeystoreError {
        <KeystoreError as ::protobuf::Message>::default_instance()
    }
}

impl KeystoreError {
    pub fn new() -> KeystoreError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &KeystoreError| { &m.message },
            |m: &mut KeystoreError| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &KeystoreError| { &m.code },
            |m: &mut KeystoreError| { &mut m.code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeystoreError>(
            "KeystoreError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeystoreError {
    const NAME: &'static str = "KeystoreError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                16 => {
                    self.code = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if self.code != ::protobuf::EnumOrUnknown::new(ErrorCode::ERROR_CODE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.code.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if self.code != ::protobuf::EnumOrUnknown::new(ErrorCode::ERROR_CODE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.code))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeystoreError {
        KeystoreError::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.code = ::protobuf::EnumOrUnknown::new(ErrorCode::ERROR_CODE_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeystoreError {
        static instance: KeystoreError = KeystoreError {
            message: ::std::string::String::new(),
            code: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeystoreError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeystoreError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeystoreError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeystoreError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A light pointer for a conversation that contains no decryption keys
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.ConversationReference)
pub struct ConversationReference {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.ConversationReference.topic)
    pub topic: ::std::string::String,
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.ConversationReference.peer_address)
    pub peer_address: ::std::string::String,
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.ConversationReference.created_ns)
    pub created_ns: u64,
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.ConversationReference.context)
    pub context: ::protobuf::MessageField<super::invitation::invitation_v1::Context>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.ConversationReference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConversationReference {
    fn default() -> &'a ConversationReference {
        <ConversationReference as ::protobuf::Message>::default_instance()
    }
}

impl ConversationReference {
    pub fn new() -> ConversationReference {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &ConversationReference| { &m.topic },
            |m: &mut ConversationReference| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "peer_address",
            |m: &ConversationReference| { &m.peer_address },
            |m: &mut ConversationReference| { &mut m.peer_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_ns",
            |m: &ConversationReference| { &m.created_ns },
            |m: &mut ConversationReference| { &mut m.created_ns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::invitation::invitation_v1::Context>(
            "context",
            |m: &ConversationReference| { &m.context },
            |m: &mut ConversationReference| { &mut m.context },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConversationReference>(
            "ConversationReference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConversationReference {
    const NAME: &'static str = "ConversationReference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.topic = is.read_string()?;
                },
                18 => {
                    self.peer_address = is.read_string()?;
                },
                24 => {
                    self.created_ns = is.read_uint64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.context)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if !self.peer_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.peer_address);
        }
        if self.created_ns != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.created_ns);
        }
        if let Some(v) = self.context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if !self.peer_address.is_empty() {
            os.write_string(2, &self.peer_address)?;
        }
        if self.created_ns != 0 {
            os.write_uint64(3, self.created_ns)?;
        }
        if let Some(v) = self.context.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConversationReference {
        ConversationReference::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.peer_address.clear();
        self.created_ns = 0;
        self.context.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConversationReference {
        static instance: ConversationReference = ConversationReference {
            topic: ::std::string::String::new(),
            peer_address: ::std::string::String::new(),
            created_ns: 0,
            context: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConversationReference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConversationReference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConversationReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConversationReference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Decrypt a batch of messages using X3DH key agreement
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.DecryptV1Request)
pub struct DecryptV1Request {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV1Request.requests)
    pub requests: ::std::vec::Vec<decrypt_v1request::Request>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.DecryptV1Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DecryptV1Request {
    fn default() -> &'a DecryptV1Request {
        <DecryptV1Request as ::protobuf::Message>::default_instance()
    }
}

impl DecryptV1Request {
    pub fn new() -> DecryptV1Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requests",
            |m: &DecryptV1Request| { &m.requests },
            |m: &mut DecryptV1Request| { &mut m.requests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DecryptV1Request>(
            "DecryptV1Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DecryptV1Request {
    const NAME: &'static str = "DecryptV1Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.requests {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DecryptV1Request {
        DecryptV1Request::new()
    }

    fn clear(&mut self) {
        self.requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DecryptV1Request {
        static instance: DecryptV1Request = DecryptV1Request {
            requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DecryptV1Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DecryptV1Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DecryptV1Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptV1Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DecryptV1Request`
pub mod decrypt_v1request {
    ///  A single decryption request
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.DecryptV1Request.Request)
    pub struct Request {
        // message fields
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV1Request.Request.payload)
        pub payload: ::protobuf::MessageField<super::super::ciphertext::Ciphertext>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV1Request.Request.peer_keys)
        pub peer_keys: ::protobuf::MessageField<super::super::public_key::PublicKeyBundle>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV1Request.Request.header_bytes)
        pub header_bytes: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV1Request.Request.is_sender)
        pub is_sender: bool,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.DecryptV1Request.Request.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Request {
        fn default() -> &'a Request {
            <Request as ::protobuf::Message>::default_instance()
        }
    }

    impl Request {
        pub fn new() -> Request {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::ciphertext::Ciphertext>(
                "payload",
                |m: &Request| { &m.payload },
                |m: &mut Request| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::public_key::PublicKeyBundle>(
                "peer_keys",
                |m: &Request| { &m.peer_keys },
                |m: &mut Request| { &mut m.peer_keys },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "header_bytes",
                |m: &Request| { &m.header_bytes },
                |m: &mut Request| { &mut m.header_bytes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "is_sender",
                |m: &Request| { &m.is_sender },
                |m: &mut Request| { &mut m.is_sender },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
                "DecryptV1Request.Request",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Request {
        const NAME: &'static str = "Request";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.payload)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.peer_keys)?;
                    },
                    26 => {
                        self.header_bytes = is.read_bytes()?;
                    },
                    32 => {
                        self.is_sender = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.payload.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.peer_keys.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if !self.header_bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(3, &self.header_bytes);
            }
            if self.is_sender != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.payload.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.peer_keys.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if !self.header_bytes.is_empty() {
                os.write_bytes(3, &self.header_bytes)?;
            }
            if self.is_sender != false {
                os.write_bool(4, self.is_sender)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Request {
            Request::new()
        }

        fn clear(&mut self) {
            self.payload.clear();
            self.peer_keys.clear();
            self.header_bytes.clear();
            self.is_sender = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Request {
            static instance: Request = Request {
                payload: ::protobuf::MessageField::none(),
                peer_keys: ::protobuf::MessageField::none(),
                header_bytes: ::std::vec::Vec::new(),
                is_sender: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Request {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DecryptV1Request.Request").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Request {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Request {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Response type for both V1 and V2 decryption requests
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.DecryptResponse)
pub struct DecryptResponse {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptResponse.responses)
    pub responses: ::std::vec::Vec<decrypt_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.DecryptResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DecryptResponse {
    fn default() -> &'a DecryptResponse {
        <DecryptResponse as ::protobuf::Message>::default_instance()
    }
}

impl DecryptResponse {
    pub fn new() -> DecryptResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "responses",
            |m: &DecryptResponse| { &m.responses },
            |m: &mut DecryptResponse| { &mut m.responses },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DecryptResponse>(
            "DecryptResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DecryptResponse {
    const NAME: &'static str = "DecryptResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responses.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DecryptResponse {
        DecryptResponse::new()
    }

    fn clear(&mut self) {
        self.responses.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DecryptResponse {
        static instance: DecryptResponse = DecryptResponse {
            responses: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DecryptResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DecryptResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DecryptResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DecryptResponse`
pub mod decrypt_response {
    ///  A single decryption response
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.DecryptResponse.Response)
    pub struct Response {
        // message oneof groups
        pub response: ::std::option::Option<response::Response>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.DecryptResponse.Response.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Response {
        fn default() -> &'a Response {
            <Response as ::protobuf::Message>::default_instance()
        }
    }

    impl Response {
        pub fn new() -> Response {
            ::std::default::Default::default()
        }

        // .xmtp.keystore_api.v1.DecryptResponse.Response.Success result = 1;

        pub fn result(&self) -> &response::Success {
            match self.response {
                ::std::option::Option::Some(response::Response::Result(ref v)) => v,
                _ => <response::Success as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_result(&mut self) {
            self.response = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            match self.response {
                ::std::option::Option::Some(response::Response::Result(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: response::Success) {
            self.response = ::std::option::Option::Some(response::Response::Result(v))
        }

        // Mutable pointer to the field.
        pub fn mut_result(&mut self) -> &mut response::Success {
            if let ::std::option::Option::Some(response::Response::Result(_)) = self.response {
            } else {
                self.response = ::std::option::Option::Some(response::Response::Result(response::Success::new()));
            }
            match self.response {
                ::std::option::Option::Some(response::Response::Result(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_result(&mut self) -> response::Success {
            if self.has_result() {
                match self.response.take() {
                    ::std::option::Option::Some(response::Response::Result(v)) => v,
                    _ => panic!(),
                }
            } else {
                response::Success::new()
            }
        }

        // .xmtp.keystore_api.v1.KeystoreError error = 2;

        pub fn error(&self) -> &super::KeystoreError {
            match self.response {
                ::std::option::Option::Some(response::Response::Error(ref v)) => v,
                _ => <super::KeystoreError as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_error(&mut self) {
            self.response = ::std::option::Option::None;
        }

        pub fn has_error(&self) -> bool {
            match self.response {
                ::std::option::Option::Some(response::Response::Error(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_error(&mut self, v: super::KeystoreError) {
            self.response = ::std::option::Option::Some(response::Response::Error(v))
        }

        // Mutable pointer to the field.
        pub fn mut_error(&mut self) -> &mut super::KeystoreError {
            if let ::std::option::Option::Some(response::Response::Error(_)) = self.response {
            } else {
                self.response = ::std::option::Option::Some(response::Response::Error(super::KeystoreError::new()));
            }
            match self.response {
                ::std::option::Option::Some(response::Response::Error(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_error(&mut self) -> super::KeystoreError {
            if self.has_error() {
                match self.response.take() {
                    ::std::option::Option::Some(response::Response::Error(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::KeystoreError::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, response::Success>(
                "result",
                Response::has_result,
                Response::result,
                Response::mut_result,
                Response::set_result,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KeystoreError>(
                "error",
                Response::has_error,
                Response::error,
                Response::mut_error,
                Response::set_error,
            ));
            oneofs.push(response::Response::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
                "DecryptResponse.Response",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Response {
        const NAME: &'static str = "Response";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.response = ::std::option::Option::Some(response::Response::Result(is.read_message()?));
                    },
                    18 => {
                        self.response = ::std::option::Option::Some(response::Response::Error(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.response {
                match v {
                    &response::Response::Result(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &response::Response::Error(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.response {
                match v {
                    &response::Response::Result(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &response::Response::Error(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Response {
            Response::new()
        }

        fn clear(&mut self) {
            self.response = ::std::option::Option::None;
            self.response = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Response {
            static instance: Response = Response {
                response: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Response {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DecryptResponse.Response").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Response {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Response {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Response`
    pub mod response {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:xmtp.keystore_api.v1.DecryptResponse.Response.response)
        pub enum Response {
            // @@protoc_insertion_point(oneof_field:xmtp.keystore_api.v1.DecryptResponse.Response.result)
            Result(Success),
            // @@protoc_insertion_point(oneof_field:xmtp.keystore_api.v1.DecryptResponse.Response.error)
            Error(super::super::KeystoreError),
        }

        impl ::protobuf::Oneof for Response {
        }

        impl ::protobuf::OneofFull for Response {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Response as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
            }
        }

        impl Response {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
            }
        }
        ///  Wrapper object for success response
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:xmtp.keystore_api.v1.DecryptResponse.Response.Success)
        pub struct Success {
            // message fields
            // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptResponse.Response.Success.decrypted)
            pub decrypted: ::std::vec::Vec<u8>,
            // special fields
            // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.DecryptResponse.Response.Success.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Success {
            fn default() -> &'a Success {
                <Success as ::protobuf::Message>::default_instance()
            }
        }

        impl Success {
            pub fn new() -> Success {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "decrypted",
                    |m: &Success| { &m.decrypted },
                    |m: &mut Success| { &mut m.decrypted },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Success>(
                    "DecryptResponse.Response.Success",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Success {
            const NAME: &'static str = "Success";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.decrypted = is.read_bytes()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.decrypted.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(1, &self.decrypted);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.decrypted.is_empty() {
                    os.write_bytes(1, &self.decrypted)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Success {
                Success::new()
            }

            fn clear(&mut self) {
                self.decrypted.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Success {
                static instance: Success = Success {
                    decrypted: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Success {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("DecryptResponse.Response.Success").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Success {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Success {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

///  Decrypt a batch of messages using the appropriate topic keys
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.DecryptV2Request)
pub struct DecryptV2Request {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV2Request.requests)
    pub requests: ::std::vec::Vec<decrypt_v2request::Request>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.DecryptV2Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DecryptV2Request {
    fn default() -> &'a DecryptV2Request {
        <DecryptV2Request as ::protobuf::Message>::default_instance()
    }
}

impl DecryptV2Request {
    pub fn new() -> DecryptV2Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requests",
            |m: &DecryptV2Request| { &m.requests },
            |m: &mut DecryptV2Request| { &mut m.requests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DecryptV2Request>(
            "DecryptV2Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DecryptV2Request {
    const NAME: &'static str = "DecryptV2Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.requests {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DecryptV2Request {
        DecryptV2Request::new()
    }

    fn clear(&mut self) {
        self.requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DecryptV2Request {
        static instance: DecryptV2Request = DecryptV2Request {
            requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DecryptV2Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DecryptV2Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DecryptV2Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptV2Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DecryptV2Request`
pub mod decrypt_v2request {
    ///  A single decryption request
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.DecryptV2Request.Request)
    pub struct Request {
        // message fields
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV2Request.Request.payload)
        pub payload: ::protobuf::MessageField<super::super::ciphertext::Ciphertext>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV2Request.Request.header_bytes)
        pub header_bytes: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.DecryptV2Request.Request.content_topic)
        pub content_topic: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.DecryptV2Request.Request.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Request {
        fn default() -> &'a Request {
            <Request as ::protobuf::Message>::default_instance()
        }
    }

    impl Request {
        pub fn new() -> Request {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::ciphertext::Ciphertext>(
                "payload",
                |m: &Request| { &m.payload },
                |m: &mut Request| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "header_bytes",
                |m: &Request| { &m.header_bytes },
                |m: &mut Request| { &mut m.header_bytes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "content_topic",
                |m: &Request| { &m.content_topic },
                |m: &mut Request| { &mut m.content_topic },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
                "DecryptV2Request.Request",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Request {
        const NAME: &'static str = "Request";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.payload)?;
                    },
                    18 => {
                        self.header_bytes = is.read_bytes()?;
                    },
                    26 => {
                        self.content_topic = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.payload.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if !self.header_bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.header_bytes);
            }
            if !self.content_topic.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.content_topic);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.payload.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if !self.header_bytes.is_empty() {
                os.write_bytes(2, &self.header_bytes)?;
            }
            if !self.content_topic.is_empty() {
                os.write_string(3, &self.content_topic)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Request {
            Request::new()
        }

        fn clear(&mut self) {
            self.payload.clear();
            self.header_bytes.clear();
            self.content_topic.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Request {
            static instance: Request = Request {
                payload: ::protobuf::MessageField::none(),
                header_bytes: ::std::vec::Vec::new(),
                content_topic: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Request {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DecryptV2Request.Request").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Request {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Request {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Encrypt a batch of messages using X3DH key agreement
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.EncryptV1Request)
pub struct EncryptV1Request {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV1Request.requests)
    pub requests: ::std::vec::Vec<encrypt_v1request::Request>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.EncryptV1Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptV1Request {
    fn default() -> &'a EncryptV1Request {
        <EncryptV1Request as ::protobuf::Message>::default_instance()
    }
}

impl EncryptV1Request {
    pub fn new() -> EncryptV1Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requests",
            |m: &EncryptV1Request| { &m.requests },
            |m: &mut EncryptV1Request| { &mut m.requests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptV1Request>(
            "EncryptV1Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptV1Request {
    const NAME: &'static str = "EncryptV1Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.requests {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptV1Request {
        EncryptV1Request::new()
    }

    fn clear(&mut self) {
        self.requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptV1Request {
        static instance: EncryptV1Request = EncryptV1Request {
            requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptV1Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptV1Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptV1Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptV1Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EncryptV1Request`
pub mod encrypt_v1request {
    ///  A single encryption request
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.EncryptV1Request.Request)
    pub struct Request {
        // message fields
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV1Request.Request.recipient)
        pub recipient: ::protobuf::MessageField<super::super::public_key::PublicKeyBundle>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV1Request.Request.payload)
        pub payload: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV1Request.Request.header_bytes)
        pub header_bytes: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.EncryptV1Request.Request.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Request {
        fn default() -> &'a Request {
            <Request as ::protobuf::Message>::default_instance()
        }
    }

    impl Request {
        pub fn new() -> Request {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::public_key::PublicKeyBundle>(
                "recipient",
                |m: &Request| { &m.recipient },
                |m: &mut Request| { &mut m.recipient },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "payload",
                |m: &Request| { &m.payload },
                |m: &mut Request| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "header_bytes",
                |m: &Request| { &m.header_bytes },
                |m: &mut Request| { &mut m.header_bytes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
                "EncryptV1Request.Request",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Request {
        const NAME: &'static str = "Request";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.recipient)?;
                    },
                    18 => {
                        self.payload = is.read_bytes()?;
                    },
                    26 => {
                        self.header_bytes = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.recipient.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if !self.payload.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.payload);
            }
            if !self.header_bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(3, &self.header_bytes);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.recipient.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if !self.payload.is_empty() {
                os.write_bytes(2, &self.payload)?;
            }
            if !self.header_bytes.is_empty() {
                os.write_bytes(3, &self.header_bytes)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Request {
            Request::new()
        }

        fn clear(&mut self) {
            self.recipient.clear();
            self.payload.clear();
            self.header_bytes.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Request {
            static instance: Request = Request {
                recipient: ::protobuf::MessageField::none(),
                payload: ::std::vec::Vec::new(),
                header_bytes: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Request {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EncryptV1Request.Request").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Request {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Request {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Response type for both V1 and V2 encryption requests
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.EncryptResponse)
pub struct EncryptResponse {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptResponse.responses)
    pub responses: ::std::vec::Vec<encrypt_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.EncryptResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptResponse {
    fn default() -> &'a EncryptResponse {
        <EncryptResponse as ::protobuf::Message>::default_instance()
    }
}

impl EncryptResponse {
    pub fn new() -> EncryptResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "responses",
            |m: &EncryptResponse| { &m.responses },
            |m: &mut EncryptResponse| { &mut m.responses },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptResponse>(
            "EncryptResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptResponse {
    const NAME: &'static str = "EncryptResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responses.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptResponse {
        EncryptResponse::new()
    }

    fn clear(&mut self) {
        self.responses.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptResponse {
        static instance: EncryptResponse = EncryptResponse {
            responses: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EncryptResponse`
pub mod encrypt_response {
    ///  A single encryption response
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.EncryptResponse.Response)
    pub struct Response {
        // message oneof groups
        pub response: ::std::option::Option<response::Response>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.EncryptResponse.Response.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Response {
        fn default() -> &'a Response {
            <Response as ::protobuf::Message>::default_instance()
        }
    }

    impl Response {
        pub fn new() -> Response {
            ::std::default::Default::default()
        }

        // .xmtp.keystore_api.v1.EncryptResponse.Response.Success result = 1;

        pub fn result(&self) -> &response::Success {
            match self.response {
                ::std::option::Option::Some(response::Response::Result(ref v)) => v,
                _ => <response::Success as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_result(&mut self) {
            self.response = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            match self.response {
                ::std::option::Option::Some(response::Response::Result(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: response::Success) {
            self.response = ::std::option::Option::Some(response::Response::Result(v))
        }

        // Mutable pointer to the field.
        pub fn mut_result(&mut self) -> &mut response::Success {
            if let ::std::option::Option::Some(response::Response::Result(_)) = self.response {
            } else {
                self.response = ::std::option::Option::Some(response::Response::Result(response::Success::new()));
            }
            match self.response {
                ::std::option::Option::Some(response::Response::Result(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_result(&mut self) -> response::Success {
            if self.has_result() {
                match self.response.take() {
                    ::std::option::Option::Some(response::Response::Result(v)) => v,
                    _ => panic!(),
                }
            } else {
                response::Success::new()
            }
        }

        // .xmtp.keystore_api.v1.KeystoreError error = 2;

        pub fn error(&self) -> &super::KeystoreError {
            match self.response {
                ::std::option::Option::Some(response::Response::Error(ref v)) => v,
                _ => <super::KeystoreError as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_error(&mut self) {
            self.response = ::std::option::Option::None;
        }

        pub fn has_error(&self) -> bool {
            match self.response {
                ::std::option::Option::Some(response::Response::Error(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_error(&mut self, v: super::KeystoreError) {
            self.response = ::std::option::Option::Some(response::Response::Error(v))
        }

        // Mutable pointer to the field.
        pub fn mut_error(&mut self) -> &mut super::KeystoreError {
            if let ::std::option::Option::Some(response::Response::Error(_)) = self.response {
            } else {
                self.response = ::std::option::Option::Some(response::Response::Error(super::KeystoreError::new()));
            }
            match self.response {
                ::std::option::Option::Some(response::Response::Error(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_error(&mut self) -> super::KeystoreError {
            if self.has_error() {
                match self.response.take() {
                    ::std::option::Option::Some(response::Response::Error(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::KeystoreError::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, response::Success>(
                "result",
                Response::has_result,
                Response::result,
                Response::mut_result,
                Response::set_result,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KeystoreError>(
                "error",
                Response::has_error,
                Response::error,
                Response::mut_error,
                Response::set_error,
            ));
            oneofs.push(response::Response::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
                "EncryptResponse.Response",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Response {
        const NAME: &'static str = "Response";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.response = ::std::option::Option::Some(response::Response::Result(is.read_message()?));
                    },
                    18 => {
                        self.response = ::std::option::Option::Some(response::Response::Error(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.response {
                match v {
                    &response::Response::Result(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &response::Response::Error(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.response {
                match v {
                    &response::Response::Result(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &response::Response::Error(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Response {
            Response::new()
        }

        fn clear(&mut self) {
            self.response = ::std::option::Option::None;
            self.response = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Response {
            static instance: Response = Response {
                response: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Response {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EncryptResponse.Response").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Response {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Response {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Response`
    pub mod response {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:xmtp.keystore_api.v1.EncryptResponse.Response.response)
        pub enum Response {
            // @@protoc_insertion_point(oneof_field:xmtp.keystore_api.v1.EncryptResponse.Response.result)
            Result(Success),
            // @@protoc_insertion_point(oneof_field:xmtp.keystore_api.v1.EncryptResponse.Response.error)
            Error(super::super::KeystoreError),
        }

        impl ::protobuf::Oneof for Response {
        }

        impl ::protobuf::OneofFull for Response {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Response as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
            }
        }

        impl Response {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
            }
        }
        ///  Wrapper object for success response
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:xmtp.keystore_api.v1.EncryptResponse.Response.Success)
        pub struct Success {
            // message fields
            // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptResponse.Response.Success.encrypted)
            pub encrypted: ::protobuf::MessageField<super::super::super::ciphertext::Ciphertext>,
            // special fields
            // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.EncryptResponse.Response.Success.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Success {
            fn default() -> &'a Success {
                <Success as ::protobuf::Message>::default_instance()
            }
        }

        impl Success {
            pub fn new() -> Success {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::super::ciphertext::Ciphertext>(
                    "encrypted",
                    |m: &Success| { &m.encrypted },
                    |m: &mut Success| { &mut m.encrypted },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Success>(
                    "EncryptResponse.Response.Success",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Success {
            const NAME: &'static str = "Success";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.encrypted)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.encrypted.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.encrypted.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Success {
                Success::new()
            }

            fn clear(&mut self) {
                self.encrypted.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Success {
                static instance: Success = Success {
                    encrypted: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Success {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("EncryptResponse.Response.Success").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Success {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Success {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

///  Encrypt a batch of messages using the appropriate topic keys
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.EncryptV2Request)
pub struct EncryptV2Request {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV2Request.requests)
    pub requests: ::std::vec::Vec<encrypt_v2request::Request>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.EncryptV2Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptV2Request {
    fn default() -> &'a EncryptV2Request {
        <EncryptV2Request as ::protobuf::Message>::default_instance()
    }
}

impl EncryptV2Request {
    pub fn new() -> EncryptV2Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requests",
            |m: &EncryptV2Request| { &m.requests },
            |m: &mut EncryptV2Request| { &mut m.requests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptV2Request>(
            "EncryptV2Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptV2Request {
    const NAME: &'static str = "EncryptV2Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.requests {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptV2Request {
        EncryptV2Request::new()
    }

    fn clear(&mut self) {
        self.requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptV2Request {
        static instance: EncryptV2Request = EncryptV2Request {
            requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptV2Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptV2Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptV2Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptV2Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EncryptV2Request`
pub mod encrypt_v2request {
    ///  A single encryption request
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.EncryptV2Request.Request)
    pub struct Request {
        // message fields
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV2Request.Request.payload)
        pub payload: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV2Request.Request.header_bytes)
        pub header_bytes: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.EncryptV2Request.Request.content_topic)
        pub content_topic: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.EncryptV2Request.Request.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Request {
        fn default() -> &'a Request {
            <Request as ::protobuf::Message>::default_instance()
        }
    }

    impl Request {
        pub fn new() -> Request {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "payload",
                |m: &Request| { &m.payload },
                |m: &mut Request| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "header_bytes",
                |m: &Request| { &m.header_bytes },
                |m: &mut Request| { &mut m.header_bytes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "content_topic",
                |m: &Request| { &m.content_topic },
                |m: &mut Request| { &mut m.content_topic },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
                "EncryptV2Request.Request",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Request {
        const NAME: &'static str = "Request";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.payload = is.read_bytes()?;
                    },
                    18 => {
                        self.header_bytes = is.read_bytes()?;
                    },
                    26 => {
                        self.content_topic = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.payload.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.payload);
            }
            if !self.header_bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.header_bytes);
            }
            if !self.content_topic.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.content_topic);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.payload.is_empty() {
                os.write_bytes(1, &self.payload)?;
            }
            if !self.header_bytes.is_empty() {
                os.write_bytes(2, &self.header_bytes)?;
            }
            if !self.content_topic.is_empty() {
                os.write_string(3, &self.content_topic)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Request {
            Request::new()
        }

        fn clear(&mut self) {
            self.payload.clear();
            self.header_bytes.clear();
            self.content_topic.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Request {
            static instance: Request = Request {
                payload: ::std::vec::Vec::new(),
                header_bytes: ::std::vec::Vec::new(),
                content_topic: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Request {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EncryptV2Request.Request").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Request {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Request {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Request to create an invite payload, and store the topic keys in the Keystore
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.CreateInviteRequest)
pub struct CreateInviteRequest {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.CreateInviteRequest.context)
    pub context: ::protobuf::MessageField<super::invitation::invitation_v1::Context>,
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.CreateInviteRequest.recipient)
    pub recipient: ::protobuf::MessageField<super::public_key::SignedPublicKeyBundle>,
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.CreateInviteRequest.created_ns)
    pub created_ns: u64,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.CreateInviteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateInviteRequest {
    fn default() -> &'a CreateInviteRequest {
        <CreateInviteRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInviteRequest {
    pub fn new() -> CreateInviteRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::invitation::invitation_v1::Context>(
            "context",
            |m: &CreateInviteRequest| { &m.context },
            |m: &mut CreateInviteRequest| { &mut m.context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::SignedPublicKeyBundle>(
            "recipient",
            |m: &CreateInviteRequest| { &m.recipient },
            |m: &mut CreateInviteRequest| { &mut m.recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_ns",
            |m: &CreateInviteRequest| { &m.created_ns },
            |m: &mut CreateInviteRequest| { &mut m.created_ns },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateInviteRequest>(
            "CreateInviteRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateInviteRequest {
    const NAME: &'static str = "CreateInviteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.context)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.recipient)?;
                },
                24 => {
                    self.created_ns = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.recipient.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.created_ns != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.created_ns);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.context.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.recipient.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.created_ns != 0 {
            os.write_uint64(3, self.created_ns)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateInviteRequest {
        CreateInviteRequest::new()
    }

    fn clear(&mut self) {
        self.context.clear();
        self.recipient.clear();
        self.created_ns = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateInviteRequest {
        static instance: CreateInviteRequest = CreateInviteRequest {
            context: ::protobuf::MessageField::none(),
            recipient: ::protobuf::MessageField::none(),
            created_ns: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateInviteRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateInviteRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateInviteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInviteRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response to a CreateInviteRequest
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.CreateInviteResponse)
pub struct CreateInviteResponse {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.CreateInviteResponse.conversation)
    pub conversation: ::protobuf::MessageField<ConversationReference>,
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.CreateInviteResponse.payload)
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.CreateInviteResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateInviteResponse {
    fn default() -> &'a CreateInviteResponse {
        <CreateInviteResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateInviteResponse {
    pub fn new() -> CreateInviteResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConversationReference>(
            "conversation",
            |m: &CreateInviteResponse| { &m.conversation },
            |m: &mut CreateInviteResponse| { &mut m.conversation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &CreateInviteResponse| { &m.payload },
            |m: &mut CreateInviteResponse| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateInviteResponse>(
            "CreateInviteResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateInviteResponse {
    const NAME: &'static str = "CreateInviteResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.conversation)?;
                },
                18 => {
                    self.payload = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.conversation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.conversation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateInviteResponse {
        CreateInviteResponse::new()
    }

    fn clear(&mut self) {
        self.conversation.clear();
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateInviteResponse {
        static instance: CreateInviteResponse = CreateInviteResponse {
            conversation: ::protobuf::MessageField::none(),
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateInviteResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateInviteResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateInviteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInviteResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Request to save a batch of invite messages to the Keystore
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.SaveInvitesRequest)
pub struct SaveInvitesRequest {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.SaveInvitesRequest.requests)
    pub requests: ::std::vec::Vec<save_invites_request::Request>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.SaveInvitesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveInvitesRequest {
    fn default() -> &'a SaveInvitesRequest {
        <SaveInvitesRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveInvitesRequest {
    pub fn new() -> SaveInvitesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requests",
            |m: &SaveInvitesRequest| { &m.requests },
            |m: &mut SaveInvitesRequest| { &mut m.requests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveInvitesRequest>(
            "SaveInvitesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveInvitesRequest {
    const NAME: &'static str = "SaveInvitesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.requests {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveInvitesRequest {
        SaveInvitesRequest::new()
    }

    fn clear(&mut self) {
        self.requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveInvitesRequest {
        static instance: SaveInvitesRequest = SaveInvitesRequest {
            requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveInvitesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveInvitesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveInvitesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveInvitesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SaveInvitesRequest`
pub mod save_invites_request {
    ///  Mirrors xmtp.envelope schema
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.SaveInvitesRequest.Request)
    pub struct Request {
        // message fields
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.SaveInvitesRequest.Request.content_topic)
        pub content_topic: ::std::string::String,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.SaveInvitesRequest.Request.timestamp_ns)
        pub timestamp_ns: u64,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.SaveInvitesRequest.Request.payload)
        pub payload: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.SaveInvitesRequest.Request.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Request {
        fn default() -> &'a Request {
            <Request as ::protobuf::Message>::default_instance()
        }
    }

    impl Request {
        pub fn new() -> Request {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "content_topic",
                |m: &Request| { &m.content_topic },
                |m: &mut Request| { &mut m.content_topic },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "timestamp_ns",
                |m: &Request| { &m.timestamp_ns },
                |m: &mut Request| { &mut m.timestamp_ns },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "payload",
                |m: &Request| { &m.payload },
                |m: &mut Request| { &mut m.payload },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
                "SaveInvitesRequest.Request",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Request {
        const NAME: &'static str = "Request";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.content_topic = is.read_string()?;
                    },
                    16 => {
                        self.timestamp_ns = is.read_uint64()?;
                    },
                    26 => {
                        self.payload = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.content_topic.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.content_topic);
            }
            if self.timestamp_ns != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.timestamp_ns);
            }
            if !self.payload.is_empty() {
                my_size += ::protobuf::rt::bytes_size(3, &self.payload);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.content_topic.is_empty() {
                os.write_string(1, &self.content_topic)?;
            }
            if self.timestamp_ns != 0 {
                os.write_uint64(2, self.timestamp_ns)?;
            }
            if !self.payload.is_empty() {
                os.write_bytes(3, &self.payload)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Request {
            Request::new()
        }

        fn clear(&mut self) {
            self.content_topic.clear();
            self.timestamp_ns = 0;
            self.payload.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Request {
            static instance: Request = Request {
                content_topic: ::std::string::String::new(),
                timestamp_ns: 0,
                payload: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Request {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SaveInvitesRequest.Request").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Request {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Request {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Response to a SaveInvitesRequest
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.SaveInvitesResponse)
pub struct SaveInvitesResponse {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.SaveInvitesResponse.responses)
    pub responses: ::std::vec::Vec<save_invites_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.SaveInvitesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveInvitesResponse {
    fn default() -> &'a SaveInvitesResponse {
        <SaveInvitesResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveInvitesResponse {
    pub fn new() -> SaveInvitesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "responses",
            |m: &SaveInvitesResponse| { &m.responses },
            |m: &mut SaveInvitesResponse| { &mut m.responses },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveInvitesResponse>(
            "SaveInvitesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveInvitesResponse {
    const NAME: &'static str = "SaveInvitesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responses.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveInvitesResponse {
        SaveInvitesResponse::new()
    }

    fn clear(&mut self) {
        self.responses.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveInvitesResponse {
        static instance: SaveInvitesResponse = SaveInvitesResponse {
            responses: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveInvitesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveInvitesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveInvitesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveInvitesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SaveInvitesResponse`
pub mod save_invites_response {
    ///  A single response
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.SaveInvitesResponse.Response)
    pub struct Response {
        // message oneof groups
        pub response: ::std::option::Option<response::Response>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.SaveInvitesResponse.Response.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Response {
        fn default() -> &'a Response {
            <Response as ::protobuf::Message>::default_instance()
        }
    }

    impl Response {
        pub fn new() -> Response {
            ::std::default::Default::default()
        }

        // .xmtp.keystore_api.v1.SaveInvitesResponse.Response.Success result = 1;

        pub fn result(&self) -> &response::Success {
            match self.response {
                ::std::option::Option::Some(response::Response::Result(ref v)) => v,
                _ => <response::Success as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_result(&mut self) {
            self.response = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            match self.response {
                ::std::option::Option::Some(response::Response::Result(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: response::Success) {
            self.response = ::std::option::Option::Some(response::Response::Result(v))
        }

        // Mutable pointer to the field.
        pub fn mut_result(&mut self) -> &mut response::Success {
            if let ::std::option::Option::Some(response::Response::Result(_)) = self.response {
            } else {
                self.response = ::std::option::Option::Some(response::Response::Result(response::Success::new()));
            }
            match self.response {
                ::std::option::Option::Some(response::Response::Result(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_result(&mut self) -> response::Success {
            if self.has_result() {
                match self.response.take() {
                    ::std::option::Option::Some(response::Response::Result(v)) => v,
                    _ => panic!(),
                }
            } else {
                response::Success::new()
            }
        }

        // .xmtp.keystore_api.v1.KeystoreError error = 2;

        pub fn error(&self) -> &super::KeystoreError {
            match self.response {
                ::std::option::Option::Some(response::Response::Error(ref v)) => v,
                _ => <super::KeystoreError as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_error(&mut self) {
            self.response = ::std::option::Option::None;
        }

        pub fn has_error(&self) -> bool {
            match self.response {
                ::std::option::Option::Some(response::Response::Error(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_error(&mut self, v: super::KeystoreError) {
            self.response = ::std::option::Option::Some(response::Response::Error(v))
        }

        // Mutable pointer to the field.
        pub fn mut_error(&mut self) -> &mut super::KeystoreError {
            if let ::std::option::Option::Some(response::Response::Error(_)) = self.response {
            } else {
                self.response = ::std::option::Option::Some(response::Response::Error(super::KeystoreError::new()));
            }
            match self.response {
                ::std::option::Option::Some(response::Response::Error(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_error(&mut self) -> super::KeystoreError {
            if self.has_error() {
                match self.response.take() {
                    ::std::option::Option::Some(response::Response::Error(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::KeystoreError::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, response::Success>(
                "result",
                Response::has_result,
                Response::result,
                Response::mut_result,
                Response::set_result,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KeystoreError>(
                "error",
                Response::has_error,
                Response::error,
                Response::mut_error,
                Response::set_error,
            ));
            oneofs.push(response::Response::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
                "SaveInvitesResponse.Response",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Response {
        const NAME: &'static str = "Response";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.response = ::std::option::Option::Some(response::Response::Result(is.read_message()?));
                    },
                    18 => {
                        self.response = ::std::option::Option::Some(response::Response::Error(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.response {
                match v {
                    &response::Response::Result(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &response::Response::Error(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.response {
                match v {
                    &response::Response::Result(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &response::Response::Error(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Response {
            Response::new()
        }

        fn clear(&mut self) {
            self.response = ::std::option::Option::None;
            self.response = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Response {
            static instance: Response = Response {
                response: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Response {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SaveInvitesResponse.Response").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Response {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Response {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Response`
    pub mod response {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:xmtp.keystore_api.v1.SaveInvitesResponse.Response.response)
        pub enum Response {
            // @@protoc_insertion_point(oneof_field:xmtp.keystore_api.v1.SaveInvitesResponse.Response.result)
            Result(Success),
            // @@protoc_insertion_point(oneof_field:xmtp.keystore_api.v1.SaveInvitesResponse.Response.error)
            Error(super::super::KeystoreError),
        }

        impl ::protobuf::Oneof for Response {
        }

        impl ::protobuf::OneofFull for Response {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Response as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
            }
        }

        impl Response {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
            }
        }
        ///  Wrapper object for success response
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:xmtp.keystore_api.v1.SaveInvitesResponse.Response.Success)
        pub struct Success {
            // message fields
            // @@protoc_insertion_point(field:xmtp.keystore_api.v1.SaveInvitesResponse.Response.Success.conversation)
            pub conversation: ::protobuf::MessageField<super::super::ConversationReference>,
            // special fields
            // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.SaveInvitesResponse.Response.Success.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Success {
            fn default() -> &'a Success {
                <Success as ::protobuf::Message>::default_instance()
            }
        }

        impl Success {
            pub fn new() -> Success {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::ConversationReference>(
                    "conversation",
                    |m: &Success| { &m.conversation },
                    |m: &mut Success| { &mut m.conversation },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Success>(
                    "SaveInvitesResponse.Response.Success",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Success {
            const NAME: &'static str = "Success";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.conversation)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.conversation.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.conversation.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Success {
                Success::new()
            }

            fn clear(&mut self) {
                self.conversation.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Success {
                static instance: Success = Success {
                    conversation: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Success {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("SaveInvitesResponse.Response.Success").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Success {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Success {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

///  A mapping of topics to their decrypted invitations
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.keystore_api.v1.TopicMap)
pub struct TopicMap {
    // message fields
    // @@protoc_insertion_point(field:xmtp.keystore_api.v1.TopicMap.topics)
    pub topics: ::std::collections::HashMap<::std::string::String, topic_map::TopicData>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.TopicMap.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TopicMap {
    fn default() -> &'a TopicMap {
        <TopicMap as ::protobuf::Message>::default_instance()
    }
}

impl TopicMap {
    pub fn new() -> TopicMap {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "topics",
            |m: &TopicMap| { &m.topics },
            |m: &mut TopicMap| { &mut m.topics },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TopicMap>(
            "TopicMap",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TopicMap {
    const NAME: &'static str = "TopicMap";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.topics.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.topics {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.topics {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TopicMap {
        TopicMap::new()
    }

    fn clear(&mut self) {
        self.topics.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TopicMap {
        static instance: ::protobuf::rt::Lazy<TopicMap> = ::protobuf::rt::Lazy::new();
        instance.get(TopicMap::new)
    }
}

impl ::protobuf::MessageFull for TopicMap {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TopicMap").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TopicMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TopicMap {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TopicMap`
pub mod topic_map {
    ///  TopicData wraps the invitation and the timestamp it was created
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.keystore_api.v1.TopicMap.TopicData)
    pub struct TopicData {
        // message fields
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.TopicMap.TopicData.created_ns)
        pub created_ns: u64,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.TopicMap.TopicData.peer_address)
        pub peer_address: ::std::string::String,
        // @@protoc_insertion_point(field:xmtp.keystore_api.v1.TopicMap.TopicData.invitation)
        pub invitation: ::protobuf::MessageField<super::super::invitation::InvitationV1>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.keystore_api.v1.TopicMap.TopicData.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TopicData {
        fn default() -> &'a TopicData {
            <TopicData as ::protobuf::Message>::default_instance()
        }
    }

    impl TopicData {
        pub fn new() -> TopicData {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "created_ns",
                |m: &TopicData| { &m.created_ns },
                |m: &mut TopicData| { &mut m.created_ns },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "peer_address",
                |m: &TopicData| { &m.peer_address },
                |m: &mut TopicData| { &mut m.peer_address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::invitation::InvitationV1>(
                "invitation",
                |m: &TopicData| { &m.invitation },
                |m: &mut TopicData| { &mut m.invitation },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TopicData>(
                "TopicMap.TopicData",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TopicData {
        const NAME: &'static str = "TopicData";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.created_ns = is.read_uint64()?;
                    },
                    18 => {
                        self.peer_address = is.read_string()?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.invitation)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.created_ns != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.created_ns);
            }
            if !self.peer_address.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.peer_address);
            }
            if let Some(v) = self.invitation.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.created_ns != 0 {
                os.write_uint64(1, self.created_ns)?;
            }
            if !self.peer_address.is_empty() {
                os.write_string(2, &self.peer_address)?;
            }
            if let Some(v) = self.invitation.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TopicData {
            TopicData::new()
        }

        fn clear(&mut self) {
            self.created_ns = 0;
            self.peer_address.clear();
            self.invitation.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TopicData {
            static instance: TopicData = TopicData {
                created_ns: 0,
                peer_address: ::std::string::String::new(),
                invitation: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TopicData {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("TopicMap.TopicData").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TopicData {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TopicData {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Application-specific error codes for the Keystore API.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:xmtp.keystore_api.v1.ErrorCode)
pub enum ErrorCode {
    // @@protoc_insertion_point(enum_value:xmtp.keystore_api.v1.ErrorCode.ERROR_CODE_UNSPECIFIED)
    ERROR_CODE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:xmtp.keystore_api.v1.ErrorCode.ERROR_CODE_INVALID_INPUT)
    ERROR_CODE_INVALID_INPUT = 1,
    // @@protoc_insertion_point(enum_value:xmtp.keystore_api.v1.ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY)
    ERROR_CODE_NO_MATCHING_PREKEY = 2,
}

impl ::protobuf::Enum for ErrorCode {
    const NAME: &'static str = "ErrorCode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_INVALID_INPUT),
            2 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_NO_MATCHING_PREKEY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ErrorCode] = &[
        ErrorCode::ERROR_CODE_UNSPECIFIED,
        ErrorCode::ERROR_CODE_INVALID_INPUT,
        ErrorCode::ERROR_CODE_NO_MATCHING_PREKEY,
    ];
}

impl ::protobuf::EnumFull for ErrorCode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ErrorCode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::ERROR_CODE_UNSPECIFIED
    }
}

impl ErrorCode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ErrorCode>("ErrorCode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ekeystore_api/v1/keystore.proto\x12\x14xmtp.keystore_api.v1\x1a!mes\
    sage_contents/ciphertext.proto\x1a!message_contents/invitation.proto\x1a\
    !message_contents/public_key.proto\"^\n\rKeystoreError\x12\x18\n\x07mess\
    age\x18\x01\x20\x01(\tR\x07message\x123\n\x04code\x18\x02\x20\x01(\x0e2\
    \x1f.xmtp.keystore_api.v1.ErrorCodeR\x04code\"\xb6\x01\n\x15Conversation\
    Reference\x12\x14\n\x05topic\x18\x01\x20\x01(\tR\x05topic\x12!\n\x0cpeer\
    _address\x18\x02\x20\x01(\tR\x0bpeerAddress\x12\x1d\n\ncreated_ns\x18\
    \x03\x20\x01(\x04R\tcreatedNs\x12E\n\x07context\x18\x04\x20\x01(\x0b2+.x\
    mtp.message_contents.InvitationV1.ContextR\x07context\"\xac\x02\n\x10Dec\
    ryptV1Request\x12J\n\x08requests\x18\x01\x20\x03(\x0b2..xmtp.keystore_ap\
    i.v1.DecryptV1Request.RequestR\x08requests\x1a\xcb\x01\n\x07Request\x12;\
    \n\x07payload\x18\x01\x20\x01(\x0b2!.xmtp.message_contents.CiphertextR\
    \x07payload\x12C\n\tpeer_keys\x18\x02\x20\x01(\x0b2&.xmtp.message_conten\
    ts.PublicKeyBundleR\x08peerKeys\x12!\n\x0cheader_bytes\x18\x03\x20\x01(\
    \x0cR\x0bheaderBytes\x12\x1b\n\tis_sender\x18\x04\x20\x01(\x08R\x08isSen\
    der\"\xb0\x02\n\x0fDecryptResponse\x12L\n\tresponses\x18\x01\x20\x03(\
    \x0b2..xmtp.keystore_api.v1.DecryptResponse.ResponseR\tresponses\x1a\xce\
    \x01\n\x08Response\x12P\n\x06result\x18\x01\x20\x01(\x0b26.xmtp.keystore\
    _api.v1.DecryptResponse.Response.SuccessH\0R\x06result\x12;\n\x05error\
    \x18\x02\x20\x01(\x0b2#.xmtp.keystore_api.v1.KeystoreErrorH\0R\x05error\
    \x1a'\n\x07Success\x12\x1c\n\tdecrypted\x18\x01\x20\x01(\x0cR\tdecrypted\
    B\n\n\x08response\"\xef\x01\n\x10DecryptV2Request\x12J\n\x08requests\x18\
    \x01\x20\x03(\x0b2..xmtp.keystore_api.v1.DecryptV2Request.RequestR\x08re\
    quests\x1a\x8e\x01\n\x07Request\x12;\n\x07payload\x18\x01\x20\x01(\x0b2!\
    .xmtp.message_contents.CiphertextR\x07payload\x12!\n\x0cheader_bytes\x18\
    \x02\x20\x01(\x0cR\x0bheaderBytes\x12#\n\rcontent_topic\x18\x03\x20\x01(\
    \tR\x0ccontentTopic\"\xed\x01\n\x10EncryptV1Request\x12J\n\x08requests\
    \x18\x01\x20\x03(\x0b2..xmtp.keystore_api.v1.EncryptV1Request.RequestR\
    \x08requests\x1a\x8c\x01\n\x07Request\x12D\n\trecipient\x18\x01\x20\x01(\
    \x0b2&.xmtp.message_contents.PublicKeyBundleR\trecipient\x12\x18\n\x07pa\
    yload\x18\x02\x20\x01(\x0cR\x07payload\x12!\n\x0cheader_bytes\x18\x03\
    \x20\x01(\x0cR\x0bheaderBytes\"\xd3\x02\n\x0fEncryptResponse\x12L\n\tres\
    ponses\x18\x01\x20\x03(\x0b2..xmtp.keystore_api.v1.EncryptResponse.Respo\
    nseR\tresponses\x1a\xf1\x01\n\x08Response\x12P\n\x06result\x18\x01\x20\
    \x01(\x0b26.xmtp.keystore_api.v1.EncryptResponse.Response.SuccessH\0R\
    \x06result\x12;\n\x05error\x18\x02\x20\x01(\x0b2#.xmtp.keystore_api.v1.K\
    eystoreErrorH\0R\x05error\x1aJ\n\x07Success\x12?\n\tencrypted\x18\x01\
    \x20\x01(\x0b2!.xmtp.message_contents.CiphertextR\tencryptedB\n\n\x08res\
    ponse\"\xcb\x01\n\x10EncryptV2Request\x12J\n\x08requests\x18\x01\x20\x03\
    (\x0b2..xmtp.keystore_api.v1.EncryptV2Request.RequestR\x08requests\x1ak\
    \n\x07Request\x12\x18\n\x07payload\x18\x01\x20\x01(\x0cR\x07payload\x12!\
    \n\x0cheader_bytes\x18\x02\x20\x01(\x0cR\x0bheaderBytes\x12#\n\rcontent_\
    topic\x18\x03\x20\x01(\tR\x0ccontentTopic\"\xc7\x01\n\x13CreateInviteReq\
    uest\x12E\n\x07context\x18\x01\x20\x01(\x0b2+.xmtp.message_contents.Invi\
    tationV1.ContextR\x07context\x12J\n\trecipient\x18\x02\x20\x01(\x0b2,.xm\
    tp.message_contents.SignedPublicKeyBundleR\trecipient\x12\x1d\n\ncreated\
    _ns\x18\x03\x20\x01(\x04R\tcreatedNs\"\x81\x01\n\x14CreateInviteResponse\
    \x12O\n\x0cconversation\x18\x01\x20\x01(\x0b2+.xmtp.keystore_api.v1.Conv\
    ersationReferenceR\x0cconversation\x12\x18\n\x07payload\x18\x02\x20\x01(\
    \x0cR\x07payload\"\xcf\x01\n\x12SaveInvitesRequest\x12L\n\x08requests\
    \x18\x01\x20\x03(\x0b20.xmtp.keystore_api.v1.SaveInvitesRequest.RequestR\
    \x08requests\x1ak\n\x07Request\x12#\n\rcontent_topic\x18\x01\x20\x01(\tR\
    \x0ccontentTopic\x12!\n\x0ctimestamp_ns\x18\x02\x20\x01(\x04R\x0btimesta\
    mpNs\x12\x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07payload\"\xef\x02\n\
    \x13SaveInvitesResponse\x12P\n\tresponses\x18\x01\x20\x03(\x0b22.xmtp.ke\
    ystore_api.v1.SaveInvitesResponse.ResponseR\tresponses\x1a\x85\x02\n\x08\
    Response\x12T\n\x06result\x18\x01\x20\x01(\x0b2:.xmtp.keystore_api.v1.Sa\
    veInvitesResponse.Response.SuccessH\0R\x06result\x12;\n\x05error\x18\x02\
    \x20\x01(\x0b2#.xmtp.keystore_api.v1.KeystoreErrorH\0R\x05error\x1aZ\n\
    \x07Success\x12O\n\x0cconversation\x18\x01\x20\x01(\x0b2+.xmtp.keystore_\
    api.v1.ConversationReferenceR\x0cconversationB\n\n\x08response\"\xc8\x02\
    \n\x08TopicMap\x12B\n\x06topics\x18\x01\x20\x03(\x0b2*.xmtp.keystore_api\
    .v1.TopicMap.TopicsEntryR\x06topics\x1a\x92\x01\n\tTopicData\x12\x1d\n\n\
    created_ns\x18\x01\x20\x01(\x04R\tcreatedNs\x12!\n\x0cpeer_address\x18\
    \x02\x20\x01(\tR\x0bpeerAddress\x12C\n\ninvitation\x18\x03\x20\x01(\x0b2\
    #.xmtp.message_contents.InvitationV1R\ninvitation\x1ac\n\x0bTopicsEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12>\n\x05value\x18\x02\x20\
    \x01(\x0b2(.xmtp.keystore_api.v1.TopicMap.TopicDataR\x05value:\x028\x01*\
    h\n\tErrorCode\x12\x1a\n\x16ERROR_CODE_UNSPECIFIED\x10\0\x12\x1c\n\x18ER\
    ROR_CODE_INVALID_INPUT\x10\x01\x12!\n\x1dERROR_CODE_NO_MATCHING_PREKEY\
    \x10\x02J\xb8)\n\x07\x12\x05\x01\0\xa7\x01\x01\n/\n\x01\x0c\x12\x03\x01\
    \0\x12\x1a%\x20Message\x20content\x20encoding\x20structures\n\n\x08\n\
    \x01\x02\x12\x03\x03\0\x1d\n\t\n\x02\x03\0\x12\x03\x05\0+\n\t\n\x02\x03\
    \x01\x12\x03\x06\0+\n\t\n\x02\x03\x02\x12\x03\x07\0+\nD\n\x02\x05\0\x12\
    \x04\n\0\x0e\x01\x1a8\x20Application-specific\x20error\x20codes\x20for\
    \x20the\x20Keystore\x20API.\n\n\n\n\x03\x05\0\x01\x12\x03\n\x05\x0e\n\
    \x0b\n\x04\x05\0\x02\0\x12\x03\x0b\x04\x1f\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x0b\x04\x1a\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x0b\x1d\x1e\n\
    \x0b\n\x04\x05\0\x02\x01\x12\x03\x0c\x04!\n\x0c\n\x05\x05\0\x02\x01\x01\
    \x12\x03\x0c\x04\x1c\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0c\x1f\x20\n\
    \x0b\n\x04\x05\0\x02\x02\x12\x03\r\x04&\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03\r\x04!\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\r$%\n<\n\x02\x04\0\
    \x12\x04\x11\0\x14\x01\x1a0\x20Wrapper\x20class\x20for\x20errors\x20from\
    \x20the\x20Keystore\x20API\n\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\x15\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x12\x04\x17\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x12\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\x0b\x12\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x12\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x13\x04\x17\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x13\x04\r\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x13\x0e\x12\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x13\x15\x16\nQ\n\x02\x04\x01\x12\x04\x17\0\x1c\x01\x1aE\x20A\
    \x20light\x20pointer\x20for\x20a\x20conversation\x20that\x20contains\x20\
    no\x20decryption\x20keys\n\n\n\n\x03\x04\x01\x01\x12\x03\x17\x08\x1d\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x04\x15\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x18\x0b\x10\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x18\x13\x14\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x19\x04\x1c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x19\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\x0b\x17\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x19\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x1a\x04\x1a\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1a\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\x1a\x0b\x15\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x1a\x18\x19\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1b\x04\
    ;\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\x1b\x04.\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03\x1b/6\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1b9:\
    \nB\n\x02\x04\x02\x12\x04\x1f\0)\x01\x1a6\x20Decrypt\x20a\x20batch\x20of\
    \x20messages\x20using\x20X3DH\x20key\x20agreement\n\n\n\n\x03\x04\x02\
    \x01\x12\x03\x1f\x08\x18\n+\n\x04\x04\x02\x03\0\x12\x04!\x04&\x05\x1a\
    \x1d\x20A\x20single\x20decryption\x20request\n\n\x0c\n\x05\x04\x02\x03\0\
    \x01\x12\x03!\x0c\x13\n\r\n\x06\x04\x02\x03\0\x02\0\x12\x03\"\x085\n\x0e\
    \n\x07\x04\x02\x03\0\x02\0\x06\x12\x03\"\x08(\n\x0e\n\x07\x04\x02\x03\0\
    \x02\0\x01\x12\x03\")0\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03\"34\n\
    \r\n\x06\x04\x02\x03\0\x02\x01\x12\x03#\x08<\n\x0e\n\x07\x04\x02\x03\0\
    \x02\x01\x06\x12\x03#\x08-\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x01\x12\x03\
    #.7\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03#:;\n\r\n\x06\x04\x02\
    \x03\0\x02\x02\x12\x03$\x08\x1f\n\x0e\n\x07\x04\x02\x03\0\x02\x02\x05\
    \x12\x03$\x08\r\n\x0e\n\x07\x04\x02\x03\0\x02\x02\x01\x12\x03$\x0e\x1a\n\
    \x0e\n\x07\x04\x02\x03\0\x02\x02\x03\x12\x03$\x1d\x1e\n\r\n\x06\x04\x02\
    \x03\0\x02\x03\x12\x03%\x08\x1b\n\x0e\n\x07\x04\x02\x03\0\x02\x03\x05\
    \x12\x03%\x08\x0c\n\x0e\n\x07\x04\x02\x03\0\x02\x03\x01\x12\x03%\r\x16\n\
    \x0e\n\x07\x04\x02\x03\0\x02\x03\x03\x12\x03%\x19\x1a\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03(\x04\"\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03(\x04\x0c\
    \n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03(\r\x14\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03(\x15\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03(\x20!\nB\n\
    \x02\x04\x03\x12\x04,\0;\x01\x1a6\x20Response\x20type\x20for\x20both\x20\
    V1\x20and\x20V2\x20decryption\x20requests\n\n\n\n\x03\x04\x03\x01\x12\
    \x03,\x08\x17\n,\n\x04\x04\x03\x03\0\x12\x04.\x048\x05\x1a\x1e\x20A\x20s\
    ingle\x20decryption\x20response\n\n\x0c\n\x05\x04\x03\x03\0\x01\x12\x03.\
    \x0c\x14\n5\n\x06\x04\x03\x03\0\x03\0\x12\x040\x082\t\x1a%\x20Wrapper\
    \x20object\x20for\x20success\x20response\n\n\x0e\n\x07\x04\x03\x03\0\x03\
    \0\x01\x12\x030\x10\x17\n\x0f\n\x08\x04\x03\x03\0\x03\0\x02\0\x12\x031\
    \x0c\x20\n\x10\n\t\x04\x03\x03\0\x03\0\x02\0\x05\x12\x031\x0c\x11\n\x10\
    \n\t\x04\x03\x03\0\x03\0\x02\0\x01\x12\x031\x12\x1b\n\x10\n\t\x04\x03\
    \x03\0\x03\0\x02\0\x03\x12\x031\x1e\x1f\n\x0e\n\x06\x04\x03\x03\0\x08\0\
    \x12\x044\x087\t\n\x0e\n\x07\x04\x03\x03\0\x08\0\x01\x12\x034\x0e\x16\n\
    \r\n\x06\x04\x03\x03\0\x02\0\x12\x035\x0c\x1f\n\x0e\n\x07\x04\x03\x03\0\
    \x02\0\x06\x12\x035\x0c\x13\n\x0e\n\x07\x04\x03\x03\0\x02\0\x01\x12\x035\
    \x14\x1a\n\x0e\n\x07\x04\x03\x03\0\x02\0\x03\x12\x035\x1d\x1e\n\r\n\x06\
    \x04\x03\x03\0\x02\x01\x12\x036\x0c$\n\x0e\n\x07\x04\x03\x03\0\x02\x01\
    \x06\x12\x036\x0c\x19\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x01\x12\x036\x1a\
    \x1f\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x03\x12\x036\"#\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03:\x04$\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03:\x04\x0c\
    \n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03:\r\x15\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03:\x16\x1f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03:\"#\nJ\n\x02\
    \x04\x04\x12\x04>\0G\x01\x1a>\x20Decrypt\x20a\x20batch\x20of\x20messages\
    \x20using\x20the\x20appropriate\x20topic\x20keys\n\n\n\n\x03\x04\x04\x01\
    \x12\x03>\x08\x18\n+\n\x04\x04\x04\x03\0\x12\x04@\x04D\x05\x1a\x1d\x20A\
    \x20single\x20decryption\x20request\n\n\x0c\n\x05\x04\x04\x03\0\x01\x12\
    \x03@\x0c\x13\n\r\n\x06\x04\x04\x03\0\x02\0\x12\x03A\x085\n\x0e\n\x07\
    \x04\x04\x03\0\x02\0\x06\x12\x03A\x08(\n\x0e\n\x07\x04\x04\x03\0\x02\0\
    \x01\x12\x03A)0\n\x0e\n\x07\x04\x04\x03\0\x02\0\x03\x12\x03A34\n\r\n\x06\
    \x04\x04\x03\0\x02\x01\x12\x03B\x08\x1f\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x01\x05\x12\x03B\x08\r\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x01\x12\x03B\
    \x0e\x1a\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x03\x12\x03B\x1d\x1e\n\r\n\
    \x06\x04\x04\x03\0\x02\x02\x12\x03C\x08!\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x02\x05\x12\x03C\x08\x0e\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x01\x12\x03C\
    \x0f\x1c\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x03\x12\x03C\x1f\x20\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03F\x04\"\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03F\
    \x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03F\r\x14\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03F\x15\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03F\
    \x20!\nB\n\x02\x04\x05\x12\x04J\0S\x01\x1a6\x20Encrypt\x20a\x20batch\x20\
    of\x20messages\x20using\x20X3DH\x20key\x20agreement\n\n\n\n\x03\x04\x05\
    \x01\x12\x03J\x08\x18\n+\n\x04\x04\x05\x03\0\x12\x04L\x04P\x05\x1a\x1d\
    \x20A\x20single\x20encryption\x20request\n\n\x0c\n\x05\x04\x05\x03\0\x01\
    \x12\x03L\x0c\x13\n\r\n\x06\x04\x05\x03\0\x02\0\x12\x03M\x08<\n\x0e\n\
    \x07\x04\x05\x03\0\x02\0\x06\x12\x03M\x08-\n\x0e\n\x07\x04\x05\x03\0\x02\
    \0\x01\x12\x03M.7\n\x0e\n\x07\x04\x05\x03\0\x02\0\x03\x12\x03M:;\n\r\n\
    \x06\x04\x05\x03\0\x02\x01\x12\x03N\x08\x1a\n\x0e\n\x07\x04\x05\x03\0\
    \x02\x01\x05\x12\x03N\x08\r\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x01\x12\
    \x03N\x0e\x15\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x03\x12\x03N\x18\x19\n\r\
    \n\x06\x04\x05\x03\0\x02\x02\x12\x03O\x08\x1f\n\x0e\n\x07\x04\x05\x03\0\
    \x02\x02\x05\x12\x03O\x08\r\n\x0e\n\x07\x04\x05\x03\0\x02\x02\x01\x12\
    \x03O\x0e\x1a\n\x0e\n\x07\x04\x05\x03\0\x02\x02\x03\x12\x03O\x1d\x1e\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03R\x04\"\n\x0c\n\x05\x04\x05\x02\0\x04\
    \x12\x03R\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03R\r\x14\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03R\x15\x1d\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03R\x20!\nB\n\x02\x04\x06\x12\x04V\0e\x01\x1a6\x20Response\x20type\
    \x20for\x20both\x20V1\x20and\x20V2\x20encryption\x20requests\n\n\n\n\x03\
    \x04\x06\x01\x12\x03V\x08\x17\n,\n\x04\x04\x06\x03\0\x12\x04X\x04b\x05\
    \x1a\x1e\x20A\x20single\x20encryption\x20response\n\n\x0c\n\x05\x04\x06\
    \x03\0\x01\x12\x03X\x0c\x14\n5\n\x06\x04\x06\x03\0\x03\0\x12\x04Z\x08\\\
    \t\x1a%\x20Wrapper\x20object\x20for\x20success\x20response\n\n\x0e\n\x07\
    \x04\x06\x03\0\x03\0\x01\x12\x03Z\x10\x17\n\x0f\n\x08\x04\x06\x03\0\x03\
    \0\x02\0\x12\x03[\x0c;\n\x10\n\t\x04\x06\x03\0\x03\0\x02\0\x06\x12\x03[\
    \x0c,\n\x10\n\t\x04\x06\x03\0\x03\0\x02\0\x01\x12\x03[-6\n\x10\n\t\x04\
    \x06\x03\0\x03\0\x02\0\x03\x12\x03[9:\n\x0e\n\x06\x04\x06\x03\0\x08\0\
    \x12\x04^\x08a\t\n\x0e\n\x07\x04\x06\x03\0\x08\0\x01\x12\x03^\x0e\x16\n\
    \r\n\x06\x04\x06\x03\0\x02\0\x12\x03_\x0c\x1f\n\x0e\n\x07\x04\x06\x03\0\
    \x02\0\x06\x12\x03_\x0c\x13\n\x0e\n\x07\x04\x06\x03\0\x02\0\x01\x12\x03_\
    \x14\x1a\n\x0e\n\x07\x04\x06\x03\0\x02\0\x03\x12\x03_\x1d\x1e\n\r\n\x06\
    \x04\x06\x03\0\x02\x01\x12\x03`\x0c$\n\x0e\n\x07\x04\x06\x03\0\x02\x01\
    \x06\x12\x03`\x0c\x19\n\x0e\n\x07\x04\x06\x03\0\x02\x01\x01\x12\x03`\x1a\
    \x1f\n\x0e\n\x07\x04\x06\x03\0\x02\x01\x03\x12\x03`\"#\n\x0b\n\x04\x04\
    \x06\x02\0\x12\x03d\x04$\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03d\x04\x0c\
    \n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03d\r\x15\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03d\x16\x1f\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03d\"#\nJ\n\x02\
    \x04\x07\x12\x04h\0q\x01\x1a>\x20Encrypt\x20a\x20batch\x20of\x20messages\
    \x20using\x20the\x20appropriate\x20topic\x20keys\n\n\n\n\x03\x04\x07\x01\
    \x12\x03h\x08\x18\n+\n\x04\x04\x07\x03\0\x12\x04j\x04n\x05\x1a\x1d\x20A\
    \x20single\x20encryption\x20request\n\n\x0c\n\x05\x04\x07\x03\0\x01\x12\
    \x03j\x0c\x13\n\r\n\x06\x04\x07\x03\0\x02\0\x12\x03k\x08\x1a\n\x0e\n\x07\
    \x04\x07\x03\0\x02\0\x05\x12\x03k\x08\r\n\x0e\n\x07\x04\x07\x03\0\x02\0\
    \x01\x12\x03k\x0e\x15\n\x0e\n\x07\x04\x07\x03\0\x02\0\x03\x12\x03k\x18\
    \x19\n\r\n\x06\x04\x07\x03\0\x02\x01\x12\x03l\x08\x1f\n\x0e\n\x07\x04\
    \x07\x03\0\x02\x01\x05\x12\x03l\x08\r\n\x0e\n\x07\x04\x07\x03\0\x02\x01\
    \x01\x12\x03l\x0e\x1a\n\x0e\n\x07\x04\x07\x03\0\x02\x01\x03\x12\x03l\x1d\
    \x1e\n\r\n\x06\x04\x07\x03\0\x02\x02\x12\x03m\x08!\n\x0e\n\x07\x04\x07\
    \x03\0\x02\x02\x05\x12\x03m\x08\x0e\n\x0e\n\x07\x04\x07\x03\0\x02\x02\
    \x01\x12\x03m\x0f\x1c\n\x0e\n\x07\x04\x07\x03\0\x02\x02\x03\x12\x03m\x1f\
    \x20\n\x0b\n\x04\x04\x07\x02\0\x12\x03p\x04\"\n\x0c\n\x05\x04\x07\x02\0\
    \x04\x12\x03p\x04\x0c\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03p\r\x14\n\x0c\
    \n\x05\x04\x07\x02\0\x01\x12\x03p\x15\x1d\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03p\x20!\n[\n\x02\x04\x08\x12\x04t\0x\x01\x1aO\x20Request\x20to\
    \x20create\x20an\x20invite\x20payload,\x20and\x20store\x20the\x20topic\
    \x20keys\x20in\x20the\x20Keystore\n\n\n\n\x03\x04\x08\x01\x12\x03t\x08\
    \x1b\n\x0b\n\x04\x04\x08\x02\0\x12\x03u\x04;\n\x0c\n\x05\x04\x08\x02\0\
    \x06\x12\x03u\x04.\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03u/6\n\x0c\n\x05\
    \x04\x08\x02\0\x03\x12\x03u9:\n\x0b\n\x04\x04\x08\x02\x01\x12\x03v\x04>\
    \n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03v\x04/\n\x0c\n\x05\x04\x08\x02\
    \x01\x01\x12\x03v09\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03v<=\n\x0b\n\
    \x04\x04\x08\x02\x02\x12\x03w\x04\x1a\n\x0c\n\x05\x04\x08\x02\x02\x05\
    \x12\x03w\x04\n\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03w\x0b\x15\n\x0c\n\
    \x05\x04\x08\x02\x02\x03\x12\x03w\x18\x19\n/\n\x02\x04\t\x12\x04{\0~\x01\
    \x1a#\x20Response\x20to\x20a\x20CreateInviteRequest\n\n\n\n\x03\x04\t\
    \x01\x12\x03{\x08\x1c\n\x0b\n\x04\x04\t\x02\0\x12\x03|\x04+\n\x0c\n\x05\
    \x04\t\x02\0\x06\x12\x03|\x04\x19\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03|\
    \x1a&\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03|)*\n\x0b\n\x04\x04\t\x02\x01\
    \x12\x03}\x04\x16\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03}\x04\t\n\x0c\n\
    \x05\x04\t\x02\x01\x01\x12\x03}\n\x11\n\x0c\n\x05\x04\t\x02\x01\x03\x12\
    \x03}\x14\x15\nJ\n\x02\x04\n\x12\x06\x81\x01\0\x8a\x01\x01\x1a<\x20Reque\
    st\x20to\x20save\x20a\x20batch\x20of\x20invite\x20messages\x20to\x20the\
    \x20Keystore\n\n\x0b\n\x03\x04\n\x01\x12\x04\x81\x01\x08\x1a\n.\n\x04\
    \x04\n\x03\0\x12\x06\x83\x01\x04\x87\x01\x05\x1a\x1e\x20Mirrors\x20xmtp.\
    envelope\x20schema\n\n\r\n\x05\x04\n\x03\0\x01\x12\x04\x83\x01\x0c\x13\n\
    \x0e\n\x06\x04\n\x03\0\x02\0\x12\x04\x84\x01\x08!\n\x0f\n\x07\x04\n\x03\
    \0\x02\0\x05\x12\x04\x84\x01\x08\x0e\n\x0f\n\x07\x04\n\x03\0\x02\0\x01\
    \x12\x04\x84\x01\x0f\x1c\n\x0f\n\x07\x04\n\x03\0\x02\0\x03\x12\x04\x84\
    \x01\x1f\x20\n\x0e\n\x06\x04\n\x03\0\x02\x01\x12\x04\x85\x01\x08\x20\n\
    \x0f\n\x07\x04\n\x03\0\x02\x01\x05\x12\x04\x85\x01\x08\x0e\n\x0f\n\x07\
    \x04\n\x03\0\x02\x01\x01\x12\x04\x85\x01\x0f\x1b\n\x0f\n\x07\x04\n\x03\0\
    \x02\x01\x03\x12\x04\x85\x01\x1e\x1f\n\x0e\n\x06\x04\n\x03\0\x02\x02\x12\
    \x04\x86\x01\x08\x1a\n\x0f\n\x07\x04\n\x03\0\x02\x02\x05\x12\x04\x86\x01\
    \x08\r\n\x0f\n\x07\x04\n\x03\0\x02\x02\x01\x12\x04\x86\x01\x0e\x15\n\x0f\
    \n\x07\x04\n\x03\0\x02\x02\x03\x12\x04\x86\x01\x18\x19\n\x0c\n\x04\x04\n\
    \x02\0\x12\x04\x89\x01\x04\"\n\r\n\x05\x04\n\x02\0\x04\x12\x04\x89\x01\
    \x04\x0c\n\r\n\x05\x04\n\x02\0\x06\x12\x04\x89\x01\r\x14\n\r\n\x05\x04\n\
    \x02\0\x01\x12\x04\x89\x01\x15\x1d\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x89\
    \x01\x20!\n0\n\x02\x04\x0b\x12\x06\x8d\x01\0\x9c\x01\x01\x1a\"\x20Respon\
    se\x20to\x20a\x20SaveInvitesRequest\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\
    \x8d\x01\x08\x1b\n#\n\x04\x04\x0b\x03\0\x12\x06\x8f\x01\x04\x99\x01\x05\
    \x1a\x13\x20A\x20single\x20response\n\n\r\n\x05\x04\x0b\x03\0\x01\x12\
    \x04\x8f\x01\x0c\x14\n7\n\x06\x04\x0b\x03\0\x03\0\x12\x06\x91\x01\x08\
    \x93\x01\t\x1a%\x20Wrapper\x20object\x20for\x20success\x20response\n\n\
    \x0f\n\x07\x04\x0b\x03\0\x03\0\x01\x12\x04\x91\x01\x10\x17\n\x10\n\x08\
    \x04\x0b\x03\0\x03\0\x02\0\x12\x04\x92\x01\x0c3\n\x11\n\t\x04\x0b\x03\0\
    \x03\0\x02\0\x06\x12\x04\x92\x01\x0c!\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\
    \0\x01\x12\x04\x92\x01\".\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\0\x03\x12\
    \x04\x92\x0112\n\x10\n\x06\x04\x0b\x03\0\x08\0\x12\x06\x95\x01\x08\x98\
    \x01\t\n\x0f\n\x07\x04\x0b\x03\0\x08\0\x01\x12\x04\x95\x01\x0e\x16\n\x0e\
    \n\x06\x04\x0b\x03\0\x02\0\x12\x04\x96\x01\x0c\x1f\n\x0f\n\x07\x04\x0b\
    \x03\0\x02\0\x06\x12\x04\x96\x01\x0c\x13\n\x0f\n\x07\x04\x0b\x03\0\x02\0\
    \x01\x12\x04\x96\x01\x14\x1a\n\x0f\n\x07\x04\x0b\x03\0\x02\0\x03\x12\x04\
    \x96\x01\x1d\x1e\n\x0e\n\x06\x04\x0b\x03\0\x02\x01\x12\x04\x97\x01\x0c$\
    \n\x0f\n\x07\x04\x0b\x03\0\x02\x01\x06\x12\x04\x97\x01\x0c\x19\n\x0f\n\
    \x07\x04\x0b\x03\0\x02\x01\x01\x12\x04\x97\x01\x1a\x1f\n\x0f\n\x07\x04\
    \x0b\x03\0\x02\x01\x03\x12\x04\x97\x01\"#\n\x0c\n\x04\x04\x0b\x02\0\x12\
    \x04\x9b\x01\x04$\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\x9b\x01\x04\x0c\n\
    \r\n\x05\x04\x0b\x02\0\x06\x12\x04\x9b\x01\r\x15\n\r\n\x05\x04\x0b\x02\0\
    \x01\x12\x04\x9b\x01\x16\x1f\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x9b\x01\
    \"#\nB\n\x02\x04\x0c\x12\x06\x9f\x01\0\xa7\x01\x01\x1a4\x20A\x20mapping\
    \x20of\x20topics\x20to\x20their\x20decrypted\x20invitations\n\n\x0b\n\
    \x03\x04\x0c\x01\x12\x04\x9f\x01\x08\x10\nQ\n\x04\x04\x0c\x03\0\x12\x06\
    \xa1\x01\x04\xa5\x01\x05\x1aA\x20TopicData\x20wraps\x20the\x20invitation\
    \x20and\x20the\x20timestamp\x20it\x20was\x20created\n\n\r\n\x05\x04\x0c\
    \x03\0\x01\x12\x04\xa1\x01\x0c\x15\n\x0e\n\x06\x04\x0c\x03\0\x02\0\x12\
    \x04\xa2\x01\x08\x1e\n\x0f\n\x07\x04\x0c\x03\0\x02\0\x05\x12\x04\xa2\x01\
    \x08\x0e\n\x0f\n\x07\x04\x0c\x03\0\x02\0\x01\x12\x04\xa2\x01\x0f\x19\n\
    \x0f\n\x07\x04\x0c\x03\0\x02\0\x03\x12\x04\xa2\x01\x1c\x1d\n\x0e\n\x06\
    \x04\x0c\x03\0\x02\x01\x12\x04\xa3\x01\x08\x20\n\x0f\n\x07\x04\x0c\x03\0\
    \x02\x01\x05\x12\x04\xa3\x01\x08\x0e\n\x0f\n\x07\x04\x0c\x03\0\x02\x01\
    \x01\x12\x04\xa3\x01\x0f\x1b\n\x0f\n\x07\x04\x0c\x03\0\x02\x01\x03\x12\
    \x04\xa3\x01\x1e\x1f\n\x0e\n\x06\x04\x0c\x03\0\x02\x02\x12\x04\xa4\x01\
    \x08:\n\x0f\n\x07\x04\x0c\x03\0\x02\x02\x06\x12\x04\xa4\x01\x08*\n\x0f\n\
    \x07\x04\x0c\x03\0\x02\x02\x01\x12\x04\xa4\x01+5\n\x0f\n\x07\x04\x0c\x03\
    \0\x02\x02\x03\x12\x04\xa4\x0189\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xa6\
    \x01\x04&\n\r\n\x05\x04\x0c\x02\0\x06\x12\x04\xa6\x01\x04\x1a\n\r\n\x05\
    \x04\x0c\x02\0\x01\x12\x04\xa6\x01\x1b!\n\r\n\x05\x04\x0c\x02\0\x03\x12\
    \x04\xa6\x01$%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ciphertext::file_descriptor().clone());
            deps.push(super::invitation::file_descriptor().clone());
            deps.push(super::public_key::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(25);
            messages.push(KeystoreError::generated_message_descriptor_data());
            messages.push(ConversationReference::generated_message_descriptor_data());
            messages.push(DecryptV1Request::generated_message_descriptor_data());
            messages.push(DecryptResponse::generated_message_descriptor_data());
            messages.push(DecryptV2Request::generated_message_descriptor_data());
            messages.push(EncryptV1Request::generated_message_descriptor_data());
            messages.push(EncryptResponse::generated_message_descriptor_data());
            messages.push(EncryptV2Request::generated_message_descriptor_data());
            messages.push(CreateInviteRequest::generated_message_descriptor_data());
            messages.push(CreateInviteResponse::generated_message_descriptor_data());
            messages.push(SaveInvitesRequest::generated_message_descriptor_data());
            messages.push(SaveInvitesResponse::generated_message_descriptor_data());
            messages.push(TopicMap::generated_message_descriptor_data());
            messages.push(decrypt_v1request::Request::generated_message_descriptor_data());
            messages.push(decrypt_response::Response::generated_message_descriptor_data());
            messages.push(decrypt_response::response::Success::generated_message_descriptor_data());
            messages.push(decrypt_v2request::Request::generated_message_descriptor_data());
            messages.push(encrypt_v1request::Request::generated_message_descriptor_data());
            messages.push(encrypt_response::Response::generated_message_descriptor_data());
            messages.push(encrypt_response::response::Success::generated_message_descriptor_data());
            messages.push(encrypt_v2request::Request::generated_message_descriptor_data());
            messages.push(save_invites_request::Request::generated_message_descriptor_data());
            messages.push(save_invites_response::Response::generated_message_descriptor_data());
            messages.push(save_invites_response::response::Success::generated_message_descriptor_data());
            messages.push(topic_map::TopicData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ErrorCode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
