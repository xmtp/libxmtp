// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/private_key.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  PrivateKey generalized to support different key types
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.SignedPrivateKey)
pub struct SignedPrivateKey {
    // message fields
    ///  time the key was created
    // @@protoc_insertion_point(field:xmtp.message_contents.SignedPrivateKey.created_ns)
    pub created_ns: u64,
    ///  public key for this private key
    // @@protoc_insertion_point(field:xmtp.message_contents.SignedPrivateKey.public_key)
    pub public_key: ::protobuf::MessageField<super::public_key::SignedPublicKey>,
    // message oneof groups
    pub union: ::std::option::Option<signed_private_key::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.SignedPrivateKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedPrivateKey {
    fn default() -> &'a SignedPrivateKey {
        <SignedPrivateKey as ::protobuf::Message>::default_instance()
    }
}

impl SignedPrivateKey {
    pub fn new() -> SignedPrivateKey {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.SignedPrivateKey.Secp256k1 secp256k1 = 2;

    pub fn secp256k1(&self) -> &signed_private_key::Secp256k1 {
        match self.union {
            ::std::option::Option::Some(signed_private_key::Union::Secp256k1(ref v)) => v,
            _ => <signed_private_key::Secp256k1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_secp256k1(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_secp256k1(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(signed_private_key::Union::Secp256k1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_secp256k1(&mut self, v: signed_private_key::Secp256k1) {
        self.union = ::std::option::Option::Some(signed_private_key::Union::Secp256k1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_secp256k1(&mut self) -> &mut signed_private_key::Secp256k1 {
        if let ::std::option::Option::Some(signed_private_key::Union::Secp256k1(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(signed_private_key::Union::Secp256k1(signed_private_key::Secp256k1::new()));
        }
        match self.union {
            ::std::option::Option::Some(signed_private_key::Union::Secp256k1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_secp256k1(&mut self) -> signed_private_key::Secp256k1 {
        if self.has_secp256k1() {
            match self.union.take() {
                ::std::option::Option::Some(signed_private_key::Union::Secp256k1(v)) => v,
                _ => panic!(),
            }
        } else {
            signed_private_key::Secp256k1::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_ns",
            |m: &SignedPrivateKey| { &m.created_ns },
            |m: &mut SignedPrivateKey| { &mut m.created_ns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, signed_private_key::Secp256k1>(
            "secp256k1",
            SignedPrivateKey::has_secp256k1,
            SignedPrivateKey::secp256k1,
            SignedPrivateKey::mut_secp256k1,
            SignedPrivateKey::set_secp256k1,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::SignedPublicKey>(
            "public_key",
            |m: &SignedPrivateKey| { &m.public_key },
            |m: &mut SignedPrivateKey| { &mut m.public_key },
        ));
        oneofs.push(signed_private_key::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedPrivateKey>(
            "SignedPrivateKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedPrivateKey {
    const NAME: &'static str = "SignedPrivateKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.created_ns = is.read_uint64()?;
                },
                18 => {
                    self.union = ::std::option::Option::Some(signed_private_key::Union::Secp256k1(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.public_key)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.created_ns != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.created_ns);
        }
        if let Some(v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &signed_private_key::Union::Secp256k1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.created_ns != 0 {
            os.write_uint64(1, self.created_ns)?;
        }
        if let Some(v) = self.public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &signed_private_key::Union::Secp256k1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedPrivateKey {
        SignedPrivateKey::new()
    }

    fn clear(&mut self) {
        self.created_ns = 0;
        self.union = ::std::option::Option::None;
        self.public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedPrivateKey {
        static instance: SignedPrivateKey = SignedPrivateKey {
            created_ns: 0,
            public_key: ::protobuf::MessageField::none(),
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedPrivateKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedPrivateKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedPrivateKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedPrivateKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SignedPrivateKey`
pub mod signed_private_key {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.SignedPrivateKey.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.SignedPrivateKey.secp256k1)
        Secp256k1(Secp256k1),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SignedPrivateKey as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
    ///  EC: SECP256k1
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.SignedPrivateKey.Secp256k1)
    pub struct Secp256k1 {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.SignedPrivateKey.Secp256k1.bytes)
        pub bytes: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.SignedPrivateKey.Secp256k1.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Secp256k1 {
        fn default() -> &'a Secp256k1 {
            <Secp256k1 as ::protobuf::Message>::default_instance()
        }
    }

    impl Secp256k1 {
        pub fn new() -> Secp256k1 {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "bytes",
                |m: &Secp256k1| { &m.bytes },
                |m: &mut Secp256k1| { &mut m.bytes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Secp256k1>(
                "SignedPrivateKey.Secp256k1",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Secp256k1 {
        const NAME: &'static str = "Secp256k1";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.bytes = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.bytes);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.bytes.is_empty() {
                os.write_bytes(1, &self.bytes)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Secp256k1 {
            Secp256k1::new()
        }

        fn clear(&mut self) {
            self.bytes.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Secp256k1 {
            static instance: Secp256k1 = Secp256k1 {
                bytes: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Secp256k1 {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SignedPrivateKey.Secp256k1").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Secp256k1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Secp256k1 {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  PrivateKeyBundle wraps the identityKey and the preKeys,
///  enforces usage of signed keys.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.PrivateKeyBundleV2)
pub struct PrivateKeyBundleV2 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.PrivateKeyBundleV2.identity_key)
    pub identity_key: ::protobuf::MessageField<SignedPrivateKey>,
    ///  all the known pre-keys, newer keys first,
    // @@protoc_insertion_point(field:xmtp.message_contents.PrivateKeyBundleV2.pre_keys)
    pub pre_keys: ::std::vec::Vec<SignedPrivateKey>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.PrivateKeyBundleV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PrivateKeyBundleV2 {
    fn default() -> &'a PrivateKeyBundleV2 {
        <PrivateKeyBundleV2 as ::protobuf::Message>::default_instance()
    }
}

impl PrivateKeyBundleV2 {
    pub fn new() -> PrivateKeyBundleV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SignedPrivateKey>(
            "identity_key",
            |m: &PrivateKeyBundleV2| { &m.identity_key },
            |m: &mut PrivateKeyBundleV2| { &mut m.identity_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pre_keys",
            |m: &PrivateKeyBundleV2| { &m.pre_keys },
            |m: &mut PrivateKeyBundleV2| { &mut m.pre_keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrivateKeyBundleV2>(
            "PrivateKeyBundleV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PrivateKeyBundleV2 {
    const NAME: &'static str = "PrivateKeyBundleV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.identity_key)?;
                },
                18 => {
                    self.pre_keys.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.identity_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.pre_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.identity_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.pre_keys {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PrivateKeyBundleV2 {
        PrivateKeyBundleV2::new()
    }

    fn clear(&mut self) {
        self.identity_key.clear();
        self.pre_keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PrivateKeyBundleV2 {
        static instance: PrivateKeyBundleV2 = PrivateKeyBundleV2 {
            identity_key: ::protobuf::MessageField::none(),
            pre_keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PrivateKeyBundleV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PrivateKeyBundleV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PrivateKeyBundleV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrivateKeyBundleV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  LEGACY: PrivateKey generalized to support different key types
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.PrivateKey)
pub struct PrivateKey {
    // message fields
    ///  time the key was created
    // @@protoc_insertion_point(field:xmtp.message_contents.PrivateKey.timestamp)
    pub timestamp: u64,
    ///  public key for this private key
    // @@protoc_insertion_point(field:xmtp.message_contents.PrivateKey.public_key)
    pub public_key: ::protobuf::MessageField<super::public_key::PublicKey>,
    // message oneof groups
    pub union: ::std::option::Option<private_key::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.PrivateKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PrivateKey {
    fn default() -> &'a PrivateKey {
        <PrivateKey as ::protobuf::Message>::default_instance()
    }
}

impl PrivateKey {
    pub fn new() -> PrivateKey {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.PrivateKey.Secp256k1 secp256k1 = 2;

    pub fn secp256k1(&self) -> &private_key::Secp256k1 {
        match self.union {
            ::std::option::Option::Some(private_key::Union::Secp256k1(ref v)) => v,
            _ => <private_key::Secp256k1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_secp256k1(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_secp256k1(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(private_key::Union::Secp256k1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_secp256k1(&mut self, v: private_key::Secp256k1) {
        self.union = ::std::option::Option::Some(private_key::Union::Secp256k1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_secp256k1(&mut self) -> &mut private_key::Secp256k1 {
        if let ::std::option::Option::Some(private_key::Union::Secp256k1(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(private_key::Union::Secp256k1(private_key::Secp256k1::new()));
        }
        match self.union {
            ::std::option::Option::Some(private_key::Union::Secp256k1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_secp256k1(&mut self) -> private_key::Secp256k1 {
        if self.has_secp256k1() {
            match self.union.take() {
                ::std::option::Option::Some(private_key::Union::Secp256k1(v)) => v,
                _ => panic!(),
            }
        } else {
            private_key::Secp256k1::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &PrivateKey| { &m.timestamp },
            |m: &mut PrivateKey| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, private_key::Secp256k1>(
            "secp256k1",
            PrivateKey::has_secp256k1,
            PrivateKey::secp256k1,
            PrivateKey::mut_secp256k1,
            PrivateKey::set_secp256k1,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::PublicKey>(
            "public_key",
            |m: &PrivateKey| { &m.public_key },
            |m: &mut PrivateKey| { &mut m.public_key },
        ));
        oneofs.push(private_key::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrivateKey>(
            "PrivateKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PrivateKey {
    const NAME: &'static str = "PrivateKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.timestamp = is.read_uint64()?;
                },
                18 => {
                    self.union = ::std::option::Option::Some(private_key::Union::Secp256k1(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.public_key)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.timestamp);
        }
        if let Some(v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &private_key::Union::Secp256k1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if let Some(v) = self.public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &private_key::Union::Secp256k1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PrivateKey {
        PrivateKey::new()
    }

    fn clear(&mut self) {
        self.timestamp = 0;
        self.union = ::std::option::Option::None;
        self.public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PrivateKey {
        static instance: PrivateKey = PrivateKey {
            timestamp: 0,
            public_key: ::protobuf::MessageField::none(),
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PrivateKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PrivateKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PrivateKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrivateKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PrivateKey`
pub mod private_key {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.PrivateKey.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.PrivateKey.secp256k1)
        Secp256k1(Secp256k1),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PrivateKey as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
    ///  EC: SECP256k1
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.PrivateKey.Secp256k1)
    pub struct Secp256k1 {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.PrivateKey.Secp256k1.bytes)
        pub bytes: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.PrivateKey.Secp256k1.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Secp256k1 {
        fn default() -> &'a Secp256k1 {
            <Secp256k1 as ::protobuf::Message>::default_instance()
        }
    }

    impl Secp256k1 {
        pub fn new() -> Secp256k1 {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "bytes",
                |m: &Secp256k1| { &m.bytes },
                |m: &mut Secp256k1| { &mut m.bytes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Secp256k1>(
                "PrivateKey.Secp256k1",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Secp256k1 {
        const NAME: &'static str = "Secp256k1";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.bytes = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.bytes);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.bytes.is_empty() {
                os.write_bytes(1, &self.bytes)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Secp256k1 {
            Secp256k1::new()
        }

        fn clear(&mut self) {
            self.bytes.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Secp256k1 {
            static instance: Secp256k1 = Secp256k1 {
                bytes: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Secp256k1 {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PrivateKey.Secp256k1").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Secp256k1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Secp256k1 {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  LEGACY: PrivateKeyBundleV1 wraps the identityKey and the preKeys
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.PrivateKeyBundleV1)
pub struct PrivateKeyBundleV1 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.PrivateKeyBundleV1.identity_key)
    pub identity_key: ::protobuf::MessageField<PrivateKey>,
    ///  all the known pre-keys, newer keys first,
    // @@protoc_insertion_point(field:xmtp.message_contents.PrivateKeyBundleV1.pre_keys)
    pub pre_keys: ::std::vec::Vec<PrivateKey>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.PrivateKeyBundleV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PrivateKeyBundleV1 {
    fn default() -> &'a PrivateKeyBundleV1 {
        <PrivateKeyBundleV1 as ::protobuf::Message>::default_instance()
    }
}

impl PrivateKeyBundleV1 {
    pub fn new() -> PrivateKeyBundleV1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PrivateKey>(
            "identity_key",
            |m: &PrivateKeyBundleV1| { &m.identity_key },
            |m: &mut PrivateKeyBundleV1| { &mut m.identity_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pre_keys",
            |m: &PrivateKeyBundleV1| { &m.pre_keys },
            |m: &mut PrivateKeyBundleV1| { &mut m.pre_keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrivateKeyBundleV1>(
            "PrivateKeyBundleV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PrivateKeyBundleV1 {
    const NAME: &'static str = "PrivateKeyBundleV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.identity_key)?;
                },
                18 => {
                    self.pre_keys.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.identity_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.pre_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.identity_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.pre_keys {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PrivateKeyBundleV1 {
        PrivateKeyBundleV1::new()
    }

    fn clear(&mut self) {
        self.identity_key.clear();
        self.pre_keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PrivateKeyBundleV1 {
        static instance: PrivateKeyBundleV1 = PrivateKeyBundleV1 {
            identity_key: ::protobuf::MessageField::none(),
            pre_keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PrivateKeyBundleV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PrivateKeyBundleV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PrivateKeyBundleV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrivateKeyBundleV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Versioned PrivateKeyBundle
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.PrivateKeyBundle)
pub struct PrivateKeyBundle {
    // message oneof groups
    pub version: ::std::option::Option<private_key_bundle::Version>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.PrivateKeyBundle.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PrivateKeyBundle {
    fn default() -> &'a PrivateKeyBundle {
        <PrivateKeyBundle as ::protobuf::Message>::default_instance()
    }
}

impl PrivateKeyBundle {
    pub fn new() -> PrivateKeyBundle {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.PrivateKeyBundleV1 v1 = 1;

    pub fn v1(&self) -> &PrivateKeyBundleV1 {
        match self.version {
            ::std::option::Option::Some(private_key_bundle::Version::V1(ref v)) => v,
            _ => <PrivateKeyBundleV1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v1(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v1(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(private_key_bundle::Version::V1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v1(&mut self, v: PrivateKeyBundleV1) {
        self.version = ::std::option::Option::Some(private_key_bundle::Version::V1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v1(&mut self) -> &mut PrivateKeyBundleV1 {
        if let ::std::option::Option::Some(private_key_bundle::Version::V1(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(private_key_bundle::Version::V1(PrivateKeyBundleV1::new()));
        }
        match self.version {
            ::std::option::Option::Some(private_key_bundle::Version::V1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v1(&mut self) -> PrivateKeyBundleV1 {
        if self.has_v1() {
            match self.version.take() {
                ::std::option::Option::Some(private_key_bundle::Version::V1(v)) => v,
                _ => panic!(),
            }
        } else {
            PrivateKeyBundleV1::new()
        }
    }

    // .xmtp.message_contents.PrivateKeyBundleV2 v2 = 2;

    pub fn v2(&self) -> &PrivateKeyBundleV2 {
        match self.version {
            ::std::option::Option::Some(private_key_bundle::Version::V2(ref v)) => v,
            _ => <PrivateKeyBundleV2 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v2(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v2(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(private_key_bundle::Version::V2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v2(&mut self, v: PrivateKeyBundleV2) {
        self.version = ::std::option::Option::Some(private_key_bundle::Version::V2(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v2(&mut self) -> &mut PrivateKeyBundleV2 {
        if let ::std::option::Option::Some(private_key_bundle::Version::V2(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(private_key_bundle::Version::V2(PrivateKeyBundleV2::new()));
        }
        match self.version {
            ::std::option::Option::Some(private_key_bundle::Version::V2(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v2(&mut self) -> PrivateKeyBundleV2 {
        if self.has_v2() {
            match self.version.take() {
                ::std::option::Option::Some(private_key_bundle::Version::V2(v)) => v,
                _ => panic!(),
            }
        } else {
            PrivateKeyBundleV2::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PrivateKeyBundleV1>(
            "v1",
            PrivateKeyBundle::has_v1,
            PrivateKeyBundle::v1,
            PrivateKeyBundle::mut_v1,
            PrivateKeyBundle::set_v1,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PrivateKeyBundleV2>(
            "v2",
            PrivateKeyBundle::has_v2,
            PrivateKeyBundle::v2,
            PrivateKeyBundle::mut_v2,
            PrivateKeyBundle::set_v2,
        ));
        oneofs.push(private_key_bundle::Version::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrivateKeyBundle>(
            "PrivateKeyBundle",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PrivateKeyBundle {
    const NAME: &'static str = "PrivateKeyBundle";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(private_key_bundle::Version::V1(is.read_message()?));
                },
                18 => {
                    self.version = ::std::option::Option::Some(private_key_bundle::Version::V2(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &private_key_bundle::Version::V1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &private_key_bundle::Version::V2(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &private_key_bundle::Version::V1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &private_key_bundle::Version::V2(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PrivateKeyBundle {
        PrivateKeyBundle::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PrivateKeyBundle {
        static instance: PrivateKeyBundle = PrivateKeyBundle {
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PrivateKeyBundle {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PrivateKeyBundle").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PrivateKeyBundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrivateKeyBundle {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PrivateKeyBundle`
pub mod private_key_bundle {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.PrivateKeyBundle.version)
    pub enum Version {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.PrivateKeyBundle.v1)
        V1(super::PrivateKeyBundleV1),
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.PrivateKeyBundle.v2)
        V2(super::PrivateKeyBundleV2),
    }

    impl ::protobuf::Oneof for Version {
    }

    impl ::protobuf::OneofFull for Version {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PrivateKeyBundle as ::protobuf::MessageFull>::descriptor().oneof_by_name("version").unwrap()).clone()
        }
    }

    impl Version {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Version>("version")
        }
    }
}

///  PrivateKeyBundle encrypted with key material generated by
///  signing a randomly generated "pre-key" with the user's wallet,
///  i.e. EIP-191 signature of a "storage signature" message with
///  the pre-key embedded in it.
///  (see xmtp-js::PrivateKeyBundle.toEncryptedBytes for details)
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.EncryptedPrivateKeyBundleV1)
pub struct EncryptedPrivateKeyBundleV1 {
    // message fields
    ///  randomly generated pre-key 
    // @@protoc_insertion_point(field:xmtp.message_contents.EncryptedPrivateKeyBundleV1.wallet_pre_key)
    pub wallet_pre_key: ::std::vec::Vec<u8>,
    ///  MUST contain encrypted PrivateKeyBundle
    // @@protoc_insertion_point(field:xmtp.message_contents.EncryptedPrivateKeyBundleV1.ciphertext)
    pub ciphertext: ::protobuf::MessageField<super::ciphertext::Ciphertext>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.EncryptedPrivateKeyBundleV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptedPrivateKeyBundleV1 {
    fn default() -> &'a EncryptedPrivateKeyBundleV1 {
        <EncryptedPrivateKeyBundleV1 as ::protobuf::Message>::default_instance()
    }
}

impl EncryptedPrivateKeyBundleV1 {
    pub fn new() -> EncryptedPrivateKeyBundleV1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wallet_pre_key",
            |m: &EncryptedPrivateKeyBundleV1| { &m.wallet_pre_key },
            |m: &mut EncryptedPrivateKeyBundleV1| { &mut m.wallet_pre_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ciphertext::Ciphertext>(
            "ciphertext",
            |m: &EncryptedPrivateKeyBundleV1| { &m.ciphertext },
            |m: &mut EncryptedPrivateKeyBundleV1| { &mut m.ciphertext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptedPrivateKeyBundleV1>(
            "EncryptedPrivateKeyBundleV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptedPrivateKeyBundleV1 {
    const NAME: &'static str = "EncryptedPrivateKeyBundleV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.wallet_pre_key = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ciphertext)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.wallet_pre_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.wallet_pre_key);
        }
        if let Some(v) = self.ciphertext.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.wallet_pre_key.is_empty() {
            os.write_bytes(1, &self.wallet_pre_key)?;
        }
        if let Some(v) = self.ciphertext.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptedPrivateKeyBundleV1 {
        EncryptedPrivateKeyBundleV1::new()
    }

    fn clear(&mut self) {
        self.wallet_pre_key.clear();
        self.ciphertext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptedPrivateKeyBundleV1 {
        static instance: EncryptedPrivateKeyBundleV1 = EncryptedPrivateKeyBundleV1 {
            wallet_pre_key: ::std::vec::Vec::new(),
            ciphertext: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptedPrivateKeyBundleV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptedPrivateKeyBundleV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptedPrivateKeyBundleV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptedPrivateKeyBundleV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Versioned encrypted PrivateKeyBundle
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.EncryptedPrivateKeyBundle)
pub struct EncryptedPrivateKeyBundle {
    // message oneof groups
    pub version: ::std::option::Option<encrypted_private_key_bundle::Version>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.EncryptedPrivateKeyBundle.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptedPrivateKeyBundle {
    fn default() -> &'a EncryptedPrivateKeyBundle {
        <EncryptedPrivateKeyBundle as ::protobuf::Message>::default_instance()
    }
}

impl EncryptedPrivateKeyBundle {
    pub fn new() -> EncryptedPrivateKeyBundle {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.EncryptedPrivateKeyBundleV1 v1 = 1;

    pub fn v1(&self) -> &EncryptedPrivateKeyBundleV1 {
        match self.version {
            ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(ref v)) => v,
            _ => <EncryptedPrivateKeyBundleV1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v1(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v1(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v1(&mut self, v: EncryptedPrivateKeyBundleV1) {
        self.version = ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v1(&mut self) -> &mut EncryptedPrivateKeyBundleV1 {
        if let ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(EncryptedPrivateKeyBundleV1::new()));
        }
        match self.version {
            ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v1(&mut self) -> EncryptedPrivateKeyBundleV1 {
        if self.has_v1() {
            match self.version.take() {
                ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(v)) => v,
                _ => panic!(),
            }
        } else {
            EncryptedPrivateKeyBundleV1::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, EncryptedPrivateKeyBundleV1>(
            "v1",
            EncryptedPrivateKeyBundle::has_v1,
            EncryptedPrivateKeyBundle::v1,
            EncryptedPrivateKeyBundle::mut_v1,
            EncryptedPrivateKeyBundle::set_v1,
        ));
        oneofs.push(encrypted_private_key_bundle::Version::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptedPrivateKeyBundle>(
            "EncryptedPrivateKeyBundle",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptedPrivateKeyBundle {
    const NAME: &'static str = "EncryptedPrivateKeyBundle";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(encrypted_private_key_bundle::Version::V1(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &encrypted_private_key_bundle::Version::V1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &encrypted_private_key_bundle::Version::V1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptedPrivateKeyBundle {
        EncryptedPrivateKeyBundle::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptedPrivateKeyBundle {
        static instance: EncryptedPrivateKeyBundle = EncryptedPrivateKeyBundle {
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptedPrivateKeyBundle {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptedPrivateKeyBundle").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptedPrivateKeyBundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptedPrivateKeyBundle {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EncryptedPrivateKeyBundle`
pub mod encrypted_private_key_bundle {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.EncryptedPrivateKeyBundle.version)
    pub enum Version {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.EncryptedPrivateKeyBundle.v1)
        V1(super::EncryptedPrivateKeyBundleV1),
    }

    impl ::protobuf::Oneof for Version {
    }

    impl ::protobuf::OneofFull for Version {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EncryptedPrivateKeyBundle as ::protobuf::MessageFull>::descriptor().oneof_by_name("version").unwrap()).clone()
        }
    }

    impl Version {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Version>("version")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"message_contents/private_key.proto\x12\x15xmtp.message_contents\x1a!\
    message_contents/ciphertext.proto\x1a!message_contents/public_key.proto\
    \"\xf7\x01\n\x10SignedPrivateKey\x12\x1d\n\ncreated_ns\x18\x01\x20\x01(\
    \x04R\tcreatedNs\x12Q\n\tsecp256k1\x18\x02\x20\x01(\x0b21.xmtp.message_c\
    ontents.SignedPrivateKey.Secp256k1H\0R\tsecp256k1\x12E\n\npublic_key\x18\
    \x03\x20\x01(\x0b2&.xmtp.message_contents.SignedPublicKeyR\tpublicKey\
    \x1a!\n\tSecp256k1\x12\x14\n\x05bytes\x18\x01\x20\x01(\x0cR\x05bytesB\
    \x07\n\x05union\"\xa4\x01\n\x12PrivateKeyBundleV2\x12J\n\x0cidentity_key\
    \x18\x01\x20\x01(\x0b2'.xmtp.message_contents.SignedPrivateKeyR\x0bident\
    ityKey\x12B\n\x08pre_keys\x18\x02\x20\x03(\x0b2'.xmtp.message_contents.S\
    ignedPrivateKeyR\x07preKeys\"\xe4\x01\n\nPrivateKey\x12\x1c\n\ttimestamp\
    \x18\x01\x20\x01(\x04R\ttimestamp\x12K\n\tsecp256k1\x18\x02\x20\x01(\x0b\
    2+.xmtp.message_contents.PrivateKey.Secp256k1H\0R\tsecp256k1\x12?\n\npub\
    lic_key\x18\x03\x20\x01(\x0b2\x20.xmtp.message_contents.PublicKeyR\tpubl\
    icKey\x1a!\n\tSecp256k1\x12\x14\n\x05bytes\x18\x01\x20\x01(\x0cR\x05byte\
    sB\x07\n\x05union\"\x98\x01\n\x12PrivateKeyBundleV1\x12D\n\x0cidentity_k\
    ey\x18\x01\x20\x01(\x0b2!.xmtp.message_contents.PrivateKeyR\x0bidentityK\
    ey\x12<\n\x08pre_keys\x18\x02\x20\x03(\x0b2!.xmtp.message_contents.Priva\
    teKeyR\x07preKeys\"\x97\x01\n\x10PrivateKeyBundle\x12;\n\x02v1\x18\x01\
    \x20\x01(\x0b2).xmtp.message_contents.PrivateKeyBundleV1H\0R\x02v1\x12;\
    \n\x02v2\x18\x02\x20\x01(\x0b2).xmtp.message_contents.PrivateKeyBundleV2\
    H\0R\x02v2B\t\n\x07version\"\x86\x01\n\x1bEncryptedPrivateKeyBundleV1\
    \x12$\n\x0ewallet_pre_key\x18\x01\x20\x01(\x0cR\x0cwalletPreKey\x12A\n\n\
    ciphertext\x18\x02\x20\x01(\x0b2!.xmtp.message_contents.CiphertextR\ncip\
    hertext\"l\n\x19EncryptedPrivateKeyBundle\x12D\n\x02v1\x18\x01\x20\x01(\
    \x0b22.xmtp.message_contents.EncryptedPrivateKeyBundleV1H\0R\x02v1B\t\n\
    \x07versionBO\n\x1forg.xmtp.proto.message.contentsZ,github.com/xmtp/prot\
    o/v3/go/message_contentsJ\xd8\x14\n\x06\x12\x04\x04\0^\x01\n\x99\x01\n\
    \x01\x0c\x12\x03\x04\0\x12\x1a\x8e\x01\x20Private\x20Key\x20Storage\n\n\
    \x20Following\x20definitions\x20are\x20not\x20used\x20in\x20the\x20proto\
    col,\x20instead\n\x20they\x20provide\x20a\x20way\x20for\x20encoding\x20p\
    rivate\x20keys\x20for\x20storage.\n\n\x08\n\x01\x02\x12\x03\x06\0\x1e\n\
    \t\n\x02\x03\0\x12\x03\x08\0+\n\t\n\x02\x03\x01\x12\x03\t\0+\n\x08\n\x01\
    \x08\x12\x03\x0b\0C\n\t\n\x02\x08\x0b\x12\x03\x0b\0C\n\x08\n\x01\x08\x12\
    \x03\x0c\08\n\t\n\x02\x08\x01\x12\x03\x0c\08\nC\n\x02\x04\0\x12\x04\x0f\
    \0\x1f\x01\x1a7\x20PrivateKey\x20generalized\x20to\x20support\x20differe\
    nt\x20key\x20types\n\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08\x18\n'\n\x04\
    \x04\0\x02\0\x12\x03\x11\x04\x1a\x1a\x1a\x20time\x20the\x20key\x20was\
    \x20created\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x11\x04\n\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x11\x0b\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x11\x18\x19\n\x1b\n\x04\x04\0\x08\0\x12\x04\x13\x04\x15\x05\x1a\r\x20pr\
    ivate\x20key\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x13\n\x0f\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x14\x08\x20\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\
    \x14\x08\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x14\x12\x1b\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x14\x1e\x1f\n.\n\x04\x04\0\x02\x02\x12\
    \x03\x17\x04#\x1a!\x20public\x20key\x20for\x20this\x20private\x20key\n\n\
    \x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x17\x04\x13\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x17\x14\x1e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x17!\
    \"\n4\n\x04\x04\0\x03\0\x12\x04\x1c\x04\x1e\x05\x1a\x0f\x20EC:\x20SECP25\
    6k1\n2\x15\x20Supported\x20key\x20types\n\n\x0c\n\x05\x04\0\x03\0\x01\
    \x12\x03\x1c\x0c\x15\n'\n\x06\x04\0\x03\0\x02\0\x12\x03\x1d\x08\x18\"\
    \x18\x20D\x20big-endian,\x2032\x20bytes\n\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x05\x12\x03\x1d\x08\r\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x1d\x0e\
    \x13\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x1d\x16\x17\ne\n\x02\x04\
    \x01\x12\x04#\0'\x01\x1aY\x20PrivateKeyBundle\x20wraps\x20the\x20identit\
    yKey\x20and\x20the\x20preKeys,\n\x20enforces\x20usage\x20of\x20signed\
    \x20keys.\n\n\n\n\x03\x04\x01\x01\x12\x03#\x08\x1a\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03$\x04&\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03$\x04\x14\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03$\x15!\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03$$%\n8\n\x04\x04\x01\x02\x01\x12\x03&\x04+\x1a+\x20all\x20the\
    \x20known\x20pre-keys,\x20newer\x20keys\x20first,\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x04\x12\x03&\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03&\r\
    \x1d\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03&\x1e&\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03&)*\nK\n\x02\x04\x02\x12\x04*\0:\x01\x1a?\x20LEGACY:\
    \x20PrivateKey\x20generalized\x20to\x20support\x20different\x20key\x20ty\
    pes\n\n\n\n\x03\x04\x02\x01\x12\x03*\x08\x12\n'\n\x04\x04\x02\x02\0\x12\
    \x03,\x04\x19\x1a\x1a\x20time\x20the\x20key\x20was\x20created\n\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03,\x0b\x14\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03,\x17\x18\n\x1b\n\x04\
    \x04\x02\x08\0\x12\x04.\x040\x05\x1a\r\x20private\x20key\n\n\x0c\n\x05\
    \x04\x02\x08\0\x01\x12\x03.\n\x0f\n\x0b\n\x04\x04\x02\x02\x01\x12\x03/\
    \x08\x20\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03/\x08\x11\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03/\x12\x1b\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03/\x1e\x1f\n.\n\x04\x04\x02\x02\x02\x12\x032\x04\x1d\x1a!\x20publ\
    ic\x20key\x20for\x20this\x20private\x20key\n\n\x0c\n\x05\x04\x02\x02\x02\
    \x06\x12\x032\x04\r\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x032\x0e\x18\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x032\x1b\x1c\n4\n\x04\x04\x02\x03\0\
    \x12\x047\x049\x05\x1a\x0f\x20EC:\x20SECP256k1\n2\x15\x20Supported\x20ke\
    y\x20types\n\n\x0c\n\x05\x04\x02\x03\0\x01\x12\x037\x0c\x15\n'\n\x06\x04\
    \x02\x03\0\x02\0\x12\x038\x08\x18\"\x18\x20D\x20big-endian,\x2032\x20byt\
    es\n\n\x0e\n\x07\x04\x02\x03\0\x02\0\x05\x12\x038\x08\r\n\x0e\n\x07\x04\
    \x02\x03\0\x02\0\x01\x12\x038\x0e\x13\n\x0e\n\x07\x04\x02\x03\0\x02\0\
    \x03\x12\x038\x16\x17\nN\n\x02\x04\x03\x12\x04=\0A\x01\x1aB\x20LEGACY:\
    \x20PrivateKeyBundleV1\x20wraps\x20the\x20identityKey\x20and\x20the\x20p\
    reKeys\n\n\n\n\x03\x04\x03\x01\x12\x03=\x08\x1a\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03>\x04\x20\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03>\x04\x0e\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03>\x0f\x1b\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03>\x1e\x1f\n8\n\x04\x04\x03\x02\x01\x12\x03@\x04%\x1a+\x20all\x20\
    the\x20known\x20pre-keys,\x20newer\x20keys\x20first,\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x04\x12\x03@\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x03@\r\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03@\x18\x20\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03@#$\n(\n\x02\x04\x04\x12\x04F\0K\x01\x1a\x1c\
    \x20Versioned\x20PrivateKeyBundle\n\n\n\n\x03\x04\x04\x01\x12\x03F\x08\
    \x18\n\x0c\n\x04\x04\x04\x08\0\x12\x04G\x04J\x05\n\x0c\n\x05\x04\x04\x08\
    \0\x01\x12\x03G\n\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x03H\x08\"\n\x0c\n\
    \x05\x04\x04\x02\0\x06\x12\x03H\x08\x1a\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03H\x1b\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03H\x20!\n\x0b\n\
    \x04\x04\x04\x02\x01\x12\x03I\x08\"\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\
    \x03I\x08\x1a\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03I\x1b\x1d\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03I\x20!\n\xa1\x02\n\x02\x04\x05\x12\x04R\
    \0W\x01\x1a\x94\x02\x20PrivateKeyBundle\x20encrypted\x20with\x20key\x20m\
    aterial\x20generated\x20by\n\x20signing\x20a\x20randomly\x20generated\
    \x20\"pre-key\"\x20with\x20the\x20user's\x20wallet,\n\x20i.e.\x20EIP-191\
    \x20signature\x20of\x20a\x20\"storage\x20signature\"\x20message\x20with\
    \n\x20the\x20pre-key\x20embedded\x20in\x20it.\n\x20(see\x20xmtp-js::Priv\
    ateKeyBundle.toEncryptedBytes\x20for\x20details)\n\n\n\n\x03\x04\x05\x01\
    \x12\x03R\x08#\n6\n\x04\x04\x05\x02\0\x12\x03T\x04\x1d\x1a\x1d\x20random\
    ly\x20generated\x20pre-key\x20\n\"\n\x2032\x20bytes\n\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03T\x04\t\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03T\n\
    \x18\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03T\x1b\x1c\n6\n\x04\x04\x05\x02\
    \x01\x12\x03V\x04\x1e\x1a)\x20MUST\x20contain\x20encrypted\x20PrivateKey\
    Bundle\n\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03V\x04\x0e\n\x0c\n\x05\
    \x04\x05\x02\x01\x01\x12\x03V\x0f\x19\n\x0c\n\x05\x04\x05\x02\x01\x03\
    \x12\x03V\x1c\x1d\n2\n\x02\x04\x06\x12\x04Z\0^\x01\x1a&\x20Versioned\x20\
    encrypted\x20PrivateKeyBundle\n\n\n\n\x03\x04\x06\x01\x12\x03Z\x08!\n\
    \x0c\n\x04\x04\x06\x08\0\x12\x04[\x04]\x05\n\x0c\n\x05\x04\x06\x08\0\x01\
    \x12\x03[\n\x11\n\x0b\n\x04\x04\x06\x02\0\x12\x03\\\x08+\n\x0c\n\x05\x04\
    \x06\x02\0\x06\x12\x03\\\x08#\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03\\$&\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03\\)*b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ciphertext::file_descriptor().clone());
            deps.push(super::public_key::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(SignedPrivateKey::generated_message_descriptor_data());
            messages.push(PrivateKeyBundleV2::generated_message_descriptor_data());
            messages.push(PrivateKey::generated_message_descriptor_data());
            messages.push(PrivateKeyBundleV1::generated_message_descriptor_data());
            messages.push(PrivateKeyBundle::generated_message_descriptor_data());
            messages.push(EncryptedPrivateKeyBundleV1::generated_message_descriptor_data());
            messages.push(EncryptedPrivateKeyBundle::generated_message_descriptor_data());
            messages.push(signed_private_key::Secp256k1::generated_message_descriptor_data());
            messages.push(private_key::Secp256k1::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
