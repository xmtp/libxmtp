// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/contact.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  LEGACY: User key bundle V1 using PublicKeys.
///  The PublicKeys MUST be signed.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.ContactBundleV1)
pub struct ContactBundleV1 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.ContactBundleV1.key_bundle)
    pub key_bundle: ::protobuf::MessageField<super::public_key::PublicKeyBundle>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.ContactBundleV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContactBundleV1 {
    fn default() -> &'a ContactBundleV1 {
        <ContactBundleV1 as ::protobuf::Message>::default_instance()
    }
}

impl ContactBundleV1 {
    pub fn new() -> ContactBundleV1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::PublicKeyBundle>(
            "key_bundle",
            |m: &ContactBundleV1| { &m.key_bundle },
            |m: &mut ContactBundleV1| { &mut m.key_bundle },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContactBundleV1>(
            "ContactBundleV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContactBundleV1 {
    const NAME: &'static str = "ContactBundleV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.key_bundle)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key_bundle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key_bundle.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContactBundleV1 {
        ContactBundleV1::new()
    }

    fn clear(&mut self) {
        self.key_bundle.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContactBundleV1 {
        static instance: ContactBundleV1 = ContactBundleV1 {
            key_bundle: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContactBundleV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContactBundleV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContactBundleV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContactBundleV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  User key bundle V2 using SignedPublicKeys.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.ContactBundleV2)
pub struct ContactBundleV2 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.ContactBundleV2.key_bundle)
    pub key_bundle: ::protobuf::MessageField<super::public_key::SignedPublicKeyBundle>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.ContactBundleV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContactBundleV2 {
    fn default() -> &'a ContactBundleV2 {
        <ContactBundleV2 as ::protobuf::Message>::default_instance()
    }
}

impl ContactBundleV2 {
    pub fn new() -> ContactBundleV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::SignedPublicKeyBundle>(
            "key_bundle",
            |m: &ContactBundleV2| { &m.key_bundle },
            |m: &mut ContactBundleV2| { &mut m.key_bundle },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContactBundleV2>(
            "ContactBundleV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContactBundleV2 {
    const NAME: &'static str = "ContactBundleV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.key_bundle)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key_bundle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key_bundle.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContactBundleV2 {
        ContactBundleV2::new()
    }

    fn clear(&mut self) {
        self.key_bundle.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContactBundleV2 {
        static instance: ContactBundleV2 = ContactBundleV2 {
            key_bundle: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContactBundleV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContactBundleV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContactBundleV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContactBundleV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Versioned ContactBundle
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.ContactBundle)
pub struct ContactBundle {
    // message oneof groups
    pub version: ::std::option::Option<contact_bundle::Version>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.ContactBundle.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContactBundle {
    fn default() -> &'a ContactBundle {
        <ContactBundle as ::protobuf::Message>::default_instance()
    }
}

impl ContactBundle {
    pub fn new() -> ContactBundle {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.ContactBundleV1 v1 = 1;

    pub fn v1(&self) -> &ContactBundleV1 {
        match self.version {
            ::std::option::Option::Some(contact_bundle::Version::V1(ref v)) => v,
            _ => <ContactBundleV1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v1(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v1(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(contact_bundle::Version::V1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v1(&mut self, v: ContactBundleV1) {
        self.version = ::std::option::Option::Some(contact_bundle::Version::V1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v1(&mut self) -> &mut ContactBundleV1 {
        if let ::std::option::Option::Some(contact_bundle::Version::V1(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(contact_bundle::Version::V1(ContactBundleV1::new()));
        }
        match self.version {
            ::std::option::Option::Some(contact_bundle::Version::V1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v1(&mut self) -> ContactBundleV1 {
        if self.has_v1() {
            match self.version.take() {
                ::std::option::Option::Some(contact_bundle::Version::V1(v)) => v,
                _ => panic!(),
            }
        } else {
            ContactBundleV1::new()
        }
    }

    // .xmtp.message_contents.ContactBundleV2 v2 = 2;

    pub fn v2(&self) -> &ContactBundleV2 {
        match self.version {
            ::std::option::Option::Some(contact_bundle::Version::V2(ref v)) => v,
            _ => <ContactBundleV2 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v2(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v2(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(contact_bundle::Version::V2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v2(&mut self, v: ContactBundleV2) {
        self.version = ::std::option::Option::Some(contact_bundle::Version::V2(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v2(&mut self) -> &mut ContactBundleV2 {
        if let ::std::option::Option::Some(contact_bundle::Version::V2(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(contact_bundle::Version::V2(ContactBundleV2::new()));
        }
        match self.version {
            ::std::option::Option::Some(contact_bundle::Version::V2(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v2(&mut self) -> ContactBundleV2 {
        if self.has_v2() {
            match self.version.take() {
                ::std::option::Option::Some(contact_bundle::Version::V2(v)) => v,
                _ => panic!(),
            }
        } else {
            ContactBundleV2::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ContactBundleV1>(
            "v1",
            ContactBundle::has_v1,
            ContactBundle::v1,
            ContactBundle::mut_v1,
            ContactBundle::set_v1,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ContactBundleV2>(
            "v2",
            ContactBundle::has_v2,
            ContactBundle::v2,
            ContactBundle::mut_v2,
            ContactBundle::set_v2,
        ));
        oneofs.push(contact_bundle::Version::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContactBundle>(
            "ContactBundle",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContactBundle {
    const NAME: &'static str = "ContactBundle";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(contact_bundle::Version::V1(is.read_message()?));
                },
                18 => {
                    self.version = ::std::option::Option::Some(contact_bundle::Version::V2(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &contact_bundle::Version::V1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &contact_bundle::Version::V2(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &contact_bundle::Version::V1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &contact_bundle::Version::V2(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContactBundle {
        ContactBundle::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContactBundle {
        static instance: ContactBundle = ContactBundle {
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContactBundle {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContactBundle").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContactBundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContactBundle {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ContactBundle`
pub mod contact_bundle {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.ContactBundle.version)
    pub enum Version {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.ContactBundle.v1)
        V1(super::ContactBundleV1),
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.ContactBundle.v2)
        V2(super::ContactBundleV2),
    }

    impl ::protobuf::Oneof for Version {
    }

    impl ::protobuf::OneofFull for Version {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ContactBundle as ::protobuf::MessageFull>::descriptor().oneof_by_name("version").unwrap()).clone()
        }
    }

    impl Version {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Version>("version")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1emessage_contents/contact.proto\x12\x15xmtp.message_contents\x1a!me\
    ssage_contents/public_key.proto\"X\n\x0fContactBundleV1\x12E\n\nkey_bund\
    le\x18\x01\x20\x01(\x0b2&.xmtp.message_contents.PublicKeyBundleR\tkeyBun\
    dle\"^\n\x0fContactBundleV2\x12K\n\nkey_bundle\x18\x01\x20\x01(\x0b2,.xm\
    tp.message_contents.SignedPublicKeyBundleR\tkeyBundle\"\x8e\x01\n\rConta\
    ctBundle\x128\n\x02v1\x18\x01\x20\x01(\x0b2&.xmtp.message_contents.Conta\
    ctBundleV1H\0R\x02v1\x128\n\x02v2\x18\x02\x20\x01(\x0b2&.xmtp.message_co\
    ntents.ContactBundleV2H\0R\x02v2B\t\n\x07versionBO\n\x1forg.xmtp.proto.m\
    essage.contentsZ,github.com/xmtp/proto/v3/go/message_contentsJ\xec\x06\n\
    \x06\x12\x04\x05\0\x1f\x01\n\xc9\x02\n\x01\x0c\x12\x03\x05\0\x12\x1a\xbe\
    \x02\x20Contact\x20Bundles\x20are\x20used\x20to\x20advertise\x20user's\
    \x20public\x20keys\x20on\x20the\x20network.\n\x20They\x20are\x20publishe\
    d\x20in\x20well\x20known\x20topics\x20so\x20that\x20other\x20participant\
    s\n\x20can\x20find\x20them\x20when\x20they\x20wish\x20to\x20communicate\
    \x20with\x20the\x20user.\n\x20The\x20public\x20keys\x20are\x20used\x20to\
    \x20sign\x20messages\x20and\x20to\x20derive\x20encryption\x20keys\n\x20f\
    or\x20some\x20meta-messages,\x20e.g.\x20invitations.\n\n\x08\n\x01\x02\
    \x12\x03\x07\0\x1e\n\t\n\x02\x03\0\x12\x03\t\0+\n\x08\n\x01\x08\x12\x03\
    \x0b\0C\n\t\n\x02\x08\x0b\x12\x03\x0b\0C\n\x08\n\x01\x08\x12\x03\x0c\08\
    \n\t\n\x02\x08\x01\x12\x03\x0c\08\nZ\n\x02\x04\0\x12\x04\x10\0\x12\x01\
    \x1aN\x20LEGACY:\x20User\x20key\x20bundle\x20V1\x20using\x20PublicKeys.\
    \n\x20The\x20PublicKeys\x20MUST\x20be\x20signed.\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x10\x08\x17\n\x0b\n\x04\x04\0\x02\0\x12\x03\x11\x04#\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\x11\x04\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x11\x14\x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x11!\"\n8\n\x02\x04\
    \x01\x12\x04\x15\0\x17\x01\x1a,\x20User\x20key\x20bundle\x20V2\x20using\
    \x20SignedPublicKeys.\n\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\x17\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x16\x04)\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\x16\x04\x19\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x16\x1a$\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x16'(\n%\n\x02\x04\x02\x12\x04\x1a\0\x1f\
    \x01\x1a\x19\x20Versioned\x20ContactBundle\n\n\n\n\x03\x04\x02\x01\x12\
    \x03\x1a\x08\x15\n\x0c\n\x04\x04\x02\x08\0\x12\x04\x1b\x04\x1e\x05\n\x0c\
    \n\x05\x04\x02\x08\0\x01\x12\x03\x1b\n\x11\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x1c\x08\x1f\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1c\x08\x17\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x1c\x18\x1a\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03\x1c\x1d\x1e\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1d\x08\x1f\
    \n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1d\x08\x17\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x1d\x18\x1a\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x1d\x1d\x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::public_key::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(ContactBundleV1::generated_message_descriptor_data());
            messages.push(ContactBundleV2::generated_message_descriptor_data());
            messages.push(ContactBundle::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
