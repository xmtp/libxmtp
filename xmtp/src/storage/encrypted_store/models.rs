use std::time::{SystemTime, UNIX_EPOCH};

use crate::{storage::StorageError, PooledSqliteConnection};

use super::{
    schema::{messages, sessions},
    EncryptedMessageStore,
};
use diesel::prelude::*;

/// Placeholder type for messages returned from the Store.
#[derive(Queryable, Debug)]
pub struct DecryptedMessage {
    pub id: i32,
    pub created_at: i64,
    pub convo_id: String,
    pub addr_from: String,
    pub content: Vec<u8>,
}

/// Placeholder type for messages being inserted into the store. This type is the same as
/// DecryptedMessage expect it does not have an `id` feild. The field is generated by the
/// store when it is inserted.
#[derive(Insertable, Clone, PartialEq, Debug)]
#[diesel(table_name = messages)]
pub struct NewDecryptedMessage {
    pub created_at: i64,
    pub convo_id: String,
    pub addr_from: String,
    pub content: Vec<u8>,
}

impl NewDecryptedMessage {
    pub fn new(convo_id: String, addr_from: String, content: Vec<u8>) -> Self {
        Self {
            created_at: now(),
            convo_id,
            addr_from,
            content,
        }
    }
}
impl PartialEq<DecryptedMessage> for NewDecryptedMessage {
    fn eq(&self, other: &DecryptedMessage) -> bool {
        self.created_at == other.created_at
            && self.convo_id == other.convo_id
            && self.addr_from == other.addr_from
            && self.content == other.content
    }
}

fn now() -> i64 {
    let start = SystemTime::now();
    start
        .duration_since(UNIX_EPOCH)
        .expect("Time went backwards")
        .as_nanos() as i64
}

#[derive(Insertable, Identifiable, Queryable, Clone, PartialEq, Debug)]
#[diesel(table_name = sessions)]
#[diesel(primary_key(session_id))]
pub struct PersistedSession {
    pub session_id: String,
    pub created_at: i64,
    pub peer_address: String,
    pub peer_installation_id: String,
    pub vmac_session_data: Vec<u8>,
}

impl PersistedSession {
    pub fn new(
        session_id: String,
        peer_address: String,
        peer_installation_id: String,
        vmac_session_data: Vec<u8>,
    ) -> Self {
        Self {
            session_id,
            created_at: now(),
            peer_address,
            peer_installation_id,
            vmac_session_data,
        }
    }

    pub fn update_session_data(
        &self,
        new_session_data: Vec<u8>,
        into: &EncryptedMessageStore,
    ) -> Result<Self, StorageError> {
        let conn = &mut into.conn()?;
        use self::sessions::dsl::*;

        diesel::update(self)
            .set(vmac_session_data.eq(new_session_data.clone()))
            .execute(conn)?;

        let mut updated = self.clone();
        updated.vmac_session_data = new_session_data;

        Ok(updated)
    }
}
