use std::time::{SystemTime, UNIX_EPOCH};

use super::{
    schema::{messages, sessions},
    EncryptedMessageStore,
};
use crate::{account::Account, storage::StorageError, Save};

use super::schema::accounts;
use diesel::prelude::*;

/// Placeholder type for messages returned from the Store.
#[derive(Queryable, Debug)]
pub struct DecryptedMessage {
    pub id: i32,
    pub created_at: i64,
    pub convo_id: String,
    pub addr_from: String,
    pub content: Vec<u8>,
}

/// Placeholder type for messages being inserted into the store. This type is the same as
/// DecryptedMessage expect it does not have an `id` feild. The field is generated by the
/// store when it is inserted.
#[derive(Insertable, Clone, PartialEq, Debug)]
#[diesel(table_name = messages)]
pub struct NewDecryptedMessage {
    pub created_at: i64,
    pub convo_id: String,
    pub addr_from: String,
    pub content: Vec<u8>,
}

impl NewDecryptedMessage {
    pub fn new(convo_id: String, addr_from: String, content: Vec<u8>) -> Self {
        Self {
            created_at: now(),
            convo_id,
            addr_from,
            content,
        }
    }
}

impl PartialEq<DecryptedMessage> for NewDecryptedMessage {
    fn eq(&self, other: &DecryptedMessage) -> bool {
        self.created_at == other.created_at
            && self.convo_id == other.convo_id
            && self.addr_from == other.addr_from
            && self.content == other.content
    }
}

fn now() -> i64 {
    let start = SystemTime::now();
    start
        .duration_since(UNIX_EPOCH)
        .expect("Time went backwards")
        .as_nanos() as i64
}

#[derive(Insertable, Identifiable, Queryable, Clone, PartialEq, Debug)]
#[diesel(table_name = sessions)]
#[diesel(primary_key(session_id))]
pub struct Session {
    pub session_id: String,
    pub created_at: i64,
    pub peer_address: String,
    pub peer_installation_id: String,
    pub vmac_session_data: Vec<u8>,
}

impl Session {
    pub fn new(
        session_id: String,
        peer_address: String,
        peer_installation_id: String,
        vmac_session_data: Vec<u8>,
    ) -> Self {
        Self {
            session_id,
            created_at: now(),
            peer_address,
            peer_installation_id,
            vmac_session_data,
        }
    }
}

impl Save<EncryptedMessageStore> for Session {
    fn save(&self, into: &EncryptedMessageStore) -> Result<(), StorageError> {
        let conn = &mut into.conn()?;

        diesel::update(sessions::table)
            .set((
                sessions::vmac_session_data.eq(&self.vmac_session_data),
                sessions::peer_address.eq(&self.peer_address),
                sessions::peer_installation_id.eq(&self.peer_installation_id),
            ))
            .execute(conn)?;

        Ok(())
    }
}

#[derive(Queryable, Debug)]
pub struct StoredAccount {
    pub id: i32,
    pub created_at: i64,
    pub serialized_key: Vec<u8>,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = accounts)]
pub struct NewStoredAccount {
    pub created_at: i64,
    pub serialized_key: Vec<u8>,
}
impl TryFrom<&Account> for NewStoredAccount {
    type Error = StorageError;
    fn try_from(account: &Account) -> Result<Self, StorageError> {
        Ok(Self {
            created_at: now(),
            serialized_key: serde_json::to_vec(account).map_err(|e| {
                StorageError::Store(format!(
                    "could not initialize model:NewStoredAccount -- {}",
                    e
                ))
            })?,
        })
    }
}
