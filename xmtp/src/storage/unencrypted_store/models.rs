use std::time::{SystemTime, UNIX_EPOCH};

use super::schema::messages;
use diesel::prelude::*;

/// Placeholder type for messages returned from the Store.
#[derive(Queryable, Debug)]
pub struct DecryptedMessage {
    pub id: i32,
    pub created_at: i64,
    pub convoid: String,
    pub addr_from: String,
    pub content: String,
}

/// Placeholder type for messages being inserted into the store. This type is the same as
/// DecryptedMessage expect it does not have an `id` feild. The field is generated by the
/// store when it is inserted.
#[derive(Insertable, Clone, PartialEq, Debug)]
#[diesel(table_name = messages)]
pub struct NewDecryptedMessage {
    pub created_at: i64,
    pub convoid: String,
    pub addr_from: String,
    pub content: String,
}

impl NewDecryptedMessage {
    pub fn new(convo_id: String, addr_from: String, content: String) -> Self {
        Self {
            created_at: now(),
            convoid: convo_id,
            addr_from,
            content,
        }
    }
}
impl PartialEq<DecryptedMessage> for NewDecryptedMessage {
    fn eq(&self, other: &DecryptedMessage) -> bool {
        self.created_at == other.created_at
            && self.convoid == other.convoid
            && self.addr_from == other.addr_from
            && self.content == other.content
    }
}

fn now() -> i64 {
    let start = SystemTime::now();
    start
        .duration_since(UNIX_EPOCH)
        .expect("Time went backwards")
        .as_nanos() as i64
}
