[package]
edition = "2021"
license.workspace = true
name = "xmtp_proto"
version.workspace = true

[lints]
workspace = true

[dependencies]
async-trait.workspace = true
derive_builder.workspace = true
ed25519-dalek.workspace = true
futures = { workspace = true }
hex.workspace = true
http = "1.2"
pbjson.workspace = true
pbjson-types.workspace = true
prost = { workspace = true, features = ["derive"] }
serde = { workspace = true }
thiserror.workspace = true
tonic = { workspace = true, default-features = false, features = ["codegen"] }
tracing.workspace = true
xmtp_common.workspace = true
xmtp_configuration.workspace = true
tonic-prost = "0.14"

tokio = { workspace = true, default-features = false, features = [
  "sync",
], optional = true }
openmls_rust_crypto = { workspace = true, optional = true }
mockall = { workspace = true, optional = true }
toxiproxy_rust = { workspace = true, optional = true }
url = { workspace = true, optional = true }


[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
openmls = { workspace = true }
tonic = { workspace = true, features = ["codegen", "server", "channel"] }

[dev-dependencies]
mockall = { workspace = true }
url = { workspace = true }
tokio = { workspace = true, default-features = false, features = ["sync"] }
toxiproxy_rust = { workspace = true }
xmtp_configuration = { workspace = true, features = ["test-utils"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
openmls = { workspace = true, features = ["js"] }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test.workspace = true

[build-dependencies]
tonic-prost-build = "0.14"
walkdir = "2.5"
color-eyre.workspace = true
relative-path = "2"
xshell = "0.2"
pbjson-build = "0.8"
# this puts protoc on path with std::env::set_var("PROTOC", protobuf_src::protoc());
# but takes forever to compile
# protobuf-src = "2.1"

[features]
convert = ["openmls_rust_crypto"]
default = []
test-utils = [
  "xmtp_common/test-utils",
  "xmtp_configuration/test-utils",
  "dep:mockall",
  "dep:tokio",
  "dep:toxiproxy_rust",
  "dep:url",
]
http-api = []
grpc-api = []
