// This file is @generated by prost-build.
/// Contains a batch of serialized Key Packages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateInboxIdKeyPackagesRequest {
    #[prost(message, repeated, tag = "1")]
    pub key_packages: ::prost::alloc::vec::Vec<
        validate_inbox_id_key_packages_request::KeyPackage,
    >,
}
/// Nested message and enum types in `ValidateInboxIdKeyPackagesRequest`.
pub mod validate_inbox_id_key_packages_request {
    /// Wrapper for each key package
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct KeyPackage {
        #[prost(bytes = "vec", tag = "1")]
        pub key_package_bytes_tls_serialized: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "2")]
        pub is_inbox_id_credential: bool,
    }
    impl ::prost::Name for KeyPackage {
        const NAME: &'static str = "KeyPackage";
        const PACKAGE: &'static str = "xmtp.mls_validation.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesRequest.KeyPackage".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesRequest.KeyPackage".into()
        }
    }
}
impl ::prost::Name for ValidateInboxIdKeyPackagesRequest {
    const NAME: &'static str = "ValidateInboxIdKeyPackagesRequest";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesRequest".into()
    }
}
/// Validates a Inbox-ID Key Package Type
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateInboxIdKeyPackagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<
        validate_inbox_id_key_packages_response::Response,
    >,
}
/// Nested message and enum types in `ValidateInboxIdKeyPackagesResponse`.
pub mod validate_inbox_id_key_packages_response {
    /// one response corresponding to information about one key package
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Response {
        #[prost(bool, tag = "1")]
        pub is_ok: bool,
        #[prost(string, tag = "2")]
        pub error_message: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "3")]
        pub credential: ::core::option::Option<
            super::super::super::identity::MlsCredential,
        >,
        #[prost(bytes = "vec", tag = "4")]
        pub installation_public_key: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint64, tag = "5")]
        pub expiration: u64,
    }
    impl ::prost::Name for Response {
        const NAME: &'static str = "Response";
        const PACKAGE: &'static str = "xmtp.mls_validation.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesResponse.Response".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesResponse.Response".into()
        }
    }
}
impl ::prost::Name for ValidateInboxIdKeyPackagesResponse {
    const NAME: &'static str = "ValidateInboxIdKeyPackagesResponse";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.ValidateInboxIdKeyPackagesResponse".into()
    }
}
/// Contains a batch of serialized Key Packages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateKeyPackagesRequest {
    #[prost(message, repeated, tag = "1")]
    pub key_packages: ::prost::alloc::vec::Vec<
        validate_key_packages_request::KeyPackage,
    >,
}
/// Nested message and enum types in `ValidateKeyPackagesRequest`.
pub mod validate_key_packages_request {
    /// Wrapper for each key package
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct KeyPackage {
        #[prost(bytes = "vec", tag = "1")]
        pub key_package_bytes_tls_serialized: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "2")]
        pub is_inbox_id_credential: bool,
    }
    impl ::prost::Name for KeyPackage {
        const NAME: &'static str = "KeyPackage";
        const PACKAGE: &'static str = "xmtp.mls_validation.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls_validation.v1.ValidateKeyPackagesRequest.KeyPackage".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls_validation.v1.ValidateKeyPackagesRequest.KeyPackage".into()
        }
    }
}
impl ::prost::Name for ValidateKeyPackagesRequest {
    const NAME: &'static str = "ValidateKeyPackagesRequest";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.ValidateKeyPackagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.ValidateKeyPackagesRequest".into()
    }
}
/// Response to ValidateKeyPackagesRequest
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateKeyPackagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<
        validate_key_packages_response::ValidationResponse,
    >,
}
/// Nested message and enum types in `ValidateKeyPackagesResponse`.
pub mod validate_key_packages_response {
    /// An individual response to one key package
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ValidationResponse {
        #[prost(bool, tag = "1")]
        pub is_ok: bool,
        #[prost(string, tag = "2")]
        pub error_message: ::prost::alloc::string::String,
        #[prost(bytes = "vec", tag = "3")]
        pub installation_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(string, tag = "4")]
        pub account_address: ::prost::alloc::string::String,
        #[prost(bytes = "vec", tag = "5")]
        pub credential_identity_bytes: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint64, tag = "6")]
        pub expiration: u64,
    }
    impl ::prost::Name for ValidationResponse {
        const NAME: &'static str = "ValidationResponse";
        const PACKAGE: &'static str = "xmtp.mls_validation.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls_validation.v1.ValidateKeyPackagesResponse.ValidationResponse"
                .into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls_validation.v1.ValidateKeyPackagesResponse.ValidationResponse"
                .into()
        }
    }
}
impl ::prost::Name for ValidateKeyPackagesResponse {
    const NAME: &'static str = "ValidateKeyPackagesResponse";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.ValidateKeyPackagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.ValidateKeyPackagesResponse".into()
    }
}
/// Contains a batch of serialized Group Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateGroupMessagesRequest {
    #[prost(message, repeated, tag = "1")]
    pub group_messages: ::prost::alloc::vec::Vec<
        validate_group_messages_request::GroupMessage,
    >,
}
/// Nested message and enum types in `ValidateGroupMessagesRequest`.
pub mod validate_group_messages_request {
    /// Wrapper for each message
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct GroupMessage {
        #[prost(bytes = "vec", tag = "1")]
        pub group_message_bytes_tls_serialized: ::prost::alloc::vec::Vec<u8>,
    }
    impl ::prost::Name for GroupMessage {
        const NAME: &'static str = "GroupMessage";
        const PACKAGE: &'static str = "xmtp.mls_validation.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls_validation.v1.ValidateGroupMessagesRequest.GroupMessage".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls_validation.v1.ValidateGroupMessagesRequest.GroupMessage".into()
        }
    }
}
impl ::prost::Name for ValidateGroupMessagesRequest {
    const NAME: &'static str = "ValidateGroupMessagesRequest";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.ValidateGroupMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.ValidateGroupMessagesRequest".into()
    }
}
/// Response to ValidateGroupMessagesRequest
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateGroupMessagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<
        validate_group_messages_response::ValidationResponse,
    >,
}
/// Nested message and enum types in `ValidateGroupMessagesResponse`.
pub mod validate_group_messages_response {
    /// An individual response to one message
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ValidationResponse {
        #[prost(bool, tag = "1")]
        pub is_ok: bool,
        #[prost(string, tag = "2")]
        pub error_message: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub group_id: ::prost::alloc::string::String,
        #[prost(bool, tag = "4")]
        pub is_commit: bool,
    }
    impl ::prost::Name for ValidationResponse {
        const NAME: &'static str = "ValidationResponse";
        const PACKAGE: &'static str = "xmtp.mls_validation.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls_validation.v1.ValidateGroupMessagesResponse.ValidationResponse"
                .into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls_validation.v1.ValidateGroupMessagesResponse.ValidationResponse"
                .into()
        }
    }
}
impl ::prost::Name for ValidateGroupMessagesResponse {
    const NAME: &'static str = "ValidateGroupMessagesResponse";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.ValidateGroupMessagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.ValidateGroupMessagesResponse".into()
    }
}
/// Request to get a final association state for identity updates
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAssociationStateRequest {
    /// List of identity updates
    #[prost(message, repeated, tag = "1")]
    pub old_updates: ::prost::alloc::vec::Vec<
        super::super::identity::associations::IdentityUpdate,
    >,
    #[prost(message, repeated, tag = "2")]
    pub new_updates: ::prost::alloc::vec::Vec<
        super::super::identity::associations::IdentityUpdate,
    >,
}
impl ::prost::Name for GetAssociationStateRequest {
    const NAME: &'static str = "GetAssociationStateRequest";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.GetAssociationStateRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.GetAssociationStateRequest".into()
    }
}
/// Response to GetAssociationStateRequest, containing the final association state
/// for an InboxID
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAssociationStateResponse {
    #[prost(message, optional, tag = "1")]
    pub association_state: ::core::option::Option<
        super::super::identity::associations::AssociationState,
    >,
    #[prost(message, optional, tag = "2")]
    pub state_diff: ::core::option::Option<
        super::super::identity::associations::AssociationStateDiff,
    >,
}
impl ::prost::Name for GetAssociationStateResponse {
    const NAME: &'static str = "GetAssociationStateResponse";
    const PACKAGE: &'static str = "xmtp.mls_validation.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls_validation.v1.GetAssociationStateResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls_validation.v1.GetAssociationStateResponse".into()
    }
}
/// Generated client implementations.
pub mod validation_api_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// RPCs for the new MLS API
    #[derive(Debug, Clone)]
    pub struct ValidationApiClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ValidationApiClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ValidationApiClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ValidationApiClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Validates and parses a group message and returns relevant details
        pub async fn validate_group_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateGroupMessagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls_validation.v1.ValidationApi/ValidateGroupMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.mls_validation.v1.ValidationApi",
                        "ValidateGroupMessages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets the final association state for a batch of identity updates
        pub async fn get_association_state(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAssociationStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAssociationStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls_validation.v1.ValidationApi/GetAssociationState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.mls_validation.v1.ValidationApi",
                        "GetAssociationState",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Validates InboxID key packages and returns credential information for them, without checking
        /// whether an InboxId \<\> InstallationPublicKey pair is really valid.
        pub async fn validate_inbox_id_key_packages(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateKeyPackagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateInboxIdKeyPackagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls_validation.v1.ValidationApi/ValidateInboxIdKeyPackages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.mls_validation.v1.ValidationApi",
                        "ValidateInboxIdKeyPackages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Verifies smart contracts
        /// This request is proxied from the node, so we'll reuse those messages.
        pub async fn verify_smart_contract_wallet_signatures(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::identity::api::v1::VerifySmartContractWalletSignaturesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::identity::api::v1::VerifySmartContractWalletSignaturesResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls_validation.v1.ValidationApi/VerifySmartContractWalletSignatures",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.mls_validation.v1.ValidationApi",
                        "VerifySmartContractWalletSignatures",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(not(target_arch = "wasm32"))]
pub mod validation_api_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ValidationApiServer.
    #[async_trait]
    pub trait ValidationApi: std::marker::Send + std::marker::Sync + 'static {
        /// Validates and parses a group message and returns relevant details
        async fn validate_group_messages(
            &self,
            request: tonic::Request<super::ValidateGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateGroupMessagesResponse>,
            tonic::Status,
        >;
        /// Gets the final association state for a batch of identity updates
        async fn get_association_state(
            &self,
            request: tonic::Request<super::GetAssociationStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAssociationStateResponse>,
            tonic::Status,
        >;
        /// Validates InboxID key packages and returns credential information for them, without checking
        /// whether an InboxId \<\> InstallationPublicKey pair is really valid.
        async fn validate_inbox_id_key_packages(
            &self,
            request: tonic::Request<super::ValidateKeyPackagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateInboxIdKeyPackagesResponse>,
            tonic::Status,
        >;
        /// Verifies smart contracts
        /// This request is proxied from the node, so we'll reuse those messages.
        async fn verify_smart_contract_wallet_signatures(
            &self,
            request: tonic::Request<
                super::super::super::identity::api::v1::VerifySmartContractWalletSignaturesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::identity::api::v1::VerifySmartContractWalletSignaturesResponse,
            >,
            tonic::Status,
        >;
    }
    /// RPCs for the new MLS API
    #[derive(Debug)]
    pub struct ValidationApiServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ValidationApiServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ValidationApiServer<T>
    where
        T: ValidationApi,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/xmtp.mls_validation.v1.ValidationApi/ValidateGroupMessages" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateGroupMessagesSvc<T: ValidationApi>(pub Arc<T>);
                    impl<
                        T: ValidationApi,
                    > tonic::server::UnaryService<super::ValidateGroupMessagesRequest>
                    for ValidateGroupMessagesSvc<T> {
                        type Response = super::ValidateGroupMessagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateGroupMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ValidationApi>::validate_group_messages(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateGroupMessagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls_validation.v1.ValidationApi/GetAssociationState" => {
                    #[allow(non_camel_case_types)]
                    struct GetAssociationStateSvc<T: ValidationApi>(pub Arc<T>);
                    impl<
                        T: ValidationApi,
                    > tonic::server::UnaryService<super::GetAssociationStateRequest>
                    for GetAssociationStateSvc<T> {
                        type Response = super::GetAssociationStateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAssociationStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ValidationApi>::get_association_state(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAssociationStateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls_validation.v1.ValidationApi/ValidateInboxIdKeyPackages" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateInboxIdKeyPackagesSvc<T: ValidationApi>(pub Arc<T>);
                    impl<
                        T: ValidationApi,
                    > tonic::server::UnaryService<super::ValidateKeyPackagesRequest>
                    for ValidateInboxIdKeyPackagesSvc<T> {
                        type Response = super::ValidateInboxIdKeyPackagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateKeyPackagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ValidationApi>::validate_inbox_id_key_packages(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateInboxIdKeyPackagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls_validation.v1.ValidationApi/VerifySmartContractWalletSignatures" => {
                    #[allow(non_camel_case_types)]
                    struct VerifySmartContractWalletSignaturesSvc<T: ValidationApi>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ValidationApi,
                    > tonic::server::UnaryService<
                        super::super::super::identity::api::v1::VerifySmartContractWalletSignaturesRequest,
                    > for VerifySmartContractWalletSignaturesSvc<T> {
                        type Response = super::super::super::identity::api::v1::VerifySmartContractWalletSignaturesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::identity::api::v1::VerifySmartContractWalletSignaturesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ValidationApi>::verify_smart_contract_wallet_signatures(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VerifySmartContractWalletSignaturesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ValidationApiServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "xmtp.mls_validation.v1.ValidationApi";
    impl<T> tonic::server::NamedService for ValidationApiServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
