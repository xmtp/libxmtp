// This file is @generated by prost-build.
/// Query for envelopes, shared by query and subscribe endpoints
/// Either topics or originator_node_ids may be set, but not both
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnvelopesQuery {
    /// Client queries
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub topics: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Node queries
    #[prost(uint32, repeated, tag = "2")]
    pub originator_node_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "3")]
    pub last_seen: ::core::option::Option<super::envelopes::Cursor>,
}
impl ::prost::Name for EnvelopesQuery {
    const NAME: &'static str = "EnvelopesQuery";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.EnvelopesQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.EnvelopesQuery".into()
    }
}
/// Batch subscribe to envelopes
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeEnvelopesRequest {
    #[prost(message, optional, tag = "1")]
    pub query: ::core::option::Option<EnvelopesQuery>,
}
impl ::prost::Name for SubscribeEnvelopesRequest {
    const NAME: &'static str = "SubscribeEnvelopesRequest";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.SubscribeEnvelopesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.SubscribeEnvelopesRequest".into()
    }
}
/// Streamed response for batch subscribe - can be multiple envelopes at once
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeEnvelopesResponse {
    #[prost(message, repeated, tag = "1")]
    pub envelopes: ::prost::alloc::vec::Vec<super::envelopes::OriginatorEnvelope>,
}
impl ::prost::Name for SubscribeEnvelopesResponse {
    const NAME: &'static str = "SubscribeEnvelopesResponse";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.SubscribeEnvelopesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.SubscribeEnvelopesResponse".into()
    }
}
/// Query envelopes request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEnvelopesRequest {
    #[prost(message, optional, tag = "1")]
    pub query: ::core::option::Option<EnvelopesQuery>,
    #[prost(uint32, tag = "2")]
    pub limit: u32,
}
impl ::prost::Name for QueryEnvelopesRequest {
    const NAME: &'static str = "QueryEnvelopesRequest";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.QueryEnvelopesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.QueryEnvelopesRequest".into()
    }
}
/// Query envelopes response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEnvelopesResponse {
    #[prost(message, repeated, tag = "1")]
    pub envelopes: ::prost::alloc::vec::Vec<super::envelopes::OriginatorEnvelope>,
}
impl ::prost::Name for QueryEnvelopesResponse {
    const NAME: &'static str = "QueryEnvelopesResponse";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.QueryEnvelopesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.QueryEnvelopesResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishPayerEnvelopesRequest {
    #[prost(message, repeated, tag = "1")]
    pub payer_envelopes: ::prost::alloc::vec::Vec<super::envelopes::PayerEnvelope>,
}
impl ::prost::Name for PublishPayerEnvelopesRequest {
    const NAME: &'static str = "PublishPayerEnvelopesRequest";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.PublishPayerEnvelopesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.PublishPayerEnvelopesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishPayerEnvelopesResponse {
    #[prost(message, repeated, tag = "1")]
    pub originator_envelopes: ::prost::alloc::vec::Vec<
        super::envelopes::OriginatorEnvelope,
    >,
}
impl ::prost::Name for PublishPayerEnvelopesResponse {
    const NAME: &'static str = "PublishPayerEnvelopesResponse";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.PublishPayerEnvelopesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.PublishPayerEnvelopesResponse".into()
    }
}
/// Request to retrieve the XIDs for the given addresses
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInboxIdsRequest {
    #[prost(message, repeated, tag = "1")]
    pub requests: ::prost::alloc::vec::Vec<get_inbox_ids_request::Request>,
}
/// Nested message and enum types in `GetInboxIdsRequest`.
pub mod get_inbox_ids_request {
    /// A single request for a given address
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Request {
        #[prost(string, tag = "1")]
        pub identifier: ::prost::alloc::string::String,
        #[prost(
            enumeration = "super::super::super::identity::associations::IdentifierKind",
            tag = "2"
        )]
        pub identifier_kind: i32,
    }
    impl ::prost::Name for Request {
        const NAME: &'static str = "Request";
        const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.xmtpv4.message_api.GetInboxIdsRequest.Request".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.xmtpv4.message_api.GetInboxIdsRequest.Request".into()
        }
    }
}
impl ::prost::Name for GetInboxIdsRequest {
    const NAME: &'static str = "GetInboxIdsRequest";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.GetInboxIdsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.GetInboxIdsRequest".into()
    }
}
/// Response with the XIDs for the requested addresses
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInboxIdsResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<get_inbox_ids_response::Response>,
}
/// Nested message and enum types in `GetInboxIdsResponse`.
pub mod get_inbox_ids_response {
    /// A single response for a given address
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Response {
        #[prost(string, tag = "1")]
        pub identifier: ::prost::alloc::string::String,
        #[prost(string, optional, tag = "2")]
        pub inbox_id: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(
            enumeration = "super::super::super::identity::associations::IdentifierKind",
            tag = "3"
        )]
        pub identifier_kind: i32,
    }
    impl ::prost::Name for Response {
        const NAME: &'static str = "Response";
        const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.xmtpv4.message_api.GetInboxIdsResponse.Response".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.xmtpv4.message_api.GetInboxIdsResponse.Response".into()
        }
    }
}
impl ::prost::Name for GetInboxIdsResponse {
    const NAME: &'static str = "GetInboxIdsResponse";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.GetInboxIdsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.GetInboxIdsResponse".into()
    }
}
/// Request to get the newest envelope for a given topic
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetNewestEnvelopeRequest {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub topics: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
impl ::prost::Name for GetNewestEnvelopeRequest {
    const NAME: &'static str = "GetNewestEnvelopeRequest";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.GetNewestEnvelopeRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.GetNewestEnvelopeRequest".into()
    }
}
/// Response to GetNewestEnvelopeRequest
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNewestEnvelopeResponse {
    /// The newest envelope for the given topic OR null if there are no envelopes on the topic
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<get_newest_envelope_response::Response>,
}
/// Nested message and enum types in `GetNewestEnvelopeResponse`.
pub mod get_newest_envelope_response {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Response {
        #[prost(message, optional, tag = "1")]
        pub originator_envelope: ::core::option::Option<
            super::super::envelopes::OriginatorEnvelope,
        >,
    }
    impl ::prost::Name for Response {
        const NAME: &'static str = "Response";
        const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.xmtpv4.message_api.GetNewestEnvelopeResponse.Response".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.xmtpv4.message_api.GetNewestEnvelopeResponse.Response".into()
        }
    }
}
impl ::prost::Name for GetNewestEnvelopeResponse {
    const NAME: &'static str = "GetNewestEnvelopeResponse";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.GetNewestEnvelopeResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.GetNewestEnvelopeResponse".into()
    }
}
/// Generated client implementations.
pub mod replication_api_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ReplicationApiClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ReplicationApiClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ReplicationApiClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ReplicationApiClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn subscribe_envelopes(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeEnvelopesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeEnvelopesResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.xmtpv4.message_api.ReplicationApi/SubscribeEnvelopes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.xmtpv4.message_api.ReplicationApi",
                        "SubscribeEnvelopes",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn query_envelopes(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEnvelopesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryEnvelopesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.xmtpv4.message_api.ReplicationApi/QueryEnvelopes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.xmtpv4.message_api.ReplicationApi",
                        "QueryEnvelopes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn publish_payer_envelopes(
            &mut self,
            request: impl tonic::IntoRequest<super::PublishPayerEnvelopesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublishPayerEnvelopesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.xmtpv4.message_api.ReplicationApi/PublishPayerEnvelopes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.xmtpv4.message_api.ReplicationApi",
                        "PublishPayerEnvelopes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_inbox_ids(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInboxIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInboxIdsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.xmtpv4.message_api.ReplicationApi/GetInboxIds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.xmtpv4.message_api.ReplicationApi",
                        "GetInboxIds",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get the newest envelope for each topic
        pub async fn get_newest_envelope(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNewestEnvelopeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNewestEnvelopeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.xmtpv4.message_api.ReplicationApi/GetNewestEnvelope",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.xmtpv4.message_api.ReplicationApi",
                        "GetNewestEnvelope",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(not(target_arch = "wasm32"))]
pub mod replication_api_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ReplicationApiServer.
    #[async_trait]
    pub trait ReplicationApi: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the SubscribeEnvelopes method.
        type SubscribeEnvelopesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::SubscribeEnvelopesResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        async fn subscribe_envelopes(
            &self,
            request: tonic::Request<super::SubscribeEnvelopesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeEnvelopesStream>,
            tonic::Status,
        >;
        async fn query_envelopes(
            &self,
            request: tonic::Request<super::QueryEnvelopesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryEnvelopesResponse>,
            tonic::Status,
        >;
        async fn publish_payer_envelopes(
            &self,
            request: tonic::Request<super::PublishPayerEnvelopesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublishPayerEnvelopesResponse>,
            tonic::Status,
        >;
        async fn get_inbox_ids(
            &self,
            request: tonic::Request<super::GetInboxIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInboxIdsResponse>,
            tonic::Status,
        >;
        /// Get the newest envelope for each topic
        async fn get_newest_envelope(
            &self,
            request: tonic::Request<super::GetNewestEnvelopeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNewestEnvelopeResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ReplicationApiServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ReplicationApiServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ReplicationApiServer<T>
    where
        T: ReplicationApi,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/xmtp.xmtpv4.message_api.ReplicationApi/SubscribeEnvelopes" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeEnvelopesSvc<T: ReplicationApi>(pub Arc<T>);
                    impl<
                        T: ReplicationApi,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeEnvelopesRequest,
                    > for SubscribeEnvelopesSvc<T> {
                        type Response = super::SubscribeEnvelopesResponse;
                        type ResponseStream = T::SubscribeEnvelopesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeEnvelopesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReplicationApi>::subscribe_envelopes(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeEnvelopesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.xmtpv4.message_api.ReplicationApi/QueryEnvelopes" => {
                    #[allow(non_camel_case_types)]
                    struct QueryEnvelopesSvc<T: ReplicationApi>(pub Arc<T>);
                    impl<
                        T: ReplicationApi,
                    > tonic::server::UnaryService<super::QueryEnvelopesRequest>
                    for QueryEnvelopesSvc<T> {
                        type Response = super::QueryEnvelopesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryEnvelopesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReplicationApi>::query_envelopes(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryEnvelopesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.xmtpv4.message_api.ReplicationApi/PublishPayerEnvelopes" => {
                    #[allow(non_camel_case_types)]
                    struct PublishPayerEnvelopesSvc<T: ReplicationApi>(pub Arc<T>);
                    impl<
                        T: ReplicationApi,
                    > tonic::server::UnaryService<super::PublishPayerEnvelopesRequest>
                    for PublishPayerEnvelopesSvc<T> {
                        type Response = super::PublishPayerEnvelopesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublishPayerEnvelopesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReplicationApi>::publish_payer_envelopes(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PublishPayerEnvelopesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.xmtpv4.message_api.ReplicationApi/GetInboxIds" => {
                    #[allow(non_camel_case_types)]
                    struct GetInboxIdsSvc<T: ReplicationApi>(pub Arc<T>);
                    impl<
                        T: ReplicationApi,
                    > tonic::server::UnaryService<super::GetInboxIdsRequest>
                    for GetInboxIdsSvc<T> {
                        type Response = super::GetInboxIdsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetInboxIdsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReplicationApi>::get_inbox_ids(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetInboxIdsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.xmtpv4.message_api.ReplicationApi/GetNewestEnvelope" => {
                    #[allow(non_camel_case_types)]
                    struct GetNewestEnvelopeSvc<T: ReplicationApi>(pub Arc<T>);
                    impl<
                        T: ReplicationApi,
                    > tonic::server::UnaryService<super::GetNewestEnvelopeRequest>
                    for GetNewestEnvelopeSvc<T> {
                        type Response = super::GetNewestEnvelopeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNewestEnvelopeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReplicationApi>::get_newest_envelope(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNewestEnvelopeSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ReplicationApiServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "xmtp.xmtpv4.message_api.ReplicationApi";
    impl<T> tonic::server::NamedService for ReplicationApiServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LivenessFailure {
    #[prost(uint32, tag = "1")]
    pub response_time_ns: u32,
    #[prost(oneof = "liveness_failure::Request", tags = "2, 3, 4")]
    pub request: ::core::option::Option<liveness_failure::Request>,
}
/// Nested message and enum types in `LivenessFailure`.
pub mod liveness_failure {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        #[prost(message, tag = "2")]
        Subscribe(super::SubscribeEnvelopesRequest),
        #[prost(message, tag = "3")]
        Query(super::QueryEnvelopesRequest),
        #[prost(message, tag = "4")]
        Publish(super::PublishPayerEnvelopesRequest),
    }
}
impl ::prost::Name for LivenessFailure {
    const NAME: &'static str = "LivenessFailure";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.LivenessFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.LivenessFailure".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SafetyFailure {
    #[prost(message, repeated, tag = "1")]
    pub envelopes: ::prost::alloc::vec::Vec<super::envelopes::OriginatorEnvelope>,
}
impl ::prost::Name for SafetyFailure {
    const NAME: &'static str = "SafetyFailure";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.SafetyFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.SafetyFailure".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnsignedMisbehaviorReport {
    #[prost(uint64, tag = "1")]
    pub reporter_time_ns: u64,
    #[prost(uint32, tag = "2")]
    pub misbehaving_node_id: u32,
    #[prost(enumeration = "Misbehavior", tag = "3")]
    pub r#type: i32,
    /// Nodes must verify this field is false for client-submitted reports
    #[prost(bool, tag = "6")]
    pub submitted_by_node: bool,
    #[prost(oneof = "unsigned_misbehavior_report::Failure", tags = "4, 5")]
    pub failure: ::core::option::Option<unsigned_misbehavior_report::Failure>,
}
/// Nested message and enum types in `UnsignedMisbehaviorReport`.
pub mod unsigned_misbehavior_report {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Failure {
        #[prost(message, tag = "4")]
        Liveness(super::LivenessFailure),
        #[prost(message, tag = "5")]
        Safety(super::SafetyFailure),
    }
}
impl ::prost::Name for UnsignedMisbehaviorReport {
    const NAME: &'static str = "UnsignedMisbehaviorReport";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.UnsignedMisbehaviorReport".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.UnsignedMisbehaviorReport".into()
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MisbehaviorReport {
    /// Server time when the report was stored. Used only for querying reports.
    /// This field is not signed.
    #[prost(uint64, tag = "1")]
    pub server_time_ns: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub unsigned_misbehavior_report: ::prost::alloc::vec::Vec<u8>,
    /// Signed by the node hosting the report
    #[prost(message, optional, tag = "3")]
    pub signature: ::core::option::Option<
        super::super::identity::associations::RecoverableEcdsaSignature,
    >,
}
impl ::prost::Name for MisbehaviorReport {
    const NAME: &'static str = "MisbehaviorReport";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.MisbehaviorReport".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.MisbehaviorReport".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitMisbehaviorReportRequest {
    #[prost(message, optional, tag = "1")]
    pub report: ::core::option::Option<UnsignedMisbehaviorReport>,
}
impl ::prost::Name for SubmitMisbehaviorReportRequest {
    const NAME: &'static str = "SubmitMisbehaviorReportRequest";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.SubmitMisbehaviorReportRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.SubmitMisbehaviorReportRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubmitMisbehaviorReportResponse {}
impl ::prost::Name for SubmitMisbehaviorReportResponse {
    const NAME: &'static str = "SubmitMisbehaviorReportResponse";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.SubmitMisbehaviorReportResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.SubmitMisbehaviorReportResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryMisbehaviorReportsRequest {
    #[prost(uint64, tag = "1")]
    pub after_ns: u64,
}
impl ::prost::Name for QueryMisbehaviorReportsRequest {
    const NAME: &'static str = "QueryMisbehaviorReportsRequest";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.QueryMisbehaviorReportsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.QueryMisbehaviorReportsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMisbehaviorReportsResponse {
    #[prost(message, repeated, tag = "1")]
    pub reports: ::prost::alloc::vec::Vec<MisbehaviorReport>,
}
impl ::prost::Name for QueryMisbehaviorReportsResponse {
    const NAME: &'static str = "QueryMisbehaviorReportsResponse";
    const PACKAGE: &'static str = "xmtp.xmtpv4.message_api";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.xmtpv4.message_api.QueryMisbehaviorReportsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.xmtpv4.message_api.QueryMisbehaviorReportsResponse".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Misbehavior {
    Unspecified = 0,
    UnresponsiveNode = 1,
    SlowNode = 2,
    FailedRequest = 3,
    OutOfOrder = 4,
    DuplicateSequenceId = 5,
    CausalOrdering = 6,
    InvalidPayload = 7,
    BlockchainInconsistency = 8,
}
impl Misbehavior {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "MISBEHAVIOR_UNSPECIFIED",
            Self::UnresponsiveNode => "MISBEHAVIOR_UNRESPONSIVE_NODE",
            Self::SlowNode => "MISBEHAVIOR_SLOW_NODE",
            Self::FailedRequest => "MISBEHAVIOR_FAILED_REQUEST",
            Self::OutOfOrder => "MISBEHAVIOR_OUT_OF_ORDER",
            Self::DuplicateSequenceId => "MISBEHAVIOR_DUPLICATE_SEQUENCE_ID",
            Self::CausalOrdering => "MISBEHAVIOR_CAUSAL_ORDERING",
            Self::InvalidPayload => "MISBEHAVIOR_INVALID_PAYLOAD",
            Self::BlockchainInconsistency => "MISBEHAVIOR_BLOCKCHAIN_INCONSISTENCY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISBEHAVIOR_UNSPECIFIED" => Some(Self::Unspecified),
            "MISBEHAVIOR_UNRESPONSIVE_NODE" => Some(Self::UnresponsiveNode),
            "MISBEHAVIOR_SLOW_NODE" => Some(Self::SlowNode),
            "MISBEHAVIOR_FAILED_REQUEST" => Some(Self::FailedRequest),
            "MISBEHAVIOR_OUT_OF_ORDER" => Some(Self::OutOfOrder),
            "MISBEHAVIOR_DUPLICATE_SEQUENCE_ID" => Some(Self::DuplicateSequenceId),
            "MISBEHAVIOR_CAUSAL_ORDERING" => Some(Self::CausalOrdering),
            "MISBEHAVIOR_INVALID_PAYLOAD" => Some(Self::InvalidPayload),
            "MISBEHAVIOR_BLOCKCHAIN_INCONSISTENCY" => Some(Self::BlockchainInconsistency),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod misbehavior_api_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MisbehaviorApiClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> MisbehaviorApiClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MisbehaviorApiClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MisbehaviorApiClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn submit_misbehavior_report(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitMisbehaviorReportRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitMisbehaviorReportResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.xmtpv4.message_api.MisbehaviorApi/SubmitMisbehaviorReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.xmtpv4.message_api.MisbehaviorApi",
                        "SubmitMisbehaviorReport",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_misbehavior_reports(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMisbehaviorReportsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMisbehaviorReportsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.xmtpv4.message_api.MisbehaviorApi/QueryMisbehaviorReports",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.xmtpv4.message_api.MisbehaviorApi",
                        "QueryMisbehaviorReports",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(not(target_arch = "wasm32"))]
pub mod misbehavior_api_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MisbehaviorApiServer.
    #[async_trait]
    pub trait MisbehaviorApi: std::marker::Send + std::marker::Sync + 'static {
        async fn submit_misbehavior_report(
            &self,
            request: tonic::Request<super::SubmitMisbehaviorReportRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitMisbehaviorReportResponse>,
            tonic::Status,
        >;
        async fn query_misbehavior_reports(
            &self,
            request: tonic::Request<super::QueryMisbehaviorReportsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMisbehaviorReportsResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MisbehaviorApiServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MisbehaviorApiServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MisbehaviorApiServer<T>
    where
        T: MisbehaviorApi,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/xmtp.xmtpv4.message_api.MisbehaviorApi/SubmitMisbehaviorReport" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitMisbehaviorReportSvc<T: MisbehaviorApi>(pub Arc<T>);
                    impl<
                        T: MisbehaviorApi,
                    > tonic::server::UnaryService<super::SubmitMisbehaviorReportRequest>
                    for SubmitMisbehaviorReportSvc<T> {
                        type Response = super::SubmitMisbehaviorReportResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::SubmitMisbehaviorReportRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MisbehaviorApi>::submit_misbehavior_report(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitMisbehaviorReportSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.xmtpv4.message_api.MisbehaviorApi/QueryMisbehaviorReports" => {
                    #[allow(non_camel_case_types)]
                    struct QueryMisbehaviorReportsSvc<T: MisbehaviorApi>(pub Arc<T>);
                    impl<
                        T: MisbehaviorApi,
                    > tonic::server::UnaryService<super::QueryMisbehaviorReportsRequest>
                    for QueryMisbehaviorReportsSvc<T> {
                        type Response = super::QueryMisbehaviorReportsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryMisbehaviorReportsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MisbehaviorApi>::query_misbehavior_reports(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryMisbehaviorReportsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MisbehaviorApiServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "xmtp.xmtpv4.message_api.MisbehaviorApi";
    impl<T> tonic::server::NamedService for MisbehaviorApiServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
