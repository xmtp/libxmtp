// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifySmartContractWalletSignaturesRequest {
    #[prost(message, repeated, tag = "1")]
    pub signatures: ::prost::alloc::vec::Vec<
        VerifySmartContractWalletSignatureRequestSignature,
    >,
}
impl ::prost::Name for VerifySmartContractWalletSignaturesRequest {
    const NAME: &'static str = "VerifySmartContractWalletSignaturesRequest";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.VerifySmartContractWalletSignaturesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.VerifySmartContractWalletSignaturesRequest".into()
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct VerifySmartContractWalletSignatureRequestSignature {
    /// CAIP-10 string
    /// <https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md>
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Specify the block number to verify the signature against
    #[prost(uint64, optional, tag = "2")]
    pub block_number: ::core::option::Option<u64>,
    /// The signature bytes
    #[prost(bytes = "vec", tag = "3")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for VerifySmartContractWalletSignatureRequestSignature {
    const NAME: &'static str = "VerifySmartContractWalletSignatureRequestSignature";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.VerifySmartContractWalletSignatureRequestSignature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.VerifySmartContractWalletSignatureRequestSignature".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifySmartContractWalletSignaturesResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<
        verify_smart_contract_wallet_signatures_response::ValidationResponse,
    >,
}
/// Nested message and enum types in `VerifySmartContractWalletSignaturesResponse`.
pub mod verify_smart_contract_wallet_signatures_response {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ValidationResponse {
        #[prost(bool, tag = "1")]
        pub is_valid: bool,
        #[prost(uint64, optional, tag = "2")]
        pub block_number: ::core::option::Option<u64>,
        #[prost(string, optional, tag = "3")]
        pub error: ::core::option::Option<::prost::alloc::string::String>,
    }
    impl ::prost::Name for ValidationResponse {
        const NAME: &'static str = "ValidationResponse";
        const PACKAGE: &'static str = "xmtp.identity.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.identity.api.v1.VerifySmartContractWalletSignaturesResponse.ValidationResponse"
                .into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.identity.api.v1.VerifySmartContractWalletSignaturesResponse.ValidationResponse"
                .into()
        }
    }
}
impl ::prost::Name for VerifySmartContractWalletSignaturesResponse {
    const NAME: &'static str = "VerifySmartContractWalletSignaturesResponse";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.VerifySmartContractWalletSignaturesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.VerifySmartContractWalletSignaturesResponse".into()
    }
}
/// Publishes an identity update to the network
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishIdentityUpdateRequest {
    #[prost(message, optional, tag = "1")]
    pub identity_update: ::core::option::Option<
        super::super::associations::IdentityUpdate,
    >,
}
impl ::prost::Name for PublishIdentityUpdateRequest {
    const NAME: &'static str = "PublishIdentityUpdateRequest";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.PublishIdentityUpdateRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.PublishIdentityUpdateRequest".into()
    }
}
/// The response when an identity update is published
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublishIdentityUpdateResponse {}
impl ::prost::Name for PublishIdentityUpdateResponse {
    const NAME: &'static str = "PublishIdentityUpdateResponse";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.PublishIdentityUpdateResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.PublishIdentityUpdateResponse".into()
    }
}
/// Get all updates for an identity since the specified time
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityUpdatesRequest {
    #[prost(message, repeated, tag = "1")]
    pub requests: ::prost::alloc::vec::Vec<get_identity_updates_request::Request>,
}
/// Nested message and enum types in `GetIdentityUpdatesRequest`.
pub mod get_identity_updates_request {
    /// Points to the last entry the client has received. The sequence_id should be
    /// set to 0 if the client has not received anything.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Request {
        #[prost(string, tag = "1")]
        pub inbox_id: ::prost::alloc::string::String,
        #[prost(uint64, tag = "2")]
        pub sequence_id: u64,
    }
    impl ::prost::Name for Request {
        const NAME: &'static str = "Request";
        const PACKAGE: &'static str = "xmtp.identity.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.identity.api.v1.GetIdentityUpdatesRequest.Request".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.identity.api.v1.GetIdentityUpdatesRequest.Request".into()
        }
    }
}
impl ::prost::Name for GetIdentityUpdatesRequest {
    const NAME: &'static str = "GetIdentityUpdatesRequest";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.GetIdentityUpdatesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.GetIdentityUpdatesRequest".into()
    }
}
/// Returns all log entries for the requested identities
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityUpdatesResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<get_identity_updates_response::Response>,
}
/// Nested message and enum types in `GetIdentityUpdatesResponse`.
pub mod get_identity_updates_response {
    /// A single entry in the XID log on the server.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct IdentityUpdateLog {
        #[prost(uint64, tag = "1")]
        pub sequence_id: u64,
        #[prost(uint64, tag = "2")]
        pub server_timestamp_ns: u64,
        #[prost(message, optional, tag = "3")]
        pub update: ::core::option::Option<
            super::super::super::associations::IdentityUpdate,
        >,
    }
    impl ::prost::Name for IdentityUpdateLog {
        const NAME: &'static str = "IdentityUpdateLog";
        const PACKAGE: &'static str = "xmtp.identity.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.identity.api.v1.GetIdentityUpdatesResponse.IdentityUpdateLog".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.identity.api.v1.GetIdentityUpdatesResponse.IdentityUpdateLog".into()
        }
    }
    /// The update log for a single identity, starting after the last cursor
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Response {
        #[prost(string, tag = "1")]
        pub inbox_id: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub updates: ::prost::alloc::vec::Vec<IdentityUpdateLog>,
    }
    impl ::prost::Name for Response {
        const NAME: &'static str = "Response";
        const PACKAGE: &'static str = "xmtp.identity.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.identity.api.v1.GetIdentityUpdatesResponse.Response".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.identity.api.v1.GetIdentityUpdatesResponse.Response".into()
        }
    }
}
impl ::prost::Name for GetIdentityUpdatesResponse {
    const NAME: &'static str = "GetIdentityUpdatesResponse";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.GetIdentityUpdatesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.GetIdentityUpdatesResponse".into()
    }
}
/// Request to retrieve the XIDs for the given addresses
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInboxIdsRequest {
    #[prost(message, repeated, tag = "1")]
    pub requests: ::prost::alloc::vec::Vec<get_inbox_ids_request::Request>,
}
/// Nested message and enum types in `GetInboxIdsRequest`.
pub mod get_inbox_ids_request {
    /// A single request for a given address
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Request {
        #[prost(string, tag = "1")]
        pub identifier: ::prost::alloc::string::String,
        #[prost(
            enumeration = "super::super::super::associations::IdentifierKind",
            tag = "2"
        )]
        pub identifier_kind: i32,
    }
    impl ::prost::Name for Request {
        const NAME: &'static str = "Request";
        const PACKAGE: &'static str = "xmtp.identity.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.identity.api.v1.GetInboxIdsRequest.Request".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.identity.api.v1.GetInboxIdsRequest.Request".into()
        }
    }
}
impl ::prost::Name for GetInboxIdsRequest {
    const NAME: &'static str = "GetInboxIdsRequest";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.GetInboxIdsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.GetInboxIdsRequest".into()
    }
}
/// Response with the XIDs for the requested addresses
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInboxIdsResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<get_inbox_ids_response::Response>,
}
/// Nested message and enum types in `GetInboxIdsResponse`.
pub mod get_inbox_ids_response {
    /// A single response for a given address
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Response {
        #[prost(string, tag = "1")]
        pub identifier: ::prost::alloc::string::String,
        #[prost(string, optional, tag = "2")]
        pub inbox_id: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(
            enumeration = "super::super::super::associations::IdentifierKind",
            tag = "3"
        )]
        pub identifier_kind: i32,
    }
    impl ::prost::Name for Response {
        const NAME: &'static str = "Response";
        const PACKAGE: &'static str = "xmtp.identity.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.identity.api.v1.GetInboxIdsResponse.Response".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.identity.api.v1.GetInboxIdsResponse.Response".into()
        }
    }
}
impl ::prost::Name for GetInboxIdsResponse {
    const NAME: &'static str = "GetInboxIdsResponse";
    const PACKAGE: &'static str = "xmtp.identity.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.api.v1.GetInboxIdsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.api.v1.GetInboxIdsResponse".into()
    }
}
/// Generated client implementations.
pub mod identity_api_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// RPCs for the new MLS API
    #[derive(Debug, Clone)]
    pub struct IdentityApiClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> IdentityApiClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> IdentityApiClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            IdentityApiClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Publishes an identity update for an XID or wallet. An identity update may
        /// consist of multiple identity actions that have been batch signed.
        pub async fn publish_identity_update(
            &mut self,
            request: impl tonic::IntoRequest<super::PublishIdentityUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublishIdentityUpdateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.identity.api.v1.IdentityApi/PublishIdentityUpdate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.identity.api.v1.IdentityApi",
                        "PublishIdentityUpdate",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Used to check for changes related to members of a group.
        /// Would return an array of any new installations associated with the wallet
        /// address, and any revocations that have happened.
        pub async fn get_identity_updates(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityUpdatesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityUpdatesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.identity.api.v1.IdentityApi/GetIdentityUpdates",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.identity.api.v1.IdentityApi",
                        "GetIdentityUpdates",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieve the XIDs for the given addresses
        pub async fn get_inbox_ids(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInboxIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInboxIdsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.identity.api.v1.IdentityApi/GetInboxIds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.identity.api.v1.IdentityApi", "GetInboxIds"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Verify an unverified smart contract wallet signature
        pub async fn verify_smart_contract_wallet_signatures(
            &mut self,
            request: impl tonic::IntoRequest<
                super::VerifySmartContractWalletSignaturesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::VerifySmartContractWalletSignaturesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.identity.api.v1.IdentityApi/VerifySmartContractWalletSignatures",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xmtp.identity.api.v1.IdentityApi",
                        "VerifySmartContractWalletSignatures",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(not(target_arch = "wasm32"))]
pub mod identity_api_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with IdentityApiServer.
    #[async_trait]
    pub trait IdentityApi: std::marker::Send + std::marker::Sync + 'static {
        /// Publishes an identity update for an XID or wallet. An identity update may
        /// consist of multiple identity actions that have been batch signed.
        async fn publish_identity_update(
            &self,
            request: tonic::Request<super::PublishIdentityUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublishIdentityUpdateResponse>,
            tonic::Status,
        >;
        /// Used to check for changes related to members of a group.
        /// Would return an array of any new installations associated with the wallet
        /// address, and any revocations that have happened.
        async fn get_identity_updates(
            &self,
            request: tonic::Request<super::GetIdentityUpdatesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityUpdatesResponse>,
            tonic::Status,
        >;
        /// Retrieve the XIDs for the given addresses
        async fn get_inbox_ids(
            &self,
            request: tonic::Request<super::GetInboxIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInboxIdsResponse>,
            tonic::Status,
        >;
        /// Verify an unverified smart contract wallet signature
        async fn verify_smart_contract_wallet_signatures(
            &self,
            request: tonic::Request<super::VerifySmartContractWalletSignaturesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VerifySmartContractWalletSignaturesResponse>,
            tonic::Status,
        >;
    }
    /// RPCs for the new MLS API
    #[derive(Debug)]
    pub struct IdentityApiServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> IdentityApiServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for IdentityApiServer<T>
    where
        T: IdentityApi,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/xmtp.identity.api.v1.IdentityApi/PublishIdentityUpdate" => {
                    #[allow(non_camel_case_types)]
                    struct PublishIdentityUpdateSvc<T: IdentityApi>(pub Arc<T>);
                    impl<
                        T: IdentityApi,
                    > tonic::server::UnaryService<super::PublishIdentityUpdateRequest>
                    for PublishIdentityUpdateSvc<T> {
                        type Response = super::PublishIdentityUpdateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublishIdentityUpdateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as IdentityApi>::publish_identity_update(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PublishIdentityUpdateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.identity.api.v1.IdentityApi/GetIdentityUpdates" => {
                    #[allow(non_camel_case_types)]
                    struct GetIdentityUpdatesSvc<T: IdentityApi>(pub Arc<T>);
                    impl<
                        T: IdentityApi,
                    > tonic::server::UnaryService<super::GetIdentityUpdatesRequest>
                    for GetIdentityUpdatesSvc<T> {
                        type Response = super::GetIdentityUpdatesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetIdentityUpdatesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as IdentityApi>::get_identity_updates(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIdentityUpdatesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.identity.api.v1.IdentityApi/GetInboxIds" => {
                    #[allow(non_camel_case_types)]
                    struct GetInboxIdsSvc<T: IdentityApi>(pub Arc<T>);
                    impl<
                        T: IdentityApi,
                    > tonic::server::UnaryService<super::GetInboxIdsRequest>
                    for GetInboxIdsSvc<T> {
                        type Response = super::GetInboxIdsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetInboxIdsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as IdentityApi>::get_inbox_ids(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetInboxIdsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.identity.api.v1.IdentityApi/VerifySmartContractWalletSignatures" => {
                    #[allow(non_camel_case_types)]
                    struct VerifySmartContractWalletSignaturesSvc<T: IdentityApi>(
                        pub Arc<T>,
                    );
                    impl<
                        T: IdentityApi,
                    > tonic::server::UnaryService<
                        super::VerifySmartContractWalletSignaturesRequest,
                    > for VerifySmartContractWalletSignaturesSvc<T> {
                        type Response = super::VerifySmartContractWalletSignaturesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::VerifySmartContractWalletSignaturesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as IdentityApi>::verify_smart_contract_wallet_signatures(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VerifySmartContractWalletSignaturesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for IdentityApiServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "xmtp.identity.api.v1.IdentityApi";
    impl<T> tonic::server::NamedService for IdentityApiServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
