// This file is @generated by prost-build.
/// Full representation of a welcome message
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WelcomeMessage {
    #[prost(oneof = "welcome_message::Version", tags = "1")]
    pub version: ::core::option::Option<welcome_message::Version>,
}
/// Nested message and enum types in `WelcomeMessage`.
pub mod welcome_message {
    /// Version 1 of the WelcomeMessage format
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct V1 {
        #[prost(uint64, tag = "1")]
        pub id: u64,
        #[prost(uint64, tag = "2")]
        pub created_ns: u64,
        #[prost(bytes = "vec", tag = "3")]
        pub installation_key: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "4")]
        pub data: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "5")]
        pub hpke_public_key: ::prost::alloc::vec::Vec<u8>,
        #[prost(
            enumeration = "super::super::super::message_contents::WelcomeWrapperAlgorithm",
            tag = "6"
        )]
        pub wrapper_algorithm: i32,
        #[prost(bytes = "vec", tag = "7")]
        pub welcome_metadata: ::prost::alloc::vec::Vec<u8>,
    }
    impl ::prost::Name for V1 {
        const NAME: &'static str = "V1";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.WelcomeMessage.V1".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.WelcomeMessage.V1".into()
        }
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V1(V1),
    }
}
impl ::prost::Name for WelcomeMessage {
    const NAME: &'static str = "WelcomeMessage";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.WelcomeMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.WelcomeMessage".into()
    }
}
/// Input type for a welcome message
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WelcomeMessageInput {
    #[prost(oneof = "welcome_message_input::Version", tags = "1")]
    pub version: ::core::option::Option<welcome_message_input::Version>,
}
/// Nested message and enum types in `WelcomeMessageInput`.
pub mod welcome_message_input {
    /// Version 1 of the WelcomeMessageInput format
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct V1 {
        #[prost(bytes = "vec", tag = "1")]
        pub installation_key: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "2")]
        pub data: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "3")]
        pub hpke_public_key: ::prost::alloc::vec::Vec<u8>,
        #[prost(
            enumeration = "super::super::super::message_contents::WelcomeWrapperAlgorithm",
            tag = "4"
        )]
        pub wrapper_algorithm: i32,
        #[prost(bytes = "vec", tag = "7")]
        pub welcome_metadata: ::prost::alloc::vec::Vec<u8>,
    }
    impl ::prost::Name for V1 {
        const NAME: &'static str = "V1";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.WelcomeMessageInput.V1".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.WelcomeMessageInput.V1".into()
        }
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V1(V1),
    }
}
impl ::prost::Name for WelcomeMessageInput {
    const NAME: &'static str = "WelcomeMessageInput";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.WelcomeMessageInput".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.WelcomeMessageInput".into()
    }
}
/// This field is encrypted along with the `data` field on the welcome message.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WelcomeMetadata {
    #[prost(uint64, tag = "1")]
    pub message_cursor: u64,
}
impl ::prost::Name for WelcomeMetadata {
    const NAME: &'static str = "WelcomeMetadata";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.WelcomeMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.WelcomeMetadata".into()
    }
}
/// Full representation of a group message
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GroupMessage {
    #[prost(oneof = "group_message::Version", tags = "1")]
    pub version: ::core::option::Option<group_message::Version>,
}
/// Nested message and enum types in `GroupMessage`.
pub mod group_message {
    /// Version 1 of the GroupMessage format
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct V1 {
        #[prost(uint64, tag = "1")]
        pub id: u64,
        #[prost(uint64, tag = "2")]
        pub created_ns: u64,
        #[prost(bytes = "vec", tag = "3")]
        pub group_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "4")]
        pub data: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "5")]
        pub sender_hmac: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "6")]
        pub should_push: bool,
    }
    impl ::prost::Name for V1 {
        const NAME: &'static str = "V1";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.GroupMessage.V1".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.GroupMessage.V1".into()
        }
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V1(V1),
    }
}
impl ::prost::Name for GroupMessage {
    const NAME: &'static str = "GroupMessage";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.GroupMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.GroupMessage".into()
    }
}
/// Input type for a group message
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GroupMessageInput {
    #[prost(oneof = "group_message_input::Version", tags = "1")]
    pub version: ::core::option::Option<group_message_input::Version>,
}
/// Nested message and enum types in `GroupMessageInput`.
pub mod group_message_input {
    /// Version 1 of the GroupMessageInput payload format
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct V1 {
        /// Serialized MlsProtocolMessage
        #[prost(bytes = "vec", tag = "1")]
        pub data: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "2")]
        pub sender_hmac: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "3")]
        pub should_push: bool,
    }
    impl ::prost::Name for V1 {
        const NAME: &'static str = "V1";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.GroupMessageInput.V1".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.GroupMessageInput.V1".into()
        }
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V1(V1),
    }
}
impl ::prost::Name for GroupMessageInput {
    const NAME: &'static str = "GroupMessageInput";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.GroupMessageInput".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.GroupMessageInput".into()
    }
}
/// Send a batch of MLS messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendGroupMessagesRequest {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<GroupMessageInput>,
}
impl ::prost::Name for SendGroupMessagesRequest {
    const NAME: &'static str = "SendGroupMessagesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.SendGroupMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.SendGroupMessagesRequest".into()
    }
}
/// Send a batch of welcome messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendWelcomeMessagesRequest {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<WelcomeMessageInput>,
}
impl ::prost::Name for SendWelcomeMessagesRequest {
    const NAME: &'static str = "SendWelcomeMessagesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.SendWelcomeMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.SendWelcomeMessagesRequest".into()
    }
}
/// A wrapper around the Key Package bytes
///
/// This would be a serialized MLS key package that the node would
/// parse, validate, and then store.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KeyPackageUpload {
    /// The owner's wallet address would be extracted from the identity
    /// credential in the key package, and all signatures would be validated.
    #[prost(bytes = "vec", tag = "1")]
    pub key_package_tls_serialized: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for KeyPackageUpload {
    const NAME: &'static str = "KeyPackageUpload";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.KeyPackageUpload".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.KeyPackageUpload".into()
    }
}
/// Register a new installation
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegisterInstallationRequest {
    /// The Key Package contains all information needed to register an installation
    #[prost(message, optional, tag = "1")]
    pub key_package: ::core::option::Option<KeyPackageUpload>,
    #[prost(bool, tag = "2")]
    pub is_inbox_id_credential: bool,
}
impl ::prost::Name for RegisterInstallationRequest {
    const NAME: &'static str = "RegisterInstallationRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.RegisterInstallationRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.RegisterInstallationRequest".into()
    }
}
/// The response to a RegisterInstallationRequest
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegisterInstallationResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub installation_key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for RegisterInstallationResponse {
    const NAME: &'static str = "RegisterInstallationResponse";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.RegisterInstallationResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.RegisterInstallationResponse".into()
    }
}
/// Upload a new key packages
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UploadKeyPackageRequest {
    /// An individual key package upload request
    #[prost(message, optional, tag = "1")]
    pub key_package: ::core::option::Option<KeyPackageUpload>,
    #[prost(bool, tag = "2")]
    pub is_inbox_id_credential: bool,
}
impl ::prost::Name for UploadKeyPackageRequest {
    const NAME: &'static str = "UploadKeyPackageRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.UploadKeyPackageRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.UploadKeyPackageRequest".into()
    }
}
/// Fetch one or more key packages
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchKeyPackagesRequest {
    /// The caller can provide an array of installation keys, and the API
    /// will return one key package for each installation associated with each
    /// installation key
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub installation_keys: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
impl ::prost::Name for FetchKeyPackagesRequest {
    const NAME: &'static str = "FetchKeyPackagesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.FetchKeyPackagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.FetchKeyPackagesRequest".into()
    }
}
/// The response to a FetchKeyPackagesRequest
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchKeyPackagesResponse {
    /// Returns one key package per installation in the original order of the
    /// request. If any installations are missing key packages, an empty entry is
    /// left in their respective spots in the array.
    #[prost(message, repeated, tag = "1")]
    pub key_packages: ::prost::alloc::vec::Vec<fetch_key_packages_response::KeyPackage>,
}
/// Nested message and enum types in `FetchKeyPackagesResponse`.
pub mod fetch_key_packages_response {
    /// An individual key package
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct KeyPackage {
        #[prost(bytes = "vec", tag = "1")]
        pub key_package_tls_serialized: ::prost::alloc::vec::Vec<u8>,
    }
    impl ::prost::Name for KeyPackage {
        const NAME: &'static str = "KeyPackage";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.FetchKeyPackagesResponse.KeyPackage".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.FetchKeyPackagesResponse.KeyPackage".into()
        }
    }
}
impl ::prost::Name for FetchKeyPackagesResponse {
    const NAME: &'static str = "FetchKeyPackagesResponse";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.FetchKeyPackagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.FetchKeyPackagesResponse".into()
    }
}
/// Revoke an installation
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RevokeInstallationRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub installation_key: ::prost::alloc::vec::Vec<u8>,
    /// All revocations must be validated with a wallet signature over the
    /// installation_id being revoked (and some sort of standard prologue)
    #[prost(message, optional, tag = "2")]
    pub wallet_signature: ::core::option::Option<
        super::super::super::message_contents::Signature,
    >,
}
impl ::prost::Name for RevokeInstallationRequest {
    const NAME: &'static str = "RevokeInstallationRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.RevokeInstallationRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.RevokeInstallationRequest".into()
    }
}
/// Get all updates for an identity since the specified time
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetIdentityUpdatesRequest {
    #[prost(string, repeated, tag = "1")]
    pub account_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint64, tag = "2")]
    pub start_time_ns: u64,
}
impl ::prost::Name for GetIdentityUpdatesRequest {
    const NAME: &'static str = "GetIdentityUpdatesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.GetIdentityUpdatesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.GetIdentityUpdatesRequest".into()
    }
}
/// Used to get any new or revoked installations for a list of wallet addresses
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityUpdatesResponse {
    /// A list of updates (or empty objects if no changes) in the original order
    /// of the request
    #[prost(message, repeated, tag = "1")]
    pub updates: ::prost::alloc::vec::Vec<get_identity_updates_response::WalletUpdates>,
}
/// Nested message and enum types in `GetIdentityUpdatesResponse`.
pub mod get_identity_updates_response {
    /// A new installation key was seen for the first time by the nodes
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct NewInstallationUpdate {
        #[prost(bytes = "vec", tag = "1")]
        pub installation_key: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "2")]
        pub credential_identity: ::prost::alloc::vec::Vec<u8>,
    }
    impl ::prost::Name for NewInstallationUpdate {
        const NAME: &'static str = "NewInstallationUpdate";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.GetIdentityUpdatesResponse.NewInstallationUpdate".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.GetIdentityUpdatesResponse.NewInstallationUpdate".into()
        }
    }
    /// An installation was revoked
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct RevokedInstallationUpdate {
        #[prost(bytes = "vec", tag = "1")]
        pub installation_key: ::prost::alloc::vec::Vec<u8>,
    }
    impl ::prost::Name for RevokedInstallationUpdate {
        const NAME: &'static str = "RevokedInstallationUpdate";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.GetIdentityUpdatesResponse.RevokedInstallationUpdate".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.GetIdentityUpdatesResponse.RevokedInstallationUpdate"
                .into()
        }
    }
    /// A wrapper for any update to the wallet
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Update {
        #[prost(uint64, tag = "1")]
        pub timestamp_ns: u64,
        #[prost(oneof = "update::Kind", tags = "2, 3")]
        pub kind: ::core::option::Option<update::Kind>,
    }
    /// Nested message and enum types in `Update`.
    pub mod update {
        #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
        pub enum Kind {
            #[prost(message, tag = "2")]
            NewInstallation(super::NewInstallationUpdate),
            #[prost(message, tag = "3")]
            RevokedInstallation(super::RevokedInstallationUpdate),
        }
    }
    impl ::prost::Name for Update {
        const NAME: &'static str = "Update";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.GetIdentityUpdatesResponse.Update".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.GetIdentityUpdatesResponse.Update".into()
        }
    }
    /// A wrapper for the updates for a single wallet
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct WalletUpdates {
        #[prost(message, repeated, tag = "1")]
        pub updates: ::prost::alloc::vec::Vec<Update>,
    }
    impl ::prost::Name for WalletUpdates {
        const NAME: &'static str = "WalletUpdates";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.GetIdentityUpdatesResponse.WalletUpdates".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.GetIdentityUpdatesResponse.WalletUpdates".into()
        }
    }
}
impl ::prost::Name for GetIdentityUpdatesResponse {
    const NAME: &'static str = "GetIdentityUpdatesResponse";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.GetIdentityUpdatesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.GetIdentityUpdatesResponse".into()
    }
}
/// Pagination config for queries
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PagingInfo {
    #[prost(enumeration = "SortDirection", tag = "1")]
    pub direction: i32,
    #[prost(uint32, tag = "2")]
    pub limit: u32,
    #[prost(uint64, tag = "3")]
    pub id_cursor: u64,
}
impl ::prost::Name for PagingInfo {
    const NAME: &'static str = "PagingInfo";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.PagingInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.PagingInfo".into()
    }
}
/// Request for group message queries
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryGroupMessagesRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub group_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub paging_info: ::core::option::Option<PagingInfo>,
}
impl ::prost::Name for QueryGroupMessagesRequest {
    const NAME: &'static str = "QueryGroupMessagesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.QueryGroupMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.QueryGroupMessagesRequest".into()
    }
}
/// Response for group message queries
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGroupMessagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<GroupMessage>,
    #[prost(message, optional, tag = "2")]
    pub paging_info: ::core::option::Option<PagingInfo>,
}
impl ::prost::Name for QueryGroupMessagesResponse {
    const NAME: &'static str = "QueryGroupMessagesResponse";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.QueryGroupMessagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.QueryGroupMessagesResponse".into()
    }
}
/// Request for welcome message queries
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryWelcomeMessagesRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub installation_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub paging_info: ::core::option::Option<PagingInfo>,
}
impl ::prost::Name for QueryWelcomeMessagesRequest {
    const NAME: &'static str = "QueryWelcomeMessagesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.QueryWelcomeMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.QueryWelcomeMessagesRequest".into()
    }
}
/// Response for welcome message queries
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryWelcomeMessagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<WelcomeMessage>,
    #[prost(message, optional, tag = "2")]
    pub paging_info: ::core::option::Option<PagingInfo>,
}
impl ::prost::Name for QueryWelcomeMessagesResponse {
    const NAME: &'static str = "QueryWelcomeMessagesResponse";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.QueryWelcomeMessagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.QueryWelcomeMessagesResponse".into()
    }
}
/// Request for subscribing to group messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeGroupMessagesRequest {
    #[prost(message, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<subscribe_group_messages_request::Filter>,
}
/// Nested message and enum types in `SubscribeGroupMessagesRequest`.
pub mod subscribe_group_messages_request {
    /// Subscription filter
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Filter {
        #[prost(bytes = "vec", tag = "1")]
        pub group_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint64, tag = "2")]
        pub id_cursor: u64,
    }
    impl ::prost::Name for Filter {
        const NAME: &'static str = "Filter";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.SubscribeGroupMessagesRequest.Filter".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.SubscribeGroupMessagesRequest.Filter".into()
        }
    }
}
impl ::prost::Name for SubscribeGroupMessagesRequest {
    const NAME: &'static str = "SubscribeGroupMessagesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.SubscribeGroupMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.SubscribeGroupMessagesRequest".into()
    }
}
/// Request for subscribing to welcome messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeWelcomeMessagesRequest {
    #[prost(message, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<subscribe_welcome_messages_request::Filter>,
}
/// Nested message and enum types in `SubscribeWelcomeMessagesRequest`.
pub mod subscribe_welcome_messages_request {
    /// Subscription filter
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Filter {
        #[prost(bytes = "vec", tag = "1")]
        pub installation_key: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint64, tag = "2")]
        pub id_cursor: u64,
    }
    impl ::prost::Name for Filter {
        const NAME: &'static str = "Filter";
        const PACKAGE: &'static str = "xmtp.mls.api.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "xmtp.mls.api.v1.SubscribeWelcomeMessagesRequest.Filter".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/xmtp.mls.api.v1.SubscribeWelcomeMessagesRequest.Filter".into()
        }
    }
}
impl ::prost::Name for SubscribeWelcomeMessagesRequest {
    const NAME: &'static str = "SubscribeWelcomeMessagesRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.SubscribeWelcomeMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.SubscribeWelcomeMessagesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchPublishCommitLogRequest {
    #[prost(message, repeated, tag = "1")]
    pub requests: ::prost::alloc::vec::Vec<PublishCommitLogRequest>,
}
impl ::prost::Name for BatchPublishCommitLogRequest {
    const NAME: &'static str = "BatchPublishCommitLogRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.BatchPublishCommitLogRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.BatchPublishCommitLogRequest".into()
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublishCommitLogRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub group_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub serialized_commit_log_entry: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "3")]
    pub signature: ::core::option::Option<
        super::super::super::identity::associations::RecoverableEd25519Signature,
    >,
}
impl ::prost::Name for PublishCommitLogRequest {
    const NAME: &'static str = "PublishCommitLogRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.PublishCommitLogRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.PublishCommitLogRequest".into()
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryCommitLogRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub group_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub paging_info: ::core::option::Option<PagingInfo>,
}
impl ::prost::Name for QueryCommitLogRequest {
    const NAME: &'static str = "QueryCommitLogRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.QueryCommitLogRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.QueryCommitLogRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCommitLogResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub group_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag = "2")]
    pub commit_log_entries: ::prost::alloc::vec::Vec<
        super::super::message_contents::CommitLogEntry,
    >,
    #[prost(message, optional, tag = "3")]
    pub paging_info: ::core::option::Option<PagingInfo>,
}
impl ::prost::Name for QueryCommitLogResponse {
    const NAME: &'static str = "QueryCommitLogResponse";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.QueryCommitLogResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.QueryCommitLogResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchQueryCommitLogRequest {
    #[prost(message, repeated, tag = "1")]
    pub requests: ::prost::alloc::vec::Vec<QueryCommitLogRequest>,
}
impl ::prost::Name for BatchQueryCommitLogRequest {
    const NAME: &'static str = "BatchQueryCommitLogRequest";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.BatchQueryCommitLogRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.BatchQueryCommitLogRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchQueryCommitLogResponse {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<QueryCommitLogResponse>,
}
impl ::prost::Name for BatchQueryCommitLogResponse {
    const NAME: &'static str = "BatchQueryCommitLogResponse";
    const PACKAGE: &'static str = "xmtp.mls.api.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.mls.api.v1.BatchQueryCommitLogResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.mls.api.v1.BatchQueryCommitLogResponse".into()
    }
}
/// Sort direction for queries
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SortDirection {
    Unspecified = 0,
    Ascending = 1,
    Descending = 2,
}
impl SortDirection {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SORT_DIRECTION_UNSPECIFIED",
            Self::Ascending => "SORT_DIRECTION_ASCENDING",
            Self::Descending => "SORT_DIRECTION_DESCENDING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SORT_DIRECTION_UNSPECIFIED" => Some(Self::Unspecified),
            "SORT_DIRECTION_ASCENDING" => Some(Self::Ascending),
            "SORT_DIRECTION_DESCENDING" => Some(Self::Descending),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod mls_api_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// RPCs for the new MLS API
    #[derive(Debug, Clone)]
    pub struct MlsApiClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> MlsApiClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MlsApiClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MlsApiClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Send a MLS payload, that would be validated before being stored to the
        /// network
        pub async fn send_group_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::SendGroupMessagesRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/SendGroupMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "SendGroupMessages"));
            self.inner.unary(req, path, codec).await
        }
        /// Send a batch of welcome messages
        pub async fn send_welcome_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::SendWelcomeMessagesRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/SendWelcomeMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "SendWelcomeMessages"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Register a new installation, which would be validated before storage
        pub async fn register_installation(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterInstallationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterInstallationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/RegisterInstallation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "RegisterInstallation"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Upload a new KeyPackage, which would be validated before storage
        pub async fn upload_key_package(
            &mut self,
            request: impl tonic::IntoRequest<super::UploadKeyPackageRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/UploadKeyPackage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "UploadKeyPackage"));
            self.inner.unary(req, path, codec).await
        }
        /// Get one or more Key Packages by installation_id
        pub async fn fetch_key_packages(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchKeyPackagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchKeyPackagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/FetchKeyPackages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "FetchKeyPackages"));
            self.inner.unary(req, path, codec).await
        }
        /// Would delete all key packages associated with the installation and mark
        /// the installation as having been revoked
        pub async fn revoke_installation(
            &mut self,
            request: impl tonic::IntoRequest<super::RevokeInstallationRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/RevokeInstallation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "RevokeInstallation"));
            self.inner.unary(req, path, codec).await
        }
        /// Used to check for changes related to members of a group.
        /// Would return an array of any new installations associated with the wallet
        /// address, and any revocations that have happened.
        pub async fn get_identity_updates(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityUpdatesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityUpdatesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/GetIdentityUpdates",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "GetIdentityUpdates"));
            self.inner.unary(req, path, codec).await
        }
        /// Query stored group messages
        pub async fn query_group_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGroupMessagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/QueryGroupMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "QueryGroupMessages"));
            self.inner.unary(req, path, codec).await
        }
        /// Query stored group messages
        pub async fn query_welcome_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryWelcomeMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryWelcomeMessagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/QueryWelcomeMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "QueryWelcomeMessages"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Subscribe stream of new group messages
        pub async fn subscribe_group_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GroupMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/SubscribeGroupMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "SubscribeGroupMessages"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Subscribe stream of new welcome messages
        pub async fn subscribe_welcome_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeWelcomeMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::WelcomeMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/SubscribeWelcomeMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "SubscribeWelcomeMessages"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn batch_publish_commit_log(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchPublishCommitLogRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/BatchPublishCommitLog",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "BatchPublishCommitLog"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn batch_query_commit_log(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchQueryCommitLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchQueryCommitLogResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xmtp.mls.api.v1.MlsApi/BatchQueryCommitLog",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("xmtp.mls.api.v1.MlsApi", "BatchQueryCommitLog"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(not(target_arch = "wasm32"))]
pub mod mls_api_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MlsApiServer.
    #[async_trait]
    pub trait MlsApi: std::marker::Send + std::marker::Sync + 'static {
        /// Send a MLS payload, that would be validated before being stored to the
        /// network
        async fn send_group_messages(
            &self,
            request: tonic::Request<super::SendGroupMessagesRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// Send a batch of welcome messages
        async fn send_welcome_messages(
            &self,
            request: tonic::Request<super::SendWelcomeMessagesRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// Register a new installation, which would be validated before storage
        async fn register_installation(
            &self,
            request: tonic::Request<super::RegisterInstallationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterInstallationResponse>,
            tonic::Status,
        >;
        /// Upload a new KeyPackage, which would be validated before storage
        async fn upload_key_package(
            &self,
            request: tonic::Request<super::UploadKeyPackageRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// Get one or more Key Packages by installation_id
        async fn fetch_key_packages(
            &self,
            request: tonic::Request<super::FetchKeyPackagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchKeyPackagesResponse>,
            tonic::Status,
        >;
        /// Would delete all key packages associated with the installation and mark
        /// the installation as having been revoked
        async fn revoke_installation(
            &self,
            request: tonic::Request<super::RevokeInstallationRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// Used to check for changes related to members of a group.
        /// Would return an array of any new installations associated with the wallet
        /// address, and any revocations that have happened.
        async fn get_identity_updates(
            &self,
            request: tonic::Request<super::GetIdentityUpdatesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityUpdatesResponse>,
            tonic::Status,
        >;
        /// Query stored group messages
        async fn query_group_messages(
            &self,
            request: tonic::Request<super::QueryGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGroupMessagesResponse>,
            tonic::Status,
        >;
        /// Query stored group messages
        async fn query_welcome_messages(
            &self,
            request: tonic::Request<super::QueryWelcomeMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryWelcomeMessagesResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the SubscribeGroupMessages method.
        type SubscribeGroupMessagesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GroupMessage, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Subscribe stream of new group messages
        async fn subscribe_group_messages(
            &self,
            request: tonic::Request<super::SubscribeGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeGroupMessagesStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the SubscribeWelcomeMessages method.
        type SubscribeWelcomeMessagesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::WelcomeMessage, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Subscribe stream of new welcome messages
        async fn subscribe_welcome_messages(
            &self,
            request: tonic::Request<super::SubscribeWelcomeMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeWelcomeMessagesStream>,
            tonic::Status,
        >;
        async fn batch_publish_commit_log(
            &self,
            request: tonic::Request<super::BatchPublishCommitLogRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        async fn batch_query_commit_log(
            &self,
            request: tonic::Request<super::BatchQueryCommitLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchQueryCommitLogResponse>,
            tonic::Status,
        >;
    }
    /// RPCs for the new MLS API
    #[derive(Debug)]
    pub struct MlsApiServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MlsApiServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MlsApiServer<T>
    where
        T: MlsApi,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/xmtp.mls.api.v1.MlsApi/SendGroupMessages" => {
                    #[allow(non_camel_case_types)]
                    struct SendGroupMessagesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::SendGroupMessagesRequest>
                    for SendGroupMessagesSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendGroupMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::send_group_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendGroupMessagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/SendWelcomeMessages" => {
                    #[allow(non_camel_case_types)]
                    struct SendWelcomeMessagesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::SendWelcomeMessagesRequest>
                    for SendWelcomeMessagesSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendWelcomeMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::send_welcome_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendWelcomeMessagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/RegisterInstallation" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterInstallationSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::RegisterInstallationRequest>
                    for RegisterInstallationSvc<T> {
                        type Response = super::RegisterInstallationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterInstallationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::register_installation(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterInstallationSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/UploadKeyPackage" => {
                    #[allow(non_camel_case_types)]
                    struct UploadKeyPackageSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::UploadKeyPackageRequest>
                    for UploadKeyPackageSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UploadKeyPackageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::upload_key_package(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UploadKeyPackageSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/FetchKeyPackages" => {
                    #[allow(non_camel_case_types)]
                    struct FetchKeyPackagesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::FetchKeyPackagesRequest>
                    for FetchKeyPackagesSvc<T> {
                        type Response = super::FetchKeyPackagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchKeyPackagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::fetch_key_packages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchKeyPackagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/RevokeInstallation" => {
                    #[allow(non_camel_case_types)]
                    struct RevokeInstallationSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::RevokeInstallationRequest>
                    for RevokeInstallationSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RevokeInstallationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::revoke_installation(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RevokeInstallationSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/GetIdentityUpdates" => {
                    #[allow(non_camel_case_types)]
                    struct GetIdentityUpdatesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::GetIdentityUpdatesRequest>
                    for GetIdentityUpdatesSvc<T> {
                        type Response = super::GetIdentityUpdatesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetIdentityUpdatesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::get_identity_updates(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIdentityUpdatesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/QueryGroupMessages" => {
                    #[allow(non_camel_case_types)]
                    struct QueryGroupMessagesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::QueryGroupMessagesRequest>
                    for QueryGroupMessagesSvc<T> {
                        type Response = super::QueryGroupMessagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryGroupMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::query_group_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryGroupMessagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/QueryWelcomeMessages" => {
                    #[allow(non_camel_case_types)]
                    struct QueryWelcomeMessagesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::QueryWelcomeMessagesRequest>
                    for QueryWelcomeMessagesSvc<T> {
                        type Response = super::QueryWelcomeMessagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryWelcomeMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::query_welcome_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryWelcomeMessagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/SubscribeGroupMessages" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeGroupMessagesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeGroupMessagesRequest,
                    > for SubscribeGroupMessagesSvc<T> {
                        type Response = super::GroupMessage;
                        type ResponseStream = T::SubscribeGroupMessagesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeGroupMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::subscribe_group_messages(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeGroupMessagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/SubscribeWelcomeMessages" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeWelcomeMessagesSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeWelcomeMessagesRequest,
                    > for SubscribeWelcomeMessagesSvc<T> {
                        type Response = super::WelcomeMessage;
                        type ResponseStream = T::SubscribeWelcomeMessagesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::SubscribeWelcomeMessagesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::subscribe_welcome_messages(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeWelcomeMessagesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/BatchPublishCommitLog" => {
                    #[allow(non_camel_case_types)]
                    struct BatchPublishCommitLogSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::BatchPublishCommitLogRequest>
                    for BatchPublishCommitLogSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchPublishCommitLogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::batch_publish_commit_log(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BatchPublishCommitLogSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xmtp.mls.api.v1.MlsApi/BatchQueryCommitLog" => {
                    #[allow(non_camel_case_types)]
                    struct BatchQueryCommitLogSvc<T: MlsApi>(pub Arc<T>);
                    impl<
                        T: MlsApi,
                    > tonic::server::UnaryService<super::BatchQueryCommitLogRequest>
                    for BatchQueryCommitLogSvc<T> {
                        type Response = super::BatchQueryCommitLogResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchQueryCommitLogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsApi>::batch_query_commit_log(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BatchQueryCommitLogSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MlsApiServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "xmtp.mls.api.v1.MlsApi";
    impl<T> tonic::server::NamedService for MlsApiServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
