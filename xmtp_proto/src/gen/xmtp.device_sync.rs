// This file is @generated by prost-build.
/// Union type representing everything that can be serialied and saved in a backup archive.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackupElement {
    #[prost(oneof = "backup_element::Element", tags = "1, 2, 3, 4, 5")]
    pub element: ::core::option::Option<backup_element::Element>,
}
/// Nested message and enum types in `BackupElement`.
pub mod backup_element {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Element {
        #[prost(message, tag = "1")]
        Metadata(super::BackupMetadataSave),
        #[prost(message, tag = "2")]
        Group(super::group_backup::GroupSave),
        #[prost(message, tag = "3")]
        GroupMessage(super::message_backup::GroupMessageSave),
        #[prost(message, tag = "4")]
        Consent(super::consent_backup::ConsentSave),
        #[prost(message, tag = "5")]
        Event(super::event_backup::EventSave),
    }
}
impl ::prost::Name for BackupElement {
    const NAME: &'static str = "BackupElement";
    const PACKAGE: &'static str = "xmtp.device_sync";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.device_sync.BackupElement".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.device_sync.BackupElement".into()
    }
}
/// Proto representation of backup metadata
/// (Backup version is explicitly missing - it's stored as a header.)
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BackupMetadataSave {
    #[prost(enumeration = "BackupElementSelection", repeated, tag = "2")]
    pub elements: ::prost::alloc::vec::Vec<i32>,
    #[prost(int64, tag = "3")]
    pub exported_at_ns: i64,
    #[prost(int64, optional, tag = "4")]
    pub start_ns: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub end_ns: ::core::option::Option<i64>,
}
impl ::prost::Name for BackupMetadataSave {
    const NAME: &'static str = "BackupMetadataSave";
    const PACKAGE: &'static str = "xmtp.device_sync";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.device_sync.BackupMetadataSave".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.device_sync.BackupMetadataSave".into()
    }
}
/// Backup Options
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BackupOptions {
    #[prost(enumeration = "BackupElementSelection", repeated, tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<i32>,
    #[prost(int64, optional, tag = "2")]
    pub start_ns: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub end_ns: ::core::option::Option<i64>,
}
impl ::prost::Name for BackupOptions {
    const NAME: &'static str = "BackupOptions";
    const PACKAGE: &'static str = "xmtp.device_sync";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.device_sync.BackupOptions".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.device_sync.BackupOptions".into()
    }
}
/// Elements selected for backup
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BackupElementSelection {
    Unspecified = 0,
    Messages = 1,
    Consent = 2,
    Event = 3,
}
impl BackupElementSelection {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "BACKUP_ELEMENT_SELECTION_UNSPECIFIED",
            Self::Messages => "BACKUP_ELEMENT_SELECTION_MESSAGES",
            Self::Consent => "BACKUP_ELEMENT_SELECTION_CONSENT",
            Self::Event => "BACKUP_ELEMENT_SELECTION_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BACKUP_ELEMENT_SELECTION_UNSPECIFIED" => Some(Self::Unspecified),
            "BACKUP_ELEMENT_SELECTION_MESSAGES" => Some(Self::Messages),
            "BACKUP_ELEMENT_SELECTION_CONSENT" => Some(Self::Consent),
            "BACKUP_ELEMENT_SELECTION_EVENT" => Some(Self::Event),
            _ => None,
        }
    }
}
