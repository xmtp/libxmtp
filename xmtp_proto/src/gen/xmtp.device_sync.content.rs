// @generated
// This file is @generated by prost-build.
/// All potential device sync group messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceSyncContent {
    #[prost(oneof="device_sync_content::Content", tags="1, 2, 3, 4, 5")]
    pub content: ::core::option::Option<device_sync_content::Content>,
}
/// Nested message and enum types in `DeviceSyncContent`.
pub mod device_sync_content {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(message, tag="1")]
        Request(super::super::super::mls::message_contents::DeviceSyncRequest),
        #[prost(message, tag="2")]
        Acknowledge(super::DeviceSyncAcknowledge),
        #[prost(message, tag="3")]
        Reply(super::super::super::mls::message_contents::DeviceSyncReply),
        #[prost(message, tag="4")]
        PreferenceUpdates(super::PreferenceUpdates),
        #[prost(message, tag="5")]
        SyncGroupContest(super::SyncGroupContest),
    }
}
impl ::prost::Name for DeviceSyncContent {
const NAME: &'static str = "DeviceSyncContent";
const PACKAGE: &'static str = "xmtp.device_sync.content";
fn full_name() -> ::prost::alloc::string::String { "xmtp.device_sync.content.DeviceSyncContent".into() }fn type_url() -> ::prost::alloc::string::String { "/xmtp.device_sync.content.DeviceSyncContent".into() }}
/// Acknowledges a request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceSyncAcknowledge {
    #[prost(string, tag="1")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DeviceSyncAcknowledge {
const NAME: &'static str = "DeviceSyncAcknowledge";
const PACKAGE: &'static str = "xmtp.device_sync.content";
fn full_name() -> ::prost::alloc::string::String { "xmtp.device_sync.content.DeviceSyncAcknowledge".into() }fn type_url() -> ::prost::alloc::string::String { "/xmtp.device_sync.content.DeviceSyncAcknowledge".into() }}
/// Preference updates
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PreferenceUpdates {
    #[prost(message, repeated, tag="1")]
    pub updates: ::prost::alloc::vec::Vec<UserPreferenceUpdate>,
}
impl ::prost::Name for PreferenceUpdates {
const NAME: &'static str = "PreferenceUpdates";
const PACKAGE: &'static str = "xmtp.device_sync.content";
fn full_name() -> ::prost::alloc::string::String { "xmtp.device_sync.content.PreferenceUpdates".into() }fn type_url() -> ::prost::alloc::string::String { "/xmtp.device_sync.content.PreferenceUpdates".into() }}
/// Preference update
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserPreferenceUpdate {
    #[prost(oneof="user_preference_update::Update", tags="1, 2")]
    pub update: ::core::option::Option<user_preference_update::Update>,
}
/// Nested message and enum types in `UserPreferenceUpdate`.
pub mod user_preference_update {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Update {
        #[prost(message, tag="1")]
        Consent(super::super::consent_backup::ConsentSave),
        #[prost(message, tag="2")]
        Hmac(super::HmacKeyUpdate),
    }
}
impl ::prost::Name for UserPreferenceUpdate {
const NAME: &'static str = "UserPreferenceUpdate";
const PACKAGE: &'static str = "xmtp.device_sync.content";
fn full_name() -> ::prost::alloc::string::String { "xmtp.device_sync.content.UserPreferenceUpdate".into() }fn type_url() -> ::prost::alloc::string::String { "/xmtp.device_sync.content.UserPreferenceUpdate".into() }}
/// Hmac key update
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HmacKeyUpdate {
    #[prost(bytes="vec", tag="1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for HmacKeyUpdate {
const NAME: &'static str = "HmacKeyUpdate";
const PACKAGE: &'static str = "xmtp.device_sync.content";
fn full_name() -> ::prost::alloc::string::String { "xmtp.device_sync.content.HmacKeyUpdate".into() }fn type_url() -> ::prost::alloc::string::String { "/xmtp.device_sync.content.HmacKeyUpdate".into() }}
/// If a device that already has a sync group is welcomed
/// into a new sync group, it should contest the new sync group
/// so that the oldest sync group wins.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncGroupContest {
    /// The ID of the existing sync group
    #[prost(bytes="vec", tag="1")]
    pub group_id: ::prost::alloc::vec::Vec<u8>,
    /// The timestamp of the oldest message sent
    #[prost(int64, tag="2")]
    pub oldest_message_timestamp: i64,
}
impl ::prost::Name for SyncGroupContest {
const NAME: &'static str = "SyncGroupContest";
const PACKAGE: &'static str = "xmtp.device_sync.content";
fn full_name() -> ::prost::alloc::string::String { "xmtp.device_sync.content.SyncGroupContest".into() }fn type_url() -> ::prost::alloc::string::String { "/xmtp.device_sync.content.SyncGroupContest".into() }}
/// Encoded file descriptor set for the `xmtp.device_sync.content` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0xe5, 0x13, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63,
    0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
    0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63,
    0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
    0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61,
    0x63, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x6c, 0x73, 0x2f,
    0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
    0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb,
    0x03, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
    0x74, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73,
    0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
    0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53,
    0x0a, 0x0b, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
    0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44,
    0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
    0x65, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
    0x64, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65,
    0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44,
    0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
    0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65,
    0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
    0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50,
    0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
    0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70,
    0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x72,
    0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
    0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x6e,
    0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
    0x10, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
    0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x15,
    0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
    0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
    0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x75, 0x70, 0x64,
    0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6d, 0x74,
    0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f,
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
    0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
    0x74, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
    0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x07,
    0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
    0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63,
    0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
    0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63,
    0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69,
    0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
    0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
    0x04, 0x68, 0x6d, 0x61, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
    0x21, 0x0a, 0x0d, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
    0x65, 0x79, 0x22, 0x67, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
    0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
    0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
    0x64, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
    0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x03, 0x52, 0x16, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0xaa, 0x01, 0x0a, 0x1c,
    0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
    0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x43, 0x6f,
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03, 0x58,
    0x44, 0x43, 0xaa, 0x02, 0x17, 0x58, 0x6d, 0x74, 0x70, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
    0x53, 0x79, 0x6e, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xca, 0x02, 0x17, 0x58,
    0x6d, 0x74, 0x70, 0x5c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x5c, 0x43,
    0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xe2, 0x02, 0x23, 0x58, 0x6d, 0x74, 0x70, 0x5c, 0x44, 0x65,
    0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
    0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x58,
    0x6d, 0x74, 0x70, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x3a,
    0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4a, 0xa5, 0x0a, 0x0a, 0x06, 0x12, 0x04, 0x01,
    0x00, 0x31, 0x01, 0x0a, 0x1f, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x01, 0x00, 0x12, 0x1a, 0x15, 0x20,
    0x53, 0x79, 0x6e, 0x63, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x73, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x00, 0x21, 0x0a, 0x09,
    0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x04, 0x00, 0x2a, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12,
    0x03, 0x05, 0x00, 0x2c, 0x0a, 0x36, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x08, 0x00, 0x10, 0x01,
    0x1a, 0x2a, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
    0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x67, 0x72, 0x6f,
    0x75, 0x70, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x0a, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x00, 0x01, 0x12, 0x03, 0x08, 0x08, 0x19, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x08, 0x00,
    0x12, 0x04, 0x09, 0x02, 0x0f, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08, 0x00, 0x01, 0x12,
    0x03, 0x09, 0x08, 0x0f, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0a, 0x04,
    0x3c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0a, 0x04, 0x2f, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0a, 0x30, 0x37, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x0a, 0x3a, 0x3b, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x01, 0x12, 0x03, 0x0b, 0x04, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x06, 0x12, 0x03, 0x0b, 0x04, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x0b, 0x1a, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x0b,
    0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x0c, 0x04, 0x38, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x0c, 0x04, 0x2d, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x0c, 0x2e, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x0c, 0x36, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x03, 0x12, 0x03, 0x0d, 0x04, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x06, 0x12,
    0x03, 0x0d, 0x04, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x0d,
    0x16, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x0d, 0x2b, 0x2c,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x0e, 0x04, 0x2c, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x04, 0x06, 0x12, 0x03, 0x0e, 0x04, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x0e, 0x15, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x04, 0x03, 0x12, 0x03, 0x0e, 0x2a, 0x2b, 0x0a, 0x24, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x13,
    0x00, 0x15, 0x01, 0x1a, 0x18, 0x20, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
    0x65, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x0a, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x13, 0x08, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02,
    0x00, 0x12, 0x03, 0x14, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x05, 0x12,
    0x03, 0x14, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x14,
    0x09, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x14, 0x16, 0x17,
    0x0a, 0x20, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x18, 0x00, 0x1a, 0x01, 0x1a, 0x14, 0x20, 0x50,
    0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x73, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x18, 0x08, 0x19, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x19, 0x02, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x00, 0x04, 0x12, 0x03, 0x19, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x06, 0x12, 0x03, 0x19, 0x0b, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x19, 0x20, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x19, 0x2a, 0x2b, 0x0a, 0x1f, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x1d, 0x00, 0x22, 0x01, 0x1a,
    0x13, 0x20, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x70, 0x64,
    0x61, 0x74, 0x65, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x1d, 0x08, 0x1c,
    0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x03, 0x08, 0x00, 0x12, 0x04, 0x1e, 0x02, 0x21, 0x03, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x08, 0x00, 0x01, 0x12, 0x03, 0x1e, 0x08, 0x0e, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x1f, 0x04, 0x3c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x00, 0x06, 0x12, 0x03, 0x1f, 0x04, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x1f, 0x30, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x1f, 0x3a, 0x3b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01, 0x12, 0x03, 0x20, 0x04, 0x1b,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x06, 0x12, 0x03, 0x20, 0x04, 0x11, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x20, 0x12, 0x16, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x03, 0x20, 0x19, 0x1a, 0x0a, 0x1d, 0x0a, 0x02, 0x04, 0x04,
    0x12, 0x04, 0x25, 0x00, 0x27, 0x01, 0x1a, 0x11, 0x20, 0x48, 0x6d, 0x61, 0x63, 0x20, 0x6b, 0x65,
    0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x04, 0x01,
    0x12, 0x03, 0x25, 0x08, 0x15, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x03, 0x26,
    0x02, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x05, 0x12, 0x03, 0x26, 0x02, 0x07,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x26, 0x08, 0x0b, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x26, 0x0e, 0x0f, 0x0a, 0xa6, 0x01, 0x0a,
    0x02, 0x04, 0x05, 0x12, 0x04, 0x2c, 0x00, 0x31, 0x01, 0x1a, 0x99, 0x01, 0x20, 0x49, 0x66, 0x20,
    0x61, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x6c,
    0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6e, 0x63,
    0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x69, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
    0x65, 0x64, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73,
    0x79, 0x6e, 0x63, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x73, 0x68,
    0x6f, 0x75, 0x6c, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0a,
    0x20, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6c, 0x64,
    0x65, 0x73, 0x74, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x77,
    0x69, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x05, 0x01, 0x12, 0x03, 0x2c, 0x08,
    0x18, 0x0a, 0x30, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x00, 0x12, 0x03, 0x2e, 0x04, 0x17, 0x1a, 0x23,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x67, 0x72, 0x6f,
    0x75, 0x70, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x05, 0x12, 0x03, 0x2e, 0x04,
    0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2e, 0x0a, 0x12, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x03, 0x2e, 0x15, 0x16, 0x0a, 0x37, 0x0a,
    0x04, 0x04, 0x05, 0x02, 0x01, 0x12, 0x03, 0x30, 0x04, 0x27, 0x1a, 0x2a, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
    0x20, 0x73, 0x65, 0x6e, 0x74, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x05, 0x12,
    0x03, 0x30, 0x04, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x01, 0x12, 0x03, 0x30,
    0x0a, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x03, 0x12, 0x03, 0x30, 0x25, 0x26,
    0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];
include!("xmtp.device_sync.content.serde.rs");
// @@protoc_insertion_point(module)