// This file is @generated by prost-build.
/// RecoverableEcdsaSignature for EIP-191 and V2 signatures
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RecoverableEcdsaSignature {
    /// 65-bytes \[ R || S || V \], with recovery id as the last byte
    #[prost(bytes = "vec", tag = "1")]
    pub bytes: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for RecoverableEcdsaSignature {
    const NAME: &'static str = "RecoverableEcdsaSignature";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.RecoverableEcdsaSignature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.RecoverableEcdsaSignature".into()
    }
}
/// EdDSA signature for 25519
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RecoverableEd25519Signature {
    /// 64 bytes \[R(32 bytes) || S(32 bytes)\]
    #[prost(bytes = "vec", tag = "1")]
    pub bytes: ::prost::alloc::vec::Vec<u8>,
    /// 32 bytes
    #[prost(bytes = "vec", tag = "2")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for RecoverableEd25519Signature {
    const NAME: &'static str = "RecoverableEd25519Signature";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.RecoverableEd25519Signature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.RecoverableEd25519Signature".into()
    }
}
/// Smart Contract Wallet signature
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SmartContractWalletSignature {
    /// CAIP-10 string
    /// <https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md>
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Specify the block number to verify the signature against
    #[prost(uint64, tag = "2")]
    pub block_number: u64,
    /// The actual signature bytes
    #[prost(bytes = "vec", tag = "3")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for SmartContractWalletSignature {
    const NAME: &'static str = "SmartContractWalletSignature";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.SmartContractWalletSignature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.SmartContractWalletSignature".into()
    }
}
/// Passkey signature
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RecoverablePasskeySignature {
    #[prost(bytes = "vec", tag = "1")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub authenticator_data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub client_data_json: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for RecoverablePasskeySignature {
    const NAME: &'static str = "RecoverablePasskeySignature";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.RecoverablePasskeySignature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.RecoverablePasskeySignature".into()
    }
}
/// An existing address on xmtpv2 may have already signed a legacy identity key
/// of type SignedPublicKey via the 'Create Identity' signature.
/// For migration to xmtpv3, the legacy key is permitted to sign on behalf of the
/// address to create a matching xmtpv3 installation key.
/// This signature type can ONLY be used for CreateXid and AddAssociation
/// payloads, and can only be used once in xmtpv3.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LegacyDelegatedSignature {
    #[prost(message, optional, tag = "1")]
    pub delegated_key: ::core::option::Option<
        super::super::message_contents::SignedPublicKey,
    >,
    #[prost(message, optional, tag = "2")]
    pub signature: ::core::option::Option<RecoverableEcdsaSignature>,
}
impl ::prost::Name for LegacyDelegatedSignature {
    const NAME: &'static str = "LegacyDelegatedSignature";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.LegacyDelegatedSignature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.LegacyDelegatedSignature".into()
    }
}
/// A wrapper for all possible signature types
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Signature {
    /// Must have two properties:
    ///
    /// 1. An identifier (address or public key) for the signer must either be
    ///    recoverable, or specified as a field.
    /// 1. The signer certifies that the signing payload is correct. The payload
    ///    must be inferred from the context in which the signature is provided.
    #[prost(oneof = "signature::Signature", tags = "1, 2, 3, 4, 5")]
    pub signature: ::core::option::Option<signature::Signature>,
}
/// Nested message and enum types in `Signature`.
pub mod signature {
    /// Must have two properties:
    ///
    /// 1. An identifier (address or public key) for the signer must either be
    ///    recoverable, or specified as a field.
    /// 1. The signer certifies that the signing payload is correct. The payload
    ///    must be inferred from the context in which the signature is provided.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Signature {
        #[prost(message, tag = "1")]
        Erc191(super::RecoverableEcdsaSignature),
        #[prost(message, tag = "2")]
        Erc6492(super::SmartContractWalletSignature),
        #[prost(message, tag = "3")]
        InstallationKey(super::RecoverableEd25519Signature),
        #[prost(message, tag = "4")]
        DelegatedErc191(super::LegacyDelegatedSignature),
        #[prost(message, tag = "5")]
        Passkey(super::RecoverablePasskeySignature),
    }
}
impl ::prost::Name for Signature {
    const NAME: &'static str = "Signature";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.Signature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.Signature".into()
    }
}
/// The identifier for a member of an XID
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MemberIdentifier {
    #[prost(oneof = "member_identifier::Kind", tags = "1, 2, 3")]
    pub kind: ::core::option::Option<member_identifier::Kind>,
}
/// Nested message and enum types in `MemberIdentifier`.
pub mod member_identifier {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Kind {
        #[prost(string, tag = "1")]
        EthereumAddress(::prost::alloc::string::String),
        #[prost(bytes, tag = "2")]
        InstallationPublicKey(::prost::alloc::vec::Vec<u8>),
        #[prost(message, tag = "3")]
        Passkey(super::Passkey),
    }
}
impl ::prost::Name for MemberIdentifier {
    const NAME: &'static str = "MemberIdentifier";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.MemberIdentifier".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.MemberIdentifier".into()
    }
}
/// Passkey identifier
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Passkey {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, optional, tag = "2")]
    pub relying_party: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for Passkey {
    const NAME: &'static str = "Passkey";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.Passkey".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.Passkey".into()
    }
}
/// single member that optionally indicates the member that added them
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Member {
    #[prost(message, optional, tag = "1")]
    pub identifier: ::core::option::Option<MemberIdentifier>,
    #[prost(message, optional, tag = "2")]
    pub added_by_entity: ::core::option::Option<MemberIdentifier>,
    #[prost(uint64, optional, tag = "3")]
    pub client_timestamp_ns: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub added_on_chain_id: ::core::option::Option<u64>,
}
impl ::prost::Name for Member {
    const NAME: &'static str = "Member";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.Member".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.Member".into()
    }
}
/// The first entry of any XID log. The XID must be deterministically derivable
/// from the address and nonce.
/// The recovery address defaults to the initial associated_address unless
/// there is a subsequent ChangeRecoveryAddress in the log.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateInbox {
    #[prost(string, tag = "1")]
    pub initial_identifier: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub nonce: u64,
    /// Must be an addressable member
    #[prost(message, optional, tag = "3")]
    pub initial_identifier_signature: ::core::option::Option<Signature>,
    #[prost(enumeration = "IdentifierKind", tag = "4")]
    pub initial_identifier_kind: i32,
    /// Should be provided if identifier kind is passkey
    #[prost(string, optional, tag = "5")]
    pub relying_party: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for CreateInbox {
    const NAME: &'static str = "CreateInbox";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.CreateInbox".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.CreateInbox".into()
    }
}
/// Adds a new member for an XID - either an addressable member such as a
/// wallet, or an installation acting on behalf of an address.
/// A key-pair that has been associated with one role MUST not be permitted to be
/// associated with a different role.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddAssociation {
    #[prost(message, optional, tag = "1")]
    pub new_member_identifier: ::core::option::Option<MemberIdentifier>,
    #[prost(message, optional, tag = "2")]
    pub existing_member_signature: ::core::option::Option<Signature>,
    #[prost(message, optional, tag = "3")]
    pub new_member_signature: ::core::option::Option<Signature>,
    /// Should be provided if identifier kind is passkey
    #[prost(string, optional, tag = "4")]
    pub relying_party: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for AddAssociation {
    const NAME: &'static str = "AddAssociation";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.AddAssociation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.AddAssociation".into()
    }
}
/// Revokes a member from an XID. The recovery address must sign the revocation.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RevokeAssociation {
    #[prost(message, optional, tag = "1")]
    pub member_to_revoke: ::core::option::Option<MemberIdentifier>,
    #[prost(message, optional, tag = "2")]
    pub recovery_identifier_signature: ::core::option::Option<Signature>,
}
impl ::prost::Name for RevokeAssociation {
    const NAME: &'static str = "RevokeAssociation";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.RevokeAssociation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.RevokeAssociation".into()
    }
}
/// Changes the recovery identifier for an XID. The recovery identifier is not required
/// to be a member of the XID. In addition to being able to add members, the
/// recovery identifier can also revoke members.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ChangeRecoveryAddress {
    #[prost(string, tag = "1")]
    pub new_recovery_identifier: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub existing_recovery_identifier_signature: ::core::option::Option<Signature>,
    #[prost(enumeration = "IdentifierKind", tag = "3")]
    pub new_recovery_identifier_kind: i32,
    /// Should be provided if identifier kind is passkey
    #[prost(string, optional, tag = "4")]
    pub relying_party: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for ChangeRecoveryAddress {
    const NAME: &'static str = "ChangeRecoveryAddress";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.ChangeRecoveryAddress".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.ChangeRecoveryAddress".into()
    }
}
/// A single identity operation
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IdentityAction {
    #[prost(oneof = "identity_action::Kind", tags = "1, 2, 3, 4")]
    pub kind: ::core::option::Option<identity_action::Kind>,
}
/// Nested message and enum types in `IdentityAction`.
pub mod identity_action {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag = "1")]
        CreateInbox(super::CreateInbox),
        #[prost(message, tag = "2")]
        Add(super::AddAssociation),
        #[prost(message, tag = "3")]
        Revoke(super::RevokeAssociation),
        #[prost(message, tag = "4")]
        ChangeRecoveryAddress(super::ChangeRecoveryAddress),
    }
}
impl ::prost::Name for IdentityAction {
    const NAME: &'static str = "IdentityAction";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.IdentityAction".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.IdentityAction".into()
    }
}
/// One or more identity actions that were signed together.
/// Example: \[CreateXid, AddAssociation, ChangeRecoveryAddress\]
///
/// 1. The batched signature text is created by concatenating the signature text
///    of each association together with a separator, '\n\n\n'.
/// 1. The user signs this concatenated result.
/// 1. The resulting signature is added to each association proto where relevant.
///    The same signature may be used for multiple associations in the array.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IdentityUpdate {
    #[prost(message, repeated, tag = "1")]
    pub actions: ::prost::alloc::vec::Vec<IdentityAction>,
    #[prost(uint64, tag = "2")]
    pub client_timestamp_ns: u64,
    #[prost(string, tag = "3")]
    pub inbox_id: ::prost::alloc::string::String,
}
impl ::prost::Name for IdentityUpdate {
    const NAME: &'static str = "IdentityUpdate";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.IdentityUpdate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.IdentityUpdate".into()
    }
}
/// Map of members belonging to an inbox_id
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MemberMap {
    #[prost(message, optional, tag = "1")]
    pub key: ::core::option::Option<MemberIdentifier>,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<Member>,
}
impl ::prost::Name for MemberMap {
    const NAME: &'static str = "MemberMap";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.MemberMap".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.MemberMap".into()
    }
}
/// A final association state resulting from multiple `IdentityUpdates`
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssociationState {
    #[prost(string, tag = "1")]
    pub inbox_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub members: ::prost::alloc::vec::Vec<MemberMap>,
    #[prost(string, tag = "3")]
    pub recovery_identifier: ::prost::alloc::string::String,
    #[prost(bytes = "vec", repeated, tag = "4")]
    pub seen_signatures: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(enumeration = "IdentifierKind", tag = "5")]
    pub recovery_identifier_kind: i32,
    /// Should be provided if identifier kind is passkey
    #[prost(string, optional, tag = "6")]
    pub relying_party: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for AssociationState {
    const NAME: &'static str = "AssociationState";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.AssociationState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.AssociationState".into()
    }
}
/// / state diff between two final AssociationStates
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssociationStateDiff {
    #[prost(message, repeated, tag = "1")]
    pub new_members: ::prost::alloc::vec::Vec<MemberIdentifier>,
    #[prost(message, repeated, tag = "2")]
    pub removed_members: ::prost::alloc::vec::Vec<MemberIdentifier>,
}
impl ::prost::Name for AssociationStateDiff {
    const NAME: &'static str = "AssociationStateDiff";
    const PACKAGE: &'static str = "xmtp.identity.associations";
    fn full_name() -> ::prost::alloc::string::String {
        "xmtp.identity.associations.AssociationStateDiff".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/xmtp.identity.associations.AssociationStateDiff".into()
    }
}
/// List of identity kinds
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IdentifierKind {
    /// Ethereum on old clients
    Unspecified = 0,
    Ethereum = 1,
    Passkey = 2,
}
impl IdentifierKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "IDENTIFIER_KIND_UNSPECIFIED",
            Self::Ethereum => "IDENTIFIER_KIND_ETHEREUM",
            Self::Passkey => "IDENTIFIER_KIND_PASSKEY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IDENTIFIER_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "IDENTIFIER_KIND_ETHEREUM" => Some(Self::Ethereum),
            "IDENTIFIER_KIND_PASSKEY" => Some(Self::Passkey),
            _ => None,
        }
    }
}
