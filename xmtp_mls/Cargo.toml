[package]
edition = "2021"
license.workspace = true
name = "xmtp_mls"
version.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
targets = [
    "x86_64-unknown-linux-gnu",
    "wasm32-unknown-unknown",
    "aarch64-apple-darwin",
]

[features]
bench = [
    "test-utils",
    "indicatif",
    "tracing-subscriber",
    "anyhow",
    "dep:xmtp_api_grpc",
    "criterion",
    "dep:fdlimit",
    "dep:ethers",
    "dep:const_format",
    "xmtp_common/bench"
]
default = ["grpc-api"]
grpc-api = ["dep:xmtp_api_grpc"]
http-api = ["dep:xmtp_api_http"]
test-utils = [
    "tracing-subscriber",
    "dep:tracing-wasm",
    "dep:console_error_panic_hook",
    "xmtp_id/test-utils",
    "xmtp_proto/test-utils",
    "xmtp_api_http/test-utils",
    "xmtp_api_grpc/test-utils",
    "dep:const_format",
    "mockall",
    "xmtp_common/test-utils",
]
update-schema = ["toml"]

[dependencies]
aes-gcm = { version = "0.10.3", features = ["std"] }
async-trait.workspace = true
bincode.workspace = true
diesel_migrations.workspace = true
futures = { workspace = true, features = ["alloc"] }
hex.workspace = true
hkdf.workspace = true
openmls_rust_crypto = { workspace = true }
openmls_traits = { workspace = true }
parking_lot.workspace = true
prost = { workspace = true, features = ["prost-derive"] }
rand = { workspace = true }
reqwest = { workspace = true }
serde = { workspace = true }
serde_json.workspace = true
sha2.workspace = true
thiserror = { workspace = true }
tls_codec = { workspace = true }
tokio-stream = { version = "0.1", default-features = false, features = [
    "sync",
] }
tracing.workspace = true
trait-variant.workspace = true
xmtp_common.workspace = true
zeroize.workspace = true
pin-project-lite.workspace = true
bytes.workspace = true

# XMTP/Local
xmtp_content_types = { path = "../xmtp_content_types" }
xmtp_cryptography = { workspace = true }
xmtp_id = { path = "../xmtp_id" }
xmtp_proto = { workspace = true, features = ["convert"] }

# Optional/Features
console_error_panic_hook = { workspace = true, optional = true }
const_format = { workspace = true, optional = true }
ethers = { workspace = true, features = ["openssl"], optional = true }
fdlimit = { workspace = true, optional = true }
toml = { version = "0.8.4", optional = true }
tracing-wasm = { version = "0.2", optional = true }
xmtp_api_http = { path = "../xmtp_api_http", optional = true }

# Test/Bench Utils
anyhow = { workspace = true, optional = true }
criterion = { workspace = true, optional = true }
hmac = "0.12.1"
indicatif = { version = "0.17", optional = true }
mockall = { version = "0.13.1", optional = true }
tracing-subscriber = { workspace = true, features = [
    "env-filter",
    "fmt",
    "ansi",
    "json",
    "registry",
], optional = true }


[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
chrono = { workspace = true, features = ["clock"] }
diesel = { workspace = true, features = [
    "r2d2",
    "returning_clauses_for_sqlite_3_35",
    "sqlite",
    "32-column-tables"
] }
dyn-clone.workspace = true
libsqlite3-sys = { workspace = true }
openmls.workspace = true
openssl-sys.workspace = true
openssl.workspace = true
tokio = { workspace = true, features = [
    "macros",
    "tracing",
    "rt",
    "rt-multi-thread",
] }
xmtp_api_grpc = { path = "../xmtp_api_grpc", optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
chrono = { workspace = true, features = ["wasmbind"] }
diesel = { workspace = true, features = [
    "r2d2",
    "returning_clauses_for_sqlite_3_35",
] }
getrandom = { workspace = true, features = ["js"] }
gloo-timers = { workspace = true, features = ["futures"] }
openmls = { workspace = true, features = ["js"] }
sqlite-web = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "time"] }
wasm-bindgen-futures.workspace = true
web-sys.workspace = true


[dev-dependencies]
anyhow.workspace = true
const_format.workspace = true
mockall = "0.13.1"
openmls_basic_credential.workspace = true
wasm-bindgen-test.workspace = true
xmtp_common = { workspace = true, features = ["test-utils"] }
xmtp_id = { path = "../xmtp_id", features = ["test-utils"] }
xmtp_proto = { workspace = true, features = ["test-utils"] }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
ctor.workspace = true
ethers = { workspace = true, features = ["openssl"] }
mockito = "1.6.1"
openmls = { workspace = true }
tempfile = "3.15.0"
tracing-subscriber = { workspace = true, features = [
    "env-filter",
    "fmt",
    "ansi",
    "json",
] }
xmtp_api_grpc = { path = "../xmtp_api_grpc", features = ["test-utils"] }
xmtp_api_http = { path = "../xmtp_api_http", features = ["test-utils"] }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
console_error_panic_hook = { version = "0.1" }
ethers = { workspace = true, features = ["rustls"] }
openmls = { workspace = true, features = ["js"] }
sqlite-web = { workspace = true, features = ["unsafe-debug-query", "r2d2"] }
tracing-subscriber = { workspace = true, features = ["env-filter", "json"] }
tracing-wasm = { version = "0.2" }
wasm-bindgen-test.workspace = true
xmtp_api_http = { path = "../xmtp_api_http", features = ["test-utils"] }

[[bin]]
doc = false
name = "update-schema"
path = "src/bin/update-schema.rs"
required-features = ["update-schema"]

[[bench]]
harness = false
name = "group_limit"
required-features = ["bench"]

[[bench]]
harness = false
name = "crypto"
required-features = ["bench"]

[[bench]]
harness = false
name = "identity"
required-features = ["bench"]


#[[bench]]
#harness = false
#name = "sync"
#required-features = ["bench"]
