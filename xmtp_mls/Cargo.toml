[package]
edition = "2021"
license.workspace = true
name = "xmtp_mls"
version.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
targets = [
  "x86_64-unknown-linux-gnu",
  "wasm32-unknown-unknown",
  "aarch64-apple-darwin",
]

[features]
test-utils = [
  "tracing-subscriber",
  "xmtp_id/test-utils",
  "xmtp_db/test-utils",
  "xmtp_proto/test-utils",
  "xmtp_api/test-utils",
  "xmtp_api_http/test-utils",
  "xmtp_api_grpc/test-utils",
  "dep:const_format",
  "xmtp_common/test-utils",
  "dep:ethers",
  "dep:passkey",
  "dep:coset",
  "dep:url",
  "dep:public-suffix",
  "dep:futures-executor",
]
bench = [
  "test-utils",
  "indicatif",
  "tracing-subscriber",
  "dep:xmtp_api_grpc",
  "criterion",
  "dep:fdlimit",
  "dep:ethers",
  "dep:const_format",
  "xmtp_common/bench",
]
default = ["grpc-api"]
grpc-api = ["dep:xmtp_api_grpc", "xmtp_api_d14n?/grpc-api"]
http-api = ["dep:xmtp_api_http", "xmtp_api_d14n?/http-api"]
d14n = ["dep:xmtp_api_d14n"]

[dependencies]
aes-gcm = { version = "0.10.3", features = ["std"] }
async-compression.workspace = true
async-trait.workspace = true
bincode.workspace = true
bytes.workspace = true
futures = { workspace = true, features = ["alloc", "std"] }
futures-util = { version = "0.3", default-features = false, features = ["io"] }
hex.workspace = true
hkdf.workspace = true
openmls_rust_crypto = { workspace = true }
openmls_traits = { workspace = true }
parking_lot.workspace = true
pin-project-lite.workspace = true
prost = { workspace = true, features = ["prost-derive"] }
rand = { workspace = true }
reqwest = { workspace = true, features = ["stream"] }
serde = { workspace = true }
serde_json.workspace = true
sha2.workspace = true
thiserror = { workspace = true }
tls_codec = { workspace = true }
tokio-stream = { workspace = true, default-features = false, features = [
  "sync",
] }
tokio-util = { version = "0.7", default-features = false, features = [
  "compat",
] }
tracing.workspace = true
trait-variant.workspace = true
xmtp_common.workspace = true
zeroize.workspace = true

# XMTP/Local
xmtp_api = { workspace = true }
xmtp_content_types = { path = "../xmtp_content_types" }
xmtp_cryptography = { workspace = true }
xmtp_db = { workspace = true }
xmtp_id = { path = "../xmtp_id" }
xmtp_proto = { workspace = true, features = ["convert"] }

# Optional/Features
const_format = { workspace = true, optional = true }
coset = { version = "0.3", optional = true }
ethers = { workspace = true, features = ["openssl"], optional = true }
fdlimit = { workspace = true, optional = true }
futures-executor = { version = "0.3", optional = true }
passkey = { version = "0.4", optional = true }
public-suffix = { version = "0.1.2", optional = true }
url = { workspace = true, optional = true }
xmtp_api_d14n = { workspace = true, optional = true }
xmtp_api_http = { path = "../xmtp_api_http", optional = true }

# Test/Bench Utils
criterion = { workspace = true, optional = true }
hmac = "0.12.1"
indicatif = { version = "0.17", optional = true }
tracing-subscriber = { workspace = true, features = [
  "env-filter",
  "fmt",
  "ansi",
  "json",
  "registry",
], optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { workspace = true, features = [
  "macros",
  "tracing",
  "rt",
  "rt-multi-thread",
] }
chrono = { workspace = true, features = ["clock"] }
dyn-clone.workspace = true
openmls.workspace = true
openssl.workspace = true
openssl-sys.workspace = true
xmtp_api_grpc = { workspace = true, optional = true }

[target.'cfg(all(target_family = "wasm", target_os = "unknown"))'.dependencies]
chrono = { workspace = true, features = ["wasmbind"] }
getrandom = { workspace = true, features = ["js"] }
gloo-timers = { workspace = true, features = ["futures"] }
openmls = { workspace = true, features = ["js"] }
tokio = { workspace = true, features = ["macros", "rt", "time"] }
wasm-bindgen-futures.workspace = true
web-sys.workspace = true

[dev-dependencies]
const_format.workspace = true
openmls_basic_credential.workspace = true
wasm-bindgen-test.workspace = true
xmtp_common = { workspace = true, features = ["test-utils"] }
xmtp_api = { workspace = true, features = ["test-utils"] }
xmtp_id = { path = "../xmtp_id", features = ["test-utils"] }
xmtp_proto = { workspace = true, features = ["test-utils"] }
fdlimit = { workspace = true }
once_cell.workspace = true
rstest = { workspace = true, features = ["async-timeout"] }
xmtp_db = { workspace = true, features = ["test-utils"] }
passkey = { version = "0.4" }
coset = { version = "0.3" }
url = { workspace = true }
public-suffix = { version = "0.1.2" }
futures-executor = { version = "0.3" }
xmtp_api_d14n = { workspace = true, features = ["test-utils"] }


[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
ctor.workspace = true
ethers = { workspace = true, features = ["openssl"] }
mockito = "1.6.1"
openmls = { workspace = true }
tempfile = "3.15.0"
tracing-subscriber = { workspace = true, features = [
  "env-filter",
  "fmt",
  "ansi",
  "json",
] }
diesel = { workspace = true, features = [
  "returning_clauses_for_sqlite_3_35",
  "sqlite",
  "32-column-tables",
] }
xmtp_api_grpc = { workspace = true, features = ["test-utils"] }
xmtp_api_http = { workspace = true, features = ["test-utils"] }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
ethers = { workspace = true, features = ["rustls"] }
openmls = { workspace = true, features = ["js"] }
tracing-subscriber = { workspace = true, features = ["env-filter", "json"] }
wasm-bindgen-test.workspace = true
xmtp_api_http = { path = "../xmtp_api_http", features = ["test-utils"] }
diesel = { workspace = true, features = [
  "returning_clauses_for_sqlite_3_35",
  "sqlite",
  "32-column-tables",
] }
sqlite-wasm-rs = { version = ">=0.3.0, <0.4.0", default-features = false, features = [
  "bundled",
] }

[[bench]]
harness = false
name = "group_limit"
required-features = ["bench"]

[[bench]]
harness = false
name = "crypto"
required-features = ["bench"]

[[bench]]
harness = false
name = "identity"
required-features = ["bench"]


#[[bench]]
#harness = false
#name = "sync"
#required-features = ["bench"]

[package.metadata.wasm-pack.profile.dev.wasm-bindgen]
split-linked-modules = true
