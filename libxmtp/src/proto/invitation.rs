// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/invitation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Unsealed invitation V1
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.InvitationV1)
pub struct InvitationV1 {
    // message fields
    ///  topic name chosen for this conversation.
    ///  It MUST be randomly generated bytes (length >= 32),
    ///  then base64 encoded without padding
    // @@protoc_insertion_point(field:xmtp.message_contents.InvitationV1.topic)
    pub topic: ::std::string::String,
    ///  A context object defining metadata
    // @@protoc_insertion_point(field:xmtp.message_contents.InvitationV1.context)
    pub context: ::protobuf::MessageField<invitation_v1::Context>,
    // message oneof groups
    pub encryption: ::std::option::Option<invitation_v1::Encryption>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.InvitationV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InvitationV1 {
    fn default() -> &'a InvitationV1 {
        <InvitationV1 as ::protobuf::Message>::default_instance()
    }
}

impl InvitationV1 {
    pub fn new() -> InvitationV1 {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 3;

    pub fn aes256_gcm_hkdf_sha256(&self) -> &invitation_v1::Aes256gcmHkdfsha256 {
        match self.encryption {
            ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(ref v)) => v,
            _ => <invitation_v1::Aes256gcmHkdfsha256 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_aes256_gcm_hkdf_sha256(&mut self) {
        self.encryption = ::std::option::Option::None;
    }

    pub fn has_aes256_gcm_hkdf_sha256(&self) -> bool {
        match self.encryption {
            ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aes256_gcm_hkdf_sha256(&mut self, v: invitation_v1::Aes256gcmHkdfsha256) {
        self.encryption = ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aes256_gcm_hkdf_sha256(&mut self) -> &mut invitation_v1::Aes256gcmHkdfsha256 {
        if let ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(_)) = self.encryption {
        } else {
            self.encryption = ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(invitation_v1::Aes256gcmHkdfsha256::new()));
        }
        match self.encryption {
            ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aes256_gcm_hkdf_sha256(&mut self) -> invitation_v1::Aes256gcmHkdfsha256 {
        if self.has_aes256_gcm_hkdf_sha256() {
            match self.encryption.take() {
                ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(v)) => v,
                _ => panic!(),
            }
        } else {
            invitation_v1::Aes256gcmHkdfsha256::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &InvitationV1| { &m.topic },
            |m: &mut InvitationV1| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, invitation_v1::Context>(
            "context",
            |m: &InvitationV1| { &m.context },
            |m: &mut InvitationV1| { &mut m.context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, invitation_v1::Aes256gcmHkdfsha256>(
            "aes256_gcm_hkdf_sha256",
            InvitationV1::has_aes256_gcm_hkdf_sha256,
            InvitationV1::aes256_gcm_hkdf_sha256,
            InvitationV1::mut_aes256_gcm_hkdf_sha256,
            InvitationV1::set_aes256_gcm_hkdf_sha256,
        ));
        oneofs.push(invitation_v1::Encryption::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InvitationV1>(
            "InvitationV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InvitationV1 {
    const NAME: &'static str = "InvitationV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.topic = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.context)?;
                },
                26 => {
                    self.encryption = ::std::option::Option::Some(invitation_v1::Encryption::Aes256GcmHkdfSha256(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if let Some(v) = self.context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.encryption {
            match v {
                &invitation_v1::Encryption::Aes256GcmHkdfSha256(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if let Some(v) = self.context.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.encryption {
            match v {
                &invitation_v1::Encryption::Aes256GcmHkdfSha256(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InvitationV1 {
        InvitationV1::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.context.clear();
        self.encryption = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InvitationV1 {
        static instance: InvitationV1 = InvitationV1 {
            topic: ::std::string::String::new(),
            context: ::protobuf::MessageField::none(),
            encryption: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InvitationV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InvitationV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InvitationV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InvitationV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `InvitationV1`
pub mod invitation_v1 {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.InvitationV1.encryption)
    pub enum Encryption {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.InvitationV1.aes256_gcm_hkdf_sha256)
        Aes256GcmHkdfSha256(Aes256gcmHkdfsha256),
    }

    impl ::protobuf::Oneof for Encryption {
    }

    impl ::protobuf::OneofFull for Encryption {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::InvitationV1 as ::protobuf::MessageFull>::descriptor().oneof_by_name("encryption").unwrap()).clone()
        }
    }

    impl Encryption {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Encryption>("encryption")
        }
    }
    ///  Supported encryption schemes
    ///  AES256-GCM-HKDF-SHA256
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256)
    pub struct Aes256gcmHkdfsha256 {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256.key_material)
        pub key_material: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Aes256gcmHkdfsha256 {
        fn default() -> &'a Aes256gcmHkdfsha256 {
            <Aes256gcmHkdfsha256 as ::protobuf::Message>::default_instance()
        }
    }

    impl Aes256gcmHkdfsha256 {
        pub fn new() -> Aes256gcmHkdfsha256 {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "key_material",
                |m: &Aes256gcmHkdfsha256| { &m.key_material },
                |m: &mut Aes256gcmHkdfsha256| { &mut m.key_material },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Aes256gcmHkdfsha256>(
                "InvitationV1.Aes256gcmHkdfsha256",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Aes256gcmHkdfsha256 {
        const NAME: &'static str = "Aes256gcmHkdfsha256";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key_material = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.key_material.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.key_material);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.key_material.is_empty() {
                os.write_bytes(1, &self.key_material)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Aes256gcmHkdfsha256 {
            Aes256gcmHkdfsha256::new()
        }

        fn clear(&mut self) {
            self.key_material.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Aes256gcmHkdfsha256 {
            static instance: Aes256gcmHkdfsha256 = Aes256gcmHkdfsha256 {
                key_material: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Aes256gcmHkdfsha256 {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("InvitationV1.Aes256gcmHkdfsha256").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Aes256gcmHkdfsha256 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Aes256gcmHkdfsha256 {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  The context type
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.InvitationV1.Context)
    pub struct Context {
        // message fields
        ///  Expected to be a URI (ie xmtp.org/convo1)
        // @@protoc_insertion_point(field:xmtp.message_contents.InvitationV1.Context.conversation_id)
        pub conversation_id: ::std::string::String,
        ///  Key value map of additional metadata that would be exposed to
        ///  application developers and could be used for filtering
        // @@protoc_insertion_point(field:xmtp.message_contents.InvitationV1.Context.metadata)
        pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.InvitationV1.Context.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Context {
        fn default() -> &'a Context {
            <Context as ::protobuf::Message>::default_instance()
        }
    }

    impl Context {
        pub fn new() -> Context {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "conversation_id",
                |m: &Context| { &m.conversation_id },
                |m: &mut Context| { &mut m.conversation_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "metadata",
                |m: &Context| { &m.metadata },
                |m: &mut Context| { &mut m.metadata },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Context>(
                "InvitationV1.Context",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Context {
        const NAME: &'static str = "Context";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.conversation_id = is.read_string()?;
                    },
                    18 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.metadata.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.conversation_id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.conversation_id);
            }
            for (k, v) in &self.metadata {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.conversation_id.is_empty() {
                os.write_string(1, &self.conversation_id)?;
            }
            for (k, v) in &self.metadata {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(18)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Context {
            Context::new()
        }

        fn clear(&mut self) {
            self.conversation_id.clear();
            self.metadata.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Context {
            static instance: ::protobuf::rt::Lazy<Context> = ::protobuf::rt::Lazy::new();
            instance.get(Context::new)
        }
    }

    impl ::protobuf::MessageFull for Context {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("InvitationV1.Context").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Context {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Context {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Sealed Invitation V1 Header
///  Header carries information that is unencrypted, thus readable by the network
///  it is however authenticated as associated data with the AEAD scheme used
///  to encrypt the invitation body, thus providing tamper evidence.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.SealedInvitationHeaderV1)
pub struct SealedInvitationHeaderV1 {
    // message fields
    // @@protoc_insertion_point(field:xmtp.message_contents.SealedInvitationHeaderV1.sender)
    pub sender: ::protobuf::MessageField<super::public_key::SignedPublicKeyBundle>,
    // @@protoc_insertion_point(field:xmtp.message_contents.SealedInvitationHeaderV1.recipient)
    pub recipient: ::protobuf::MessageField<super::public_key::SignedPublicKeyBundle>,
    // @@protoc_insertion_point(field:xmtp.message_contents.SealedInvitationHeaderV1.created_ns)
    pub created_ns: u64,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.SealedInvitationHeaderV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SealedInvitationHeaderV1 {
    fn default() -> &'a SealedInvitationHeaderV1 {
        <SealedInvitationHeaderV1 as ::protobuf::Message>::default_instance()
    }
}

impl SealedInvitationHeaderV1 {
    pub fn new() -> SealedInvitationHeaderV1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::SignedPublicKeyBundle>(
            "sender",
            |m: &SealedInvitationHeaderV1| { &m.sender },
            |m: &mut SealedInvitationHeaderV1| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::public_key::SignedPublicKeyBundle>(
            "recipient",
            |m: &SealedInvitationHeaderV1| { &m.recipient },
            |m: &mut SealedInvitationHeaderV1| { &mut m.recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_ns",
            |m: &SealedInvitationHeaderV1| { &m.created_ns },
            |m: &mut SealedInvitationHeaderV1| { &mut m.created_ns },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SealedInvitationHeaderV1>(
            "SealedInvitationHeaderV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SealedInvitationHeaderV1 {
    const NAME: &'static str = "SealedInvitationHeaderV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sender)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.recipient)?;
                },
                24 => {
                    self.created_ns = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.recipient.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.created_ns != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.created_ns);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sender.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.recipient.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.created_ns != 0 {
            os.write_uint64(3, self.created_ns)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SealedInvitationHeaderV1 {
        SealedInvitationHeaderV1::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.recipient.clear();
        self.created_ns = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SealedInvitationHeaderV1 {
        static instance: SealedInvitationHeaderV1 = SealedInvitationHeaderV1 {
            sender: ::protobuf::MessageField::none(),
            recipient: ::protobuf::MessageField::none(),
            created_ns: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SealedInvitationHeaderV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SealedInvitationHeaderV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SealedInvitationHeaderV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SealedInvitationHeaderV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Sealed Invitation V1
///  Invitation encrypted with key material derived from the sender's and
///  recipient's public key bundles using simplified X3DH where
///  the sender's ephemeral key is replaced with sender's pre-key.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.SealedInvitationV1)
pub struct SealedInvitationV1 {
    // message fields
    ///  encoded SealedInvitationHeaderV1 used as associated data for Ciphertext
    // @@protoc_insertion_point(field:xmtp.message_contents.SealedInvitationV1.header_bytes)
    pub header_bytes: ::std::vec::Vec<u8>,
    ///  Ciphertext.payload MUST contain encrypted InvitationV1.
    // @@protoc_insertion_point(field:xmtp.message_contents.SealedInvitationV1.ciphertext)
    pub ciphertext: ::protobuf::MessageField<super::ciphertext::Ciphertext>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.SealedInvitationV1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SealedInvitationV1 {
    fn default() -> &'a SealedInvitationV1 {
        <SealedInvitationV1 as ::protobuf::Message>::default_instance()
    }
}

impl SealedInvitationV1 {
    pub fn new() -> SealedInvitationV1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "header_bytes",
            |m: &SealedInvitationV1| { &m.header_bytes },
            |m: &mut SealedInvitationV1| { &mut m.header_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ciphertext::Ciphertext>(
            "ciphertext",
            |m: &SealedInvitationV1| { &m.ciphertext },
            |m: &mut SealedInvitationV1| { &mut m.ciphertext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SealedInvitationV1>(
            "SealedInvitationV1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SealedInvitationV1 {
    const NAME: &'static str = "SealedInvitationV1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.header_bytes = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ciphertext)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.header_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.header_bytes);
        }
        if let Some(v) = self.ciphertext.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.header_bytes.is_empty() {
            os.write_bytes(1, &self.header_bytes)?;
        }
        if let Some(v) = self.ciphertext.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SealedInvitationV1 {
        SealedInvitationV1::new()
    }

    fn clear(&mut self) {
        self.header_bytes.clear();
        self.ciphertext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SealedInvitationV1 {
        static instance: SealedInvitationV1 = SealedInvitationV1 {
            header_bytes: ::std::vec::Vec::new(),
            ciphertext: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SealedInvitationV1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SealedInvitationV1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SealedInvitationV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SealedInvitationV1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Versioned Sealed Invitation
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.SealedInvitation)
pub struct SealedInvitation {
    // message oneof groups
    pub version: ::std::option::Option<sealed_invitation::Version>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.SealedInvitation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SealedInvitation {
    fn default() -> &'a SealedInvitation {
        <SealedInvitation as ::protobuf::Message>::default_instance()
    }
}

impl SealedInvitation {
    pub fn new() -> SealedInvitation {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.SealedInvitationV1 v1 = 1;

    pub fn v1(&self) -> &SealedInvitationV1 {
        match self.version {
            ::std::option::Option::Some(sealed_invitation::Version::V1(ref v)) => v,
            _ => <SealedInvitationV1 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_v1(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_v1(&self) -> bool {
        match self.version {
            ::std::option::Option::Some(sealed_invitation::Version::V1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v1(&mut self, v: SealedInvitationV1) {
        self.version = ::std::option::Option::Some(sealed_invitation::Version::V1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v1(&mut self) -> &mut SealedInvitationV1 {
        if let ::std::option::Option::Some(sealed_invitation::Version::V1(_)) = self.version {
        } else {
            self.version = ::std::option::Option::Some(sealed_invitation::Version::V1(SealedInvitationV1::new()));
        }
        match self.version {
            ::std::option::Option::Some(sealed_invitation::Version::V1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v1(&mut self) -> SealedInvitationV1 {
        if self.has_v1() {
            match self.version.take() {
                ::std::option::Option::Some(sealed_invitation::Version::V1(v)) => v,
                _ => panic!(),
            }
        } else {
            SealedInvitationV1::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SealedInvitationV1>(
            "v1",
            SealedInvitation::has_v1,
            SealedInvitation::v1,
            SealedInvitation::mut_v1,
            SealedInvitation::set_v1,
        ));
        oneofs.push(sealed_invitation::Version::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SealedInvitation>(
            "SealedInvitation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SealedInvitation {
    const NAME: &'static str = "SealedInvitation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(sealed_invitation::Version::V1(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &sealed_invitation::Version::V1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.version {
            match v {
                &sealed_invitation::Version::V1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SealedInvitation {
        SealedInvitation::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SealedInvitation {
        static instance: SealedInvitation = SealedInvitation {
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SealedInvitation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SealedInvitation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SealedInvitation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SealedInvitation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SealedInvitation`
pub mod sealed_invitation {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.SealedInvitation.version)
    pub enum Version {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.SealedInvitation.v1)
        V1(super::SealedInvitationV1),
    }

    impl ::protobuf::Oneof for Version {
    }

    impl ::protobuf::OneofFull for Version {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SealedInvitation as ::protobuf::MessageFull>::descriptor().oneof_by_name("version").unwrap()).clone()
        }
    }

    impl Version {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Version>("version")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!message_contents/invitation.proto\x12\x15xmtp.message_contents\x1a!me\
    ssage_contents/ciphertext.proto\x1a!message_contents/public_key.proto\"\
    \xec\x03\n\x0cInvitationV1\x12\x14\n\x05topic\x18\x01\x20\x01(\tR\x05top\
    ic\x12E\n\x07context\x18\x02\x20\x01(\x0b2+.xmtp.message_contents.Invita\
    tionV1.ContextR\x07context\x12n\n\x16aes256_gcm_hkdf_sha256\x18\x03\x20\
    \x01(\x0b27.xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256H\0R\
    \x13aes256GcmHkdfSha256\x1a8\n\x13Aes256gcmHkdfsha256\x12!\n\x0ckey_mate\
    rial\x18\x01\x20\x01(\x0cR\x0bkeyMaterial\x1a\xc6\x01\n\x07Context\x12'\
    \n\x0fconversation_id\x18\x01\x20\x01(\tR\x0econversationId\x12U\n\x08me\
    tadata\x18\x02\x20\x03(\x0b29.xmtp.message_contents.InvitationV1.Context\
    .MetadataEntryR\x08metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01B\x0c\n\nencryption\"\xcb\x01\n\x18SealedInvitationHeaderV1\x12\
    D\n\x06sender\x18\x01\x20\x01(\x0b2,.xmtp.message_contents.SignedPublicK\
    eyBundleR\x06sender\x12J\n\trecipient\x18\x02\x20\x01(\x0b2,.xmtp.messag\
    e_contents.SignedPublicKeyBundleR\trecipient\x12\x1d\n\ncreated_ns\x18\
    \x03\x20\x01(\x04R\tcreatedNs\"z\n\x12SealedInvitationV1\x12!\n\x0cheade\
    r_bytes\x18\x01\x20\x01(\x0cR\x0bheaderBytes\x12A\n\nciphertext\x18\x02\
    \x20\x01(\x0b2!.xmtp.message_contents.CiphertextR\nciphertext\"Z\n\x10Se\
    aledInvitation\x12;\n\x02v1\x18\x01\x20\x01(\x0b2).xmtp.message_contents\
    .SealedInvitationV1H\0R\x02v1B\t\n\x07versionBO\n\x1forg.xmtp.proto.mess\
    age.contentsZ,github.com/xmtp/proto/v3/go/message_contentsJ\x8c\x13\n\
    \x06\x12\x04\x03\0G\x01\n\xd4\x01\n\x01\x0c\x12\x03\x03\0\x12\x1a\xc9\
    \x01\x20Invitation\x20is\x20used\x20by\x20an\x20initiator\x20to\x20invit\
    e\x20participants\n\x20into\x20a\x20new\x20conversation.\x20Invitation\
    \x20carries\x20the\x20chosen\x20topic\x20name\n\x20and\x20encryption\x20\
    scheme\x20and\x20key\x20material\x20to\x20be\x20used\x20for\x20message\
    \x20encryption.\n\n\x08\n\x01\x02\x12\x03\x05\0\x1e\n\t\n\x02\x03\0\x12\
    \x03\x07\0+\n\t\n\x02\x03\x01\x12\x03\x08\0+\n\x08\n\x01\x08\x12\x03\n\0\
    C\n\t\n\x02\x08\x0b\x12\x03\n\0C\n\x08\n\x01\x08\x12\x03\x0b\08\n\t\n\
    \x02\x08\x01\x12\x03\x0b\08\n$\n\x02\x04\0\x12\x04\x0e\0*\x01\x1a\x18\
    \x20Unsealed\x20invitation\x20V1\n\n\n\n\x03\x04\0\x01\x12\x03\x0e\x08\
    \x14\nD\n\x04\x04\0\x03\0\x12\x04\x11\x04\x13\x05\x1a6\x20Supported\x20e\
    ncryption\x20schemes\n\x20AES256-GCM-HKDF-SHA256\n\n\x0c\n\x05\x04\0\x03\
    \0\x01\x12\x03\x11\x0c\x1f\n;\n\x06\x04\0\x03\0\x02\0\x12\x03\x12\x08\
    \x1f\",\x20randomly\x20generated\x20key\x20material\x20(32\x20bytes)\n\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\x12\x08\r\n\x0e\n\x07\x04\0\x03\
    \0\x02\0\x01\x12\x03\x12\x0e\x1a\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\
    \x03\x12\x1d\x1e\n\x20\n\x04\x04\0\x03\x01\x12\x04\x16\x04\x1c\x05\x1a\
    \x12\x20The\x20context\x20type\n\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\
    \x16\x0c\x13\n:\n\x06\x04\0\x03\x01\x02\0\x12\x03\x18\x08#\x1a+\x20Expec\
    ted\x20to\x20be\x20a\x20URI\x20(ie\x20xmtp.org/convo1)\n\n\x0e\n\x07\x04\
    \0\x03\x01\x02\0\x05\x12\x03\x18\x08\x0e\n\x0e\n\x07\x04\0\x03\x01\x02\0\
    \x01\x12\x03\x18\x0f\x1e\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03\x18\
    !\"\n\x86\x01\n\x06\x04\0\x03\x01\x02\x01\x12\x03\x1b\x08)\x1aw\x20Key\
    \x20value\x20map\x20of\x20additional\x20metadata\x20that\x20would\x20be\
    \x20exposed\x20to\n\x20application\x20developers\x20and\x20could\x20be\
    \x20used\x20for\x20filtering\n\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x06\x12\
    \x03\x1b\x08\x1b\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03\x1b\x1c$\
    \n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03\x1b'(\n\x92\x01\n\x04\x04\
    \0\x02\0\x12\x03\x20\x04\x15\x1a\x84\x01\x20topic\x20name\x20chosen\x20f\
    or\x20this\x20conversation.\n\x20It\x20MUST\x20be\x20randomly\x20generat\
    ed\x20bytes\x20(length\x20>=\x2032),\n\x20then\x20base64\x20encoded\x20w\
    ithout\x20padding\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x20\x04\n\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x20\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x20\x13\x14\n1\n\x04\x04\0\x02\x01\x12\x03#\x04\x18\x1a$\x20A\
    \x20context\x20object\x20defining\x20metadata\n\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03#\x04\x0b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03#\x0c\x13\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03#\x16\x17\nI\n\x04\x04\0\x08\0\x12\
    \x04&\x04)\x05\x1a;\x20message\x20encryption\x20scheme\x20and\x20keys\
    \x20for\x20this\x20conversation.\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03&\
    \n\x14\nR\n\x04\x04\0\x02\x02\x12\x03(\x087\x1aE\x20Specify\x20the\x20en\
    cryption\x20method\x20to\x20process\x20the\x20key\x20material\x20properl\
    y.\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03(\x08\x1b\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03(\x1c2\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03(56\n\
    \x83\x02\n\x02\x04\x01\x12\x041\05\x01\x1a\xf6\x01\x20Sealed\x20Invitati\
    on\x20V1\x20Header\n\x20Header\x20carries\x20information\x20that\x20is\
    \x20unencrypted,\x20thus\x20readable\x20by\x20the\x20network\n\x20it\x20\
    is\x20however\x20authenticated\x20as\x20associated\x20data\x20with\x20th\
    e\x20AEAD\x20scheme\x20used\n\x20to\x20encrypt\x20the\x20invitation\x20b\
    ody,\x20thus\x20providing\x20tamper\x20evidence.\n\n\n\n\x03\x04\x01\x01\
    \x12\x031\x08\x20\n\x0b\n\x04\x04\x01\x02\0\x12\x032\x04%\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x032\x04\x19\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x032\x1a\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x032#$\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x033\x04(\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x033\x04\
    \x19\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x033\x1a#\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x033&'\n\x0b\n\x04\x04\x01\x02\x02\x12\x034\x04\x1a\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x034\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x034\x0b\x15\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x034\x18\
    \x19\n\xe4\x01\n\x02\x04\x02\x12\x04;\0@\x01\x1a\xd7\x01\x20Sealed\x20In\
    vitation\x20V1\n\x20Invitation\x20encrypted\x20with\x20key\x20material\
    \x20derived\x20from\x20the\x20sender's\x20and\n\x20recipient's\x20public\
    \x20key\x20bundles\x20using\x20simplified\x20X3DH\x20where\n\x20the\x20s\
    ender's\x20ephemeral\x20key\x20is\x20replaced\x20with\x20sender's\x20pre\
    -key.\n\n\n\n\x03\x04\x02\x01\x12\x03;\x08\x1a\nV\n\x04\x04\x02\x02\0\
    \x12\x03=\x04\x1b\x1aI\x20encoded\x20SealedInvitationHeaderV1\x20used\
    \x20as\x20associated\x20data\x20for\x20Ciphertext\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03=\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03=\n\x16\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03=\x19\x1a\nF\n\x04\x04\x02\x02\x01\
    \x12\x03?\x04\x1e\x1a9\x20Ciphertext.payload\x20MUST\x20contain\x20encry\
    pted\x20InvitationV1.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03?\x04\x0e\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03?\x0f\x19\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03?\x1c\x1d\n)\n\x02\x04\x03\x12\x04C\0G\x01\x1a\x1d\
    \x20Versioned\x20Sealed\x20Invitation\n\n\n\n\x03\x04\x03\x01\x12\x03C\
    \x08\x18\n\x0c\n\x04\x04\x03\x08\0\x12\x04D\x04F\x05\n\x0c\n\x05\x04\x03\
    \x08\0\x01\x12\x03D\n\x11\n\x0b\n\x04\x04\x03\x02\0\x12\x03E\x08\"\n\x0c\
    \n\x05\x04\x03\x02\0\x06\x12\x03E\x08\x1a\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03E\x1b\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03E\x20!b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ciphertext::file_descriptor().clone());
            deps.push(super::public_key::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(InvitationV1::generated_message_descriptor_data());
            messages.push(SealedInvitationHeaderV1::generated_message_descriptor_data());
            messages.push(SealedInvitationV1::generated_message_descriptor_data());
            messages.push(SealedInvitation::generated_message_descriptor_data());
            messages.push(invitation_v1::Aes256gcmHkdfsha256::generated_message_descriptor_data());
            messages.push(invitation_v1::Context::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
