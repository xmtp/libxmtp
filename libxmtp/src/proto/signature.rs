// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/signature.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Signature represents a generalized public key signature,
///  defined as a union to support cryptographic algorithm agility.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.Signature)
pub struct Signature {
    // message oneof groups
    pub union: ::std::option::Option<signature::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.Signature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Signature {
    fn default() -> &'a Signature {
        <Signature as ::protobuf::Message>::default_instance()
    }
}

impl Signature {
    pub fn new() -> Signature {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.Signature.ECDSACompact ecdsa_compact = 1;

    pub fn ecdsa_compact(&self) -> &signature::ECDSACompact {
        match self.union {
            ::std::option::Option::Some(signature::Union::EcdsaCompact(ref v)) => v,
            _ => <signature::ECDSACompact as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ecdsa_compact(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_ecdsa_compact(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(signature::Union::EcdsaCompact(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ecdsa_compact(&mut self, v: signature::ECDSACompact) {
        self.union = ::std::option::Option::Some(signature::Union::EcdsaCompact(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ecdsa_compact(&mut self) -> &mut signature::ECDSACompact {
        if let ::std::option::Option::Some(signature::Union::EcdsaCompact(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(signature::Union::EcdsaCompact(signature::ECDSACompact::new()));
        }
        match self.union {
            ::std::option::Option::Some(signature::Union::EcdsaCompact(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ecdsa_compact(&mut self) -> signature::ECDSACompact {
        if self.has_ecdsa_compact() {
            match self.union.take() {
                ::std::option::Option::Some(signature::Union::EcdsaCompact(v)) => v,
                _ => panic!(),
            }
        } else {
            signature::ECDSACompact::new()
        }
    }

    // .xmtp.message_contents.Signature.WalletECDSACompact wallet_ecdsa_compact = 2;

    pub fn wallet_ecdsa_compact(&self) -> &signature::WalletECDSACompact {
        match self.union {
            ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(ref v)) => v,
            _ => <signature::WalletECDSACompact as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_wallet_ecdsa_compact(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_wallet_ecdsa_compact(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_wallet_ecdsa_compact(&mut self, v: signature::WalletECDSACompact) {
        self.union = ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(v))
    }

    // Mutable pointer to the field.
    pub fn mut_wallet_ecdsa_compact(&mut self) -> &mut signature::WalletECDSACompact {
        if let ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(signature::WalletECDSACompact::new()));
        }
        match self.union {
            ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_wallet_ecdsa_compact(&mut self) -> signature::WalletECDSACompact {
        if self.has_wallet_ecdsa_compact() {
            match self.union.take() {
                ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(v)) => v,
                _ => panic!(),
            }
        } else {
            signature::WalletECDSACompact::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, signature::ECDSACompact>(
            "ecdsa_compact",
            Signature::has_ecdsa_compact,
            Signature::ecdsa_compact,
            Signature::mut_ecdsa_compact,
            Signature::set_ecdsa_compact,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, signature::WalletECDSACompact>(
            "wallet_ecdsa_compact",
            Signature::has_wallet_ecdsa_compact,
            Signature::wallet_ecdsa_compact,
            Signature::mut_wallet_ecdsa_compact,
            Signature::set_wallet_ecdsa_compact,
        ));
        oneofs.push(signature::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Signature>(
            "Signature",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Signature {
    const NAME: &'static str = "Signature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.union = ::std::option::Option::Some(signature::Union::EcdsaCompact(is.read_message()?));
                },
                18 => {
                    self.union = ::std::option::Option::Some(signature::Union::WalletEcdsaCompact(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &signature::Union::EcdsaCompact(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &signature::Union::WalletEcdsaCompact(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &signature::Union::EcdsaCompact(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &signature::Union::WalletEcdsaCompact(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Signature {
        Signature::new()
    }

    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Signature {
        static instance: Signature = Signature {
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Signature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Signature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Signature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signature {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Signature`
pub mod signature {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.Signature.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.Signature.ecdsa_compact)
        EcdsaCompact(ECDSACompact),
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.Signature.wallet_ecdsa_compact)
        WalletEcdsaCompact(WalletECDSACompact),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Signature as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
    ///  ECDSA signature bytes and the recovery bit
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.Signature.ECDSACompact)
    pub struct ECDSACompact {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.Signature.ECDSACompact.bytes)
        pub bytes: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.message_contents.Signature.ECDSACompact.recovery)
        pub recovery: u32,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.Signature.ECDSACompact.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ECDSACompact {
        fn default() -> &'a ECDSACompact {
            <ECDSACompact as ::protobuf::Message>::default_instance()
        }
    }

    impl ECDSACompact {
        pub fn new() -> ECDSACompact {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "bytes",
                |m: &ECDSACompact| { &m.bytes },
                |m: &mut ECDSACompact| { &mut m.bytes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "recovery",
                |m: &ECDSACompact| { &m.recovery },
                |m: &mut ECDSACompact| { &mut m.recovery },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ECDSACompact>(
                "Signature.ECDSACompact",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ECDSACompact {
        const NAME: &'static str = "ECDSACompact";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.bytes = is.read_bytes()?;
                    },
                    16 => {
                        self.recovery = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.bytes);
            }
            if self.recovery != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.recovery);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.bytes.is_empty() {
                os.write_bytes(1, &self.bytes)?;
            }
            if self.recovery != 0 {
                os.write_uint32(2, self.recovery)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ECDSACompact {
            ECDSACompact::new()
        }

        fn clear(&mut self) {
            self.bytes.clear();
            self.recovery = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ECDSACompact {
            static instance: ECDSACompact = ECDSACompact {
                bytes: ::std::vec::Vec::new(),
                recovery: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ECDSACompact {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Signature.ECDSACompact").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ECDSACompact {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ECDSACompact {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  ECDSA signature bytes and the recovery bit
    ///  produced by xmtp-js::PublicKey.signWithWallet function, i.e.
    ///  EIP-191 signature of a "Create Identity" message with the key embedded.
    ///  Used to sign identity keys.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.Signature.WalletECDSACompact)
    pub struct WalletECDSACompact {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.Signature.WalletECDSACompact.bytes)
        pub bytes: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.message_contents.Signature.WalletECDSACompact.recovery)
        pub recovery: u32,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.Signature.WalletECDSACompact.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a WalletECDSACompact {
        fn default() -> &'a WalletECDSACompact {
            <WalletECDSACompact as ::protobuf::Message>::default_instance()
        }
    }

    impl WalletECDSACompact {
        pub fn new() -> WalletECDSACompact {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "bytes",
                |m: &WalletECDSACompact| { &m.bytes },
                |m: &mut WalletECDSACompact| { &mut m.bytes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "recovery",
                |m: &WalletECDSACompact| { &m.recovery },
                |m: &mut WalletECDSACompact| { &mut m.recovery },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WalletECDSACompact>(
                "Signature.WalletECDSACompact",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for WalletECDSACompact {
        const NAME: &'static str = "WalletECDSACompact";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.bytes = is.read_bytes()?;
                    },
                    16 => {
                        self.recovery = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.bytes);
            }
            if self.recovery != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.recovery);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.bytes.is_empty() {
                os.write_bytes(1, &self.bytes)?;
            }
            if self.recovery != 0 {
                os.write_uint32(2, self.recovery)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> WalletECDSACompact {
            WalletECDSACompact::new()
        }

        fn clear(&mut self) {
            self.bytes.clear();
            self.recovery = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static WalletECDSACompact {
            static instance: WalletECDSACompact = WalletECDSACompact {
                bytes: ::std::vec::Vec::new(),
                recovery: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for WalletECDSACompact {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Signature.WalletECDSACompact").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for WalletECDSACompact {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for WalletECDSACompact {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20message_contents/signature.proto\x12\x15xmtp.message_contents\"\
    \xdd\x02\n\tSignature\x12T\n\recdsa_compact\x18\x01\x20\x01(\x0b2-.xmtp.\
    message_contents.Signature.ECDSACompactH\0R\x0cecdsaCompact\x12g\n\x14wa\
    llet_ecdsa_compact\x18\x02\x20\x01(\x0b23.xmtp.message_contents.Signatur\
    e.WalletECDSACompactH\0R\x12walletEcdsaCompact\x1a@\n\x0cECDSACompact\
    \x12\x14\n\x05bytes\x18\x01\x20\x01(\x0cR\x05bytes\x12\x1a\n\x08recovery\
    \x18\x02\x20\x01(\rR\x08recovery\x1aF\n\x12WalletECDSACompact\x12\x14\n\
    \x05bytes\x18\x01\x20\x01(\x0cR\x05bytes\x12\x1a\n\x08recovery\x18\x02\
    \x20\x01(\rR\x08recoveryB\x07\n\x05unionBO\n\x1forg.xmtp.proto.message.c\
    ontentsZ,github.com/xmtp/proto/v3/go/message_contentsJ\xd8\x08\n\x06\x12\
    \x04\x01\0\x1c\x01\nG\n\x01\x0c\x12\x03\x01\0\x12\x1a=\x20Signature\x20i\
    s\x20a\x20generic\x20structure\x20for\x20public\x20key\x20signatures.\n\
    \n\x08\n\x01\x02\x12\x03\x03\0\x1e\n\x08\n\x01\x08\x12\x03\x05\0C\n\t\n\
    \x02\x08\x0b\x12\x03\x05\0C\n\x08\n\x01\x08\x12\x03\x06\08\n\t\n\x02\x08\
    \x01\x12\x03\x06\08\n\x86\x01\n\x02\x04\0\x12\x04\n\0\x1c\x01\x1az\x20Si\
    gnature\x20represents\x20a\x20generalized\x20public\x20key\x20signature,\
    \n\x20defined\x20as\x20a\x20union\x20to\x20support\x20cryptographic\x20a\
    lgorithm\x20agility.\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x11\n:\n\x04\
    \x04\0\x03\0\x12\x04\x0c\x04\x0f\x05\x1a,\x20ECDSA\x20signature\x20bytes\
    \x20and\x20the\x20recovery\x20bit\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\
    \x0c\x0c\x18\n<\n\x06\x04\0\x03\0\x02\0\x12\x03\r\x08\x18\"-\x20compact\
    \x20representation\x20[\x20R\x20||\x20S\x20],\x2064\x20bytes\n\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x05\x12\x03\r\x08\r\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x01\x12\x03\r\x0e\x13\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\r\x16\
    \x17\n\x1d\n\x06\x04\0\x03\0\x02\x01\x12\x03\x0e\x08\x1c\"\x0e\x20recove\
    ry\x20bit\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\x0e\x08\x0e\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x0e\x0f\x17\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x03\x12\x03\x0e\x1a\x1b\n\xdf\x01\n\x04\x04\0\x03\x01\x12\
    \x04\x14\x04\x17\x05\x1a\xd0\x01\x20ECDSA\x20signature\x20bytes\x20and\
    \x20the\x20recovery\x20bit\n\x20produced\x20by\x20xmtp-js::PublicKey.sig\
    nWithWallet\x20function,\x20i.e.\n\x20EIP-191\x20signature\x20of\x20a\
    \x20\"Create\x20Identity\"\x20message\x20with\x20the\x20key\x20embedded.\
    \n\x20Used\x20to\x20sign\x20identity\x20keys.\n\n\x0c\n\x05\x04\0\x03\
    \x01\x01\x12\x03\x14\x0c\x1e\n<\n\x06\x04\0\x03\x01\x02\0\x12\x03\x15\
    \x08\x18\"-\x20compact\x20representation\x20[\x20R\x20||\x20S\x20],\x206\
    4\x20bytes\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03\x15\x08\r\n\x0e\
    \n\x07\x04\0\x03\x01\x02\0\x01\x12\x03\x15\x0e\x13\n\x0e\n\x07\x04\0\x03\
    \x01\x02\0\x03\x12\x03\x15\x16\x17\n\x1d\n\x06\x04\0\x03\x01\x02\x01\x12\
    \x03\x16\x08\x1c\"\x0e\x20recovery\x20bit\n\n\x0e\n\x07\x04\0\x03\x01\
    \x02\x01\x05\x12\x03\x16\x08\x0e\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\
    \x12\x03\x16\x0f\x17\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03\x16\
    \x1a\x1b\n\x0c\n\x04\x04\0\x08\0\x12\x04\x18\x04\x1b\x05\n\x0c\n\x05\x04\
    \0\x08\0\x01\x12\x03\x18\n\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x19\x08'\
    \n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x19\x08\x14\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x19\x15\"\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x19%&\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x1a\x084\n\x0c\n\x05\x04\0\x02\x01\x06\x12\
    \x03\x1a\x08\x1a\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\x1b/\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x1a23b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Signature::generated_message_descriptor_data());
            messages.push(signature::ECDSACompact::generated_message_descriptor_data());
            messages.push(signature::WalletECDSACompact::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
