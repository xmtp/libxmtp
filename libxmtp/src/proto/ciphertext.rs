// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message_contents/ciphertext.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Ciphertext represents encrypted payload.
///  It is definited as a union to support cryptographic algorithm agility.
///  The payload is accompanied by the cryptographic parameters
///  required by the chosen encryption scheme.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:xmtp.message_contents.Ciphertext)
pub struct Ciphertext {
    // message oneof groups
    pub union: ::std::option::Option<ciphertext::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:xmtp.message_contents.Ciphertext.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Ciphertext {
    fn default() -> &'a Ciphertext {
        <Ciphertext as ::protobuf::Message>::default_instance()
    }
}

impl Ciphertext {
    pub fn new() -> Ciphertext {
        ::std::default::Default::default()
    }

    // .xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 1;

    pub fn aes256_gcm_hkdf_sha256(&self) -> &ciphertext::Aes256gcmHkdfsha256 {
        match self.union {
            ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(ref v)) => v,
            _ => <ciphertext::Aes256gcmHkdfsha256 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_aes256_gcm_hkdf_sha256(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_aes256_gcm_hkdf_sha256(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aes256_gcm_hkdf_sha256(&mut self, v: ciphertext::Aes256gcmHkdfsha256) {
        self.union = ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aes256_gcm_hkdf_sha256(&mut self) -> &mut ciphertext::Aes256gcmHkdfsha256 {
        if let ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(ciphertext::Aes256gcmHkdfsha256::new()));
        }
        match self.union {
            ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aes256_gcm_hkdf_sha256(&mut self) -> ciphertext::Aes256gcmHkdfsha256 {
        if self.has_aes256_gcm_hkdf_sha256() {
            match self.union.take() {
                ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(v)) => v,
                _ => panic!(),
            }
        } else {
            ciphertext::Aes256gcmHkdfsha256::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ciphertext::Aes256gcmHkdfsha256>(
            "aes256_gcm_hkdf_sha256",
            Ciphertext::has_aes256_gcm_hkdf_sha256,
            Ciphertext::aes256_gcm_hkdf_sha256,
            Ciphertext::mut_aes256_gcm_hkdf_sha256,
            Ciphertext::set_aes256_gcm_hkdf_sha256,
        ));
        oneofs.push(ciphertext::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Ciphertext>(
            "Ciphertext",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Ciphertext {
    const NAME: &'static str = "Ciphertext";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.union = ::std::option::Option::Some(ciphertext::Union::Aes256GcmHkdfSha256(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &ciphertext::Union::Aes256GcmHkdfSha256(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &ciphertext::Union::Aes256GcmHkdfSha256(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Ciphertext {
        Ciphertext::new()
    }

    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Ciphertext {
        static instance: Ciphertext = Ciphertext {
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Ciphertext {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Ciphertext").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Ciphertext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ciphertext {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Ciphertext`
pub mod ciphertext {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:xmtp.message_contents.Ciphertext.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:xmtp.message_contents.Ciphertext.aes256_gcm_hkdf_sha256)
        Aes256GcmHkdfSha256(Aes256gcmHkdfsha256),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Ciphertext as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
    ///  Encryption: AES256-GCM
    ///  Key derivation function: HKDF-SHA256
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256)
    pub struct Aes256gcmHkdfsha256 {
        // message fields
        // @@protoc_insertion_point(field:xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256.hkdf_salt)
        pub hkdf_salt: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256.gcm_nonce)
        pub gcm_nonce: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256.payload)
        pub payload: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Aes256gcmHkdfsha256 {
        fn default() -> &'a Aes256gcmHkdfsha256 {
            <Aes256gcmHkdfsha256 as ::protobuf::Message>::default_instance()
        }
    }

    impl Aes256gcmHkdfsha256 {
        pub fn new() -> Aes256gcmHkdfsha256 {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "hkdf_salt",
                |m: &Aes256gcmHkdfsha256| { &m.hkdf_salt },
                |m: &mut Aes256gcmHkdfsha256| { &mut m.hkdf_salt },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "gcm_nonce",
                |m: &Aes256gcmHkdfsha256| { &m.gcm_nonce },
                |m: &mut Aes256gcmHkdfsha256| { &mut m.gcm_nonce },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "payload",
                |m: &Aes256gcmHkdfsha256| { &m.payload },
                |m: &mut Aes256gcmHkdfsha256| { &mut m.payload },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Aes256gcmHkdfsha256>(
                "Ciphertext.Aes256gcmHkdfsha256",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Aes256gcmHkdfsha256 {
        const NAME: &'static str = "Aes256gcmHkdfsha256";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.hkdf_salt = is.read_bytes()?;
                    },
                    18 => {
                        self.gcm_nonce = is.read_bytes()?;
                    },
                    26 => {
                        self.payload = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.hkdf_salt.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.hkdf_salt);
            }
            if !self.gcm_nonce.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.gcm_nonce);
            }
            if !self.payload.is_empty() {
                my_size += ::protobuf::rt::bytes_size(3, &self.payload);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.hkdf_salt.is_empty() {
                os.write_bytes(1, &self.hkdf_salt)?;
            }
            if !self.gcm_nonce.is_empty() {
                os.write_bytes(2, &self.gcm_nonce)?;
            }
            if !self.payload.is_empty() {
                os.write_bytes(3, &self.payload)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Aes256gcmHkdfsha256 {
            Aes256gcmHkdfsha256::new()
        }

        fn clear(&mut self) {
            self.hkdf_salt.clear();
            self.gcm_nonce.clear();
            self.payload.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Aes256gcmHkdfsha256 {
            static instance: Aes256gcmHkdfsha256 = Aes256gcmHkdfsha256 {
                hkdf_salt: ::std::vec::Vec::new(),
                gcm_nonce: ::std::vec::Vec::new(),
                payload: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Aes256gcmHkdfsha256 {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Ciphertext.Aes256gcmHkdfsha256").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Aes256gcmHkdfsha256 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Aes256gcmHkdfsha256 {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!message_contents/ciphertext.proto\x12\x15xmtp.message_contents\"\xee\
    \x01\n\nCiphertext\x12l\n\x16aes256_gcm_hkdf_sha256\x18\x01\x20\x01(\x0b\
    25.xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256H\0R\x13aes256Gcm\
    HkdfSha256\x1ai\n\x13Aes256gcmHkdfsha256\x12\x1b\n\thkdf_salt\x18\x01\
    \x20\x01(\x0cR\x08hkdfSalt\x12\x1b\n\tgcm_nonce\x18\x02\x20\x01(\x0cR\
    \x08gcmNonce\x12\x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07payloadB\x07\
    \n\x05unionBO\n\x1forg.xmtp.proto.message.contentsZ,github.com/xmtp/prot\
    o/v3/go/message_contentsJ\xb0\x06\n\x06\x12\x04\x01\0\x1a\x01\nD\n\x01\
    \x0c\x12\x03\x01\0\x12\x1a:\x20Ciphertext\x20is\x20a\x20generic\x20struc\
    ture\x20for\x20encrypted\x20payload.\n\n\x08\n\x01\x02\x12\x03\x03\0\x1e\
    \n\x08\n\x01\x08\x12\x03\x05\0C\n\t\n\x02\x08\x0b\x12\x03\x05\0C\n\x08\n\
    \x01\x08\x12\x03\x06\08\n\t\n\x02\x08\x01\x12\x03\x06\08\n\xe6\x01\n\x02\
    \x04\0\x12\x04\x0c\0\x1a\x01\x1a\xd9\x01\x20Ciphertext\x20represents\x20\
    encrypted\x20payload.\n\x20It\x20is\x20definited\x20as\x20a\x20union\x20\
    to\x20support\x20cryptographic\x20algorithm\x20agility.\n\x20The\x20payl\
    oad\x20is\x20accompanied\x20by\x20the\x20cryptographic\x20parameters\n\
    \x20required\x20by\x20the\x20chosen\x20encryption\x20scheme.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x0c\x08\x12\n\x0c\n\x04\x04\0\x08\0\x12\x04\r\x04\x0f\
    \x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\r\n\x0f\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x0e\x087\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\x08\x1b\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x0e\x1c2\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0e56\nl\n\x04\x04\0\x03\0\x12\x04\x15\x04\x19\x05\x1a>\x20Encrypti\
    on:\x20AES256-GCM\n\x20Key\x20derivation\x20function:\x20HKDF-SHA256\n2\
    \x1e\x20Supported\x20Encryption\x20Schemes\n\n\x0c\n\x05\x04\0\x03\0\x01\
    \x12\x03\x15\x0c\x1f\n\x19\n\x06\x04\0\x03\0\x02\0\x12\x03\x16\x08\x1c\"\
    \n\x2032\x20bytes\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\x16\x08\r\
    \n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x16\x0e\x17\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x03\x12\x03\x16\x1a\x1b\n\x19\n\x06\x04\0\x03\0\x02\x01\x12\
    \x03\x17\x08\x1c\"\n\x2012\x20bytes\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x05\x12\x03\x17\x08\r\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x17\
    \x0e\x17\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\x17\x1a\x1b\n\"\n\
    \x06\x04\0\x03\0\x02\x02\x12\x03\x18\x08\x1a\"\x13\x20encrypted\x20paylo\
    ad\n\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03\x18\x08\r\n\x0e\n\x07\
    \x04\0\x03\0\x02\x02\x01\x12\x03\x18\x0e\x15\n\x0e\n\x07\x04\0\x03\0\x02\
    \x02\x03\x12\x03\x18\x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Ciphertext::generated_message_descriptor_data());
            messages.push(ciphertext::Aes256gcmHkdfsha256::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
